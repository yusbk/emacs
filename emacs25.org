#+AUTHOR: Yusman Kamaleri
#+TITLE: Aturcare Emacs versi 25.2
#+DATE: 08 Mars 2018
#+OPTIONS: toc:nil
#+PROPERTY: header-args :comments org :catch yes :results silent :tangle yes

Kandungan =PROPERTY= di atas ~:comments org~ ialah untuk memasukkan komen ke ~emacs25.el~

* Sumbangan
Aturcara ini tidak berhasil tanpa sumbangan dari:

- [[https://github.com/kaushalmodi][Kaushal Modi]]
- [[https://github.com/bixuanzju][Jeremy Bi]]
- [[https://github.com/jkitchin/jmax][John Kitchin - jmax]]
- [[https://github.com/jabranham/emacs/blob/master/emacs.org][Jabraham]]

yang juga menerima sumbangan dari ramai lagi penyumbang di alam cyber.

* Info+
Bantuan untuk Emacs Info. Untuk dapatkan info mengenai pakej pakai =C-h r= kemudian =i=
untuk ke index dan cari nama pakej yang diingini

#+BEGIN_SRC emacs-lisp
  (use-package info+
    :load-path "~/Dropbox/lisp/elisp/"
    :defer 1
    :after info)
#+END_SRC

* UTF-8

Format UTF-8. Tapi =org-mode= bullet jadi kecil itulah dimatikan
#+BEGIN_SRC emacs-lisp :tangle no
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
#+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :config
    (progn
      ;; (setq hydra-lv nil)
      ;; (set-face-attribute 'hydra-face-red      nil :foreground "Red"        :bold t)
      ;; (set-face-attribute 'hydra-face-blue     nil :foreground "RoyalBlue3" :bold t)
      ;; (set-face-attribute 'hydra-face-amaranth nil :foreground "#e52b50"    :bold t)
      ;; (set-face-attribute 'hydra-face-pink     nil :foreground "HotPink1"   :bold t)
      ;; (set-face-attribute 'hydra-face-teal     nil :foreground "#367588"    :bold t)
      (hydra-add-font-lock)))
#+END_SRC

Fungsi-fungsi di bawah diambil dari [[https://github.com/abo-abo/hydra/wiki/Emacs][Hydra Wiki]]
** Movement
Hanya guna =C-n= untuk aktifkan kekuci

#+BEGIN_SRC emacs-lisp :tangle no
  (global-set-key
   (kbd "C-<prior>")
   (defhydra hydra-move
     (:body-pre (forward-line))
     "move"
     ("n" forward-line "next")
     ("p" previous-line "prev")
     ("f" forward-char "forward")
     ("b" backward-char "backward")
     ("a" beginning-of-line "line start")
     ("e" move-end-of-line "line end")
     ("v" scroll-up-command "up")
     ;; Converting M-v to V here by analogy.
     ("V" scroll-down-command "down")
     ("l" recenter-top-bottom "recenter")))
#+END_SRC
** Page Navigation
Sesuai bila banyak mukasurat
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-page (ctl-x-map "" :pre (widen))
    "page"
    ("]" forward-page "next")
    ("[" backward-page "prev")
    ("n" narrow-to-page "narrow" :bind nil :exit t))
#+END_SRC

* Kekunci
** Ringkasan kekunci
Senarai kekunci yang dipakai

|---------+----------------------|
| Kekunci | Fungsi               |
|---------+----------------------|
| jm      | Menu utama           |
| jt      | Terminal             |
| jw      | Penulisan/Word       |
| js      | Knitr/Sweave         |
| jx      | Debug code           |
| jj      | Movement             |
| jc      | Programming          |
| jf      | Find file            |
| jg      | Git                  |
| jl      | Launch Shiny App     |
|         |                      |
| qq      | Todo                 |
| qw      | Browse URL at browse |
|         |                      |

** Key chord
Untuk membuat kekunci singkatan dengan hanya dua huruf. Rujukan [[http://www.emacswiki.org/emacs/key-chord.el][Key Chord Mode]]
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1)
    ;; Max time delay between two key presses to be considered a key chord
    (setq key-chord-two-keys-delay 0.2) ; default 0.1

    ;; Max time delay between two presses of the same key to be considered a key chord.
    ;; Should normally be a little longer than `key-chord-two-keys-delay'.
    (setq key-chord-one-key-delay 0.3) ; default 0.2
    )
#+END_SRC

John Cook's post http://www.johndcook.com/blog/2015/02/01/rare-bigrams/
provides a list of rare bi-grams that would work great for key-chords.

Below list is based off that after removing all the key-chord duplicates
like `xs' and `sx'.

fb
gb gp
jj  jc jf jg jh jk jl jm jp jq js jt jv jw jx jy jz
kk
qq  qb qf qg qh qk ql qm qp qt qv qw qx qy qz
vv  vc vf vg vh vk vm vp vw vz
ww
xb xd xg xk xm xs xw
yy
zb zd zf zg zk zm zp zs zw zx

** Key sequence
Pakej =key-seq= dipakai untuk memastikan turutan kekunci sebelum mengaktifkan
fungsi. Ia bergantung pada pakej =key-chord=. Untuk rujukan boleh baca di [[https://github.com/vlevit/key-seq.el][GitHub]].

Dua fungsi yang boleh dipakai iaitu:

#+BEGIN_EXAMPLE
(key-seq-define-global "qd" 'dired)
(key-seq-define text-mode-map "qf" 'flyspell-buffer)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package key-seq
    :ensure t
    :after key-chord)
#+END_SRC

* Personalised keymaps
Untuk lihat fungsi kekunci terdapat pelbagai cara:
1. =M-x describe-key= atau =F1-k= / =C-h k= untuk dapatkan fungsi bagi kekunci.
2. =M-x describe-bindings= atau =C-h b= untuk tunjukkan semua kekunci kombinasi.
3. =M-x describe-function= atau =C-h f= untuk dapatakan kekunci dari fungsi yang diketahui.

Namakan fungsi =keluar=.

#+BEGIN_SRC emacs-lisp
  (defun keluar ()
    "Keluar dari fungsi."
    (interactive)
    (setq quit t))
#+END_SRC
** Saiz kolom
Saiz untuk sebaris atau kolom ialah 85 =(fill-column)= tetapi sekiranya ingin menukarkan ke saiz
lain, boleh pakai =set-fill-column= menggunakan =C-:= (asal kekunci ialah C-x f tapi
depakai untuk *Origami*).

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-:") 'set-fill-column)
#+END_SRC

** Personal keymap [F6]
Setup a personal keymap. I'll bind various things to this later on:
#+BEGIN_SRC emacs-lisp :tangle no
  (bind-keys :prefix "<f6>"
             :prefix-map ybk/map)

  (bind-key "q" #'keluar 'ybk/map)
  ;;(bind-key "q" #'quit 'ybk/map)
#+END_SRC

** Prog keymap [F12]
Setup utk keymap berkaitan dengan programming
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f12>"
             :prefix-map ybk/prog-map)

  (bind-key "q" #'keluar 'ybk/prog-map)
#+END_SRC
** Move keymap [F2]
Keymap utk pergerakkan
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f2>"
             :prefix-map ybk/move-map)

  (bind-key "q" #'keluar 'ybk/move-map)
#+END_SRC

** Org keymap [F10]
Keymap utk berkaitan dengan Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f10>"
             :prefix-map ybk/org-map )

  (bind-key "q" #'keluar 'ybk/org-map)
#+END_SRC

** R keymap [F9]
Keymap untuk penggunaan berkaitan ESS-R. Cuma aktiv di =ess-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f9>"
             :prefix-map ybk/r-map )

  (bind-key "q" #'keluar 'ybk/r-map)

#+END_SRC
** Misc keymap [F5]
Fungsi lain yang berguna dan perlukan singkatan
#+BEGIN_SRC emacs-lisp :tangle yes
  (bind-keys :prefix "<f5>"
             :prefix-map ybk/misc-map)

  (bind-key "q" #'keluar 'ybk/misc-map)
#+END_SRC

* Directory sendiri
** Customize file
#+BEGIN_SRC emacs-lisp
  (setq directory-sendiri "~/Dropbox/customize/")
  (add-hook
   'after-init-hook
   (lambda ()
     (let ((private-file (concat directory-sendiri "persendirian.el")))
       (when (file-exists-p private-file)
         (load-file private-file)))))
#+END_SRC
** Personal elisp
Semua pakej yang dimuatkan sendiri. Sekiranya perlu boleh compile semua file dengan
melarikan komando ini:

Recompile semua fail-fail =.el= walaupun sudah ada =.elc= tetapi bandingkan timestamps
#+BEGIN_SRC emacs-lisp :tangle no
  (byte-recompile-directory "~/Dropbox/lisp/" 0)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/Dropbox/lisp/elisp")
#+END_SRC

* Go to my emacs settings file
It's nice to have a function to find this file quickly. Here's one:

#+BEGIN_SRC emacs-lisp
  (defun ybk/emacs-file ()
    "Open my emacs org file"
    (interactive)
    (find-file (concat user-emacs-directory "emacs25.org")))

  ;; (bind-key "y" #'ybk/emacs-file 'ybk/map)
#+END_SRC
* Other settings
** Encypting file
Guna Linux =gpg= untuk encyption. Bila buka sebarang =gpg= fail akan meng-encrypt fail
tersebut bila buffer disimpan. Rujukan di [[https://www.emacswiki.org/emacs/EasyPG][EmacsWiki]]. Aturcara untuk menyimpan
password dan username asymatically dengan email ID di keyring boleh di baca di [[https://emacs.stackexchange.com/questions/12212/how-to-type-the-password-of-a-gpg-file-only-when-opening-it][sini]]
atau lebih detail di [[https://nakkaya.com/2009/11/19/keeping-secrets-with-emacs-and-gpg/][sini]].
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config
    (epa-file-enable))
#+END_SRC

Untuk elakkan dari memasukkan key setiapkali encrypted file buffer disimpan, mulakan fail tersebut dengan
#+BEGIN_EXAMPLE
  -*- mode: org -*- -*- epa-file-encrypt-to: ("your@email.com") -*-
#+END_EXAMPLE
~Org-mode~ adalah optional dan dipakai untuk memudahkan struktur fail sekiranya memakai table atau header.
** Customizing key
Diambil dari =[[https://oremacs.com/2015/01/17/setting-up-ediff/][Oremacs]]= utk aturcara custom variable menggunakan singkatan =csetq=

#+BEGIN_SRC emacs-lisp
  (defmacro csetq (variable value)
    `(funcall (or (get ',variable 'custom-set)
                  'set-default)
              ',variable ,value))
#+END_SRC

** Compile
Ini utk menyelesaikan masalah dengan =lexical-let= di ~auto-lang~
#+BEGIN_SRC emacs-lisp
  (eval-when-compile(require 'cl))
#+END_SRC
** Exit
Save buffer and exit
#+BEGIN_SRC emacs-lisp :tangle no
  (bind-key "9" #'save-buffers-kill-emacs 'ybk/map )
#+END_SRC
** Scratch
Untuk buka ~scratch~ boleh dicapai melalui [[*General keymap][General keymap]] atau [[*Personal keymap %5BF10%5D][Personal keymap]]
#+BEGIN_SRC emacs-lisp
  (defun ybk/get-scratch ()
    "Switch to scratch buffer."
    (interactive)
    (switch-to-buffer "*scratch*"))
  ;; (bind-key "o" #'ybk/get-scratch 'ybk/map)
#+END_SRC
** Cancel
Buat [ESC] key utk batal proses sama seperti =C-g=. Diambil dari [[https://www.emacswiki.org/emacs/CancelingInEmacs][EmacsWiki]]
#+BEGIN_SRC emacs-lisp
  (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
  (define-key isearch-mode-map "\e" 'isearch-abort)   ;; \e seems to work better for terminals
  (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
#+END_SRC

** Font
Bergantung dengan =hostname=. Dynamik size font diambil dari [[https://coderwall.com/p/ifgyag/change-font-size-in-emacs-dynamically-based-on-screen-resolution][sini]]
#+BEGIN_SRC emacs-lisp
  ;; ;; For my machine in my worplace, setup my work email address
  ;; (if (yk-jobb)
  ;;     (set-face-attribute 'default nil :height 120)
  ;;   (set-face-attribute 'default nil :height 110))

  ;; set a default font
  (when (member "Ubuntu Mono" (font-family-list)) ;"Tlwg Typewriter" "Cousine"
    (set-face-attribute 'default nil :font "Ubuntu Mono-14")) ;Tlwg Typewriter

  ;; ;; set a default font
  ;; (when (member "Tlwg Mono" (font-family-list)) ;Tlwg Typewriter
  ;;   (set-face-attribute 'default nil :font "Tlwg Mono Bold")) ;Tlwg Typewriter


  ;; ;; Change fonts dynamically based on screen resolution
  ;; (defun fontify-frame (frame)
  ;;   "Change font dynamically."
  ;;   (interactive)
  ;;   (if (eq system-type 'gnu/linux)
  ;;       (progn
  ;;         (if (> (x-display-pixel-width) 1700)
  ;;             (set-frame-parameter frame 'font"Ubuntu Mono-14")
  ;;           (set-frame-parameter frame 'font "Ubuntu Mono-12")))))
  ;; ;;fontify current frame
  ;; (fontify-frame nil)
  ;; ;; Fontify any future frames
  ;; (push 'fontify-frame after-make-frame-functions)
#+END_SRC

** Yes/No
Hanya pakai 'y' atau 'n' untuk 'Yes' dan 'No'
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Lisp dan message permulaan
Mulakan tanpa startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  ;; (setq initial-major-mode #'org-mode)
  (setq initial-scratch-message "# Untuk nota2 sementara yang tidak perlu disimpan\n\n")

  ;; Untuk evaluasi lisp seperti C-x C-e
  (define-key lisp-interaction-mode-map (kbd "<C-return>") 'eval-last-sexp)
#+END_SRC
** Start maximized
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Bunyi beep
Matikan bunyi beep
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Help window
Bila guna =C-h f=, =C-h v=, =C-h k= dan lain2 utk back dokument, fungsi ini menukarkan fokus ke windows tersebut
#+BEGIN_SRC emacs-lisp
  (setq help-window-select t)
#+END_SRC
** Kill buffer
Tidak perlu sahkan utk matikan buffer yang sedang berfungsi cth bila buka ESS
#+BEGIN_SRC emacs-lisp
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
#+END_SRC
** Sembunyikan tetikus
Sembunyikan tetikus masa menaip
#+BEGIN_SRC emacs-lisp
  (setq make-pointer-invisible t)
  ;;Letakkan di upper right corner bila tekan a key
  (mouse-avoidance-mode 'banish)
#+END_SRC
** Komen region
Komen bahagian teks selepas di-highlight
#+BEGIN_SRC emacs-lisp :tangle no
  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)
#+END_SRC

Kommen line tanpa perlu highlight seperti menggunakan
=comment-or-uncommment-region=. Barisan yang ada kursor akan di komen. Cara ini
diambil dari [[  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)][StackOverflow]]

#+BEGIN_SRC emacs-lisp
  (defun comment-eclipse ()
    (interactive)
    (let ((start (line-beginning-position))
          (end (line-end-position)))
      (when (or (not transient-mark-mode) (region-active-p))
        (setq start (save-excursion
                      (goto-char (region-beginning))
                      (beginning-of-line)
                      (point))
              end (save-excursion
                    (goto-char (region-end))
                    (end-of-line)
                    (point))))
      (comment-or-uncomment-region start end)))

  (global-set-key (kbd "M-'") 'comment-eclipse)
#+END_SRC

** Scrolling
Diambil dari [[http://whattheemacsd.com/key-bindings.el-02.html][What the emacs.d]]

#+BEGIN_SRC emacs-lisp
  ;; Move more quickly
  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (next-line 5))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (previous-line 5))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 10))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 10))))
#+END_SRC

Insert newline if point at the end of the buffer

#+BEGIN_SRC emacs-lisp
  (setq next-line-add-newlines t)
#+END_SRC

Scrolling tanpa menggerakkan tetikus/pointer tetapi kedua-dua kekunci mesti ditekan
contohnya utk bergerak ke bawah F2-n mesti ditekan utk setiap pergerakkan

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ybk-scroll-up ()
    "Scroll up."
    (interactive)
    (scroll-up 10))

  (defun ybk-scroll-down ()
    "Scroll down."
    (interactive)
    (scroll-down 10))

  (defhydra hydra-sc (global-map "<f2>")
    "Scroll screen"
    ("<down>" ybk-scroll-up "↑")
    ("<up>" ybk-scroll-down "↓")
    ("q" nil "stop"))
#+END_SRC

** Tab
Aturcara bagaimana =TAB= berfunksi

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 85)
  (setq-default default-tab-width 2)
  (setq-default indent-tabs-mode nil)
#+END_SRC
** Cursor
Tidak blink
#+BEGIN_SRC emacs-lisp
  (when (functionp 'blink-cursor-mode)
    (blink-cursor-mode -1))
#+END_SRC

** Indent
[[https://github.com/Malabarba/aggressive-indent-mode][Agrressive indent]] keep code align even after rearranging stuff
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (global-aggressive-indent-mode)
    )
#+END_SRC
** Find-file
Cari fail guna =C-x C-f= dan buat folder sekiranya belum tersedia seperti guna =mkdir
-p= di terminal

#+BEGIN_SRC emacs-lisp
  (defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
    "Create parent directory if not exists while visiting file."
    (unless (file-exists-p filename)
      (let ((dir (file-name-directory filename)))
        (unless (file-exists-p dir)
          (make-directory dir)))))
#+END_SRC

** Zoom in/out
*** Zoom
Untuk zoom in/out pakai kekunci =C-+/-= . Diambil dari [[https://github.com/purcell/default-text-scale][GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package default-text-scale
    :ensure t
    :bind (("C--" . default-text-scale-decrease)
           ("C-+" . default-text-scale-increase))
    :config
    (default-text-scale-mode))
#+END_SRC
*** Mouse
Pakai mouse =C-Scroll=

#+BEGIN_SRC emacs-lisp
  (global-set-key [C-mouse-4] 'text-scale-increase)
  (global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC

** Menu bar
Capaian ke menu bar. Biasanya hany pakai ~f6~ tetapi ~f6~ dipakai untuk =ybk/map=
#+BEGIN_SRC emacs-lisp :tangle no
  (bind-key "m" #'menu-bar-open 'ybk/map)
#+END_SRC
** Line number
Tunjukkan line number
#+BEGIN_SRC emacs-lisp
  (defun ybk/line-nr ()
    "Tunjukkan nombor garisan."
    (linum-mode 1))

  ;;program mode
  (add-hook 'org-src-mode-hook #'ybk/line-nr)
  (add-hook 'inferior-ess-mode-hook  #'ybk/line-nr)
  (add-hook 'LaTeX-mode-hook  #'ybk/line-nr)
  (add-hook 'markdown-mode-hook  #'ybk/line-nr)
  (add-hook 'ess-mode-hook #'ybk/line-nr)
  (add-hook 'prog-mode-hook #'ybk/line-nr)
#+END_SRC
** ag
Untuk memudahkan pencarian dan abaikan fail seperti folder .git dan ikut cara .gitignore
#+BEGIN_SRC emacs-lisp
  (defalias 'find-grep 'ag)
#+END_SRC
** Warning redefinition
Bila buat pertukaran di aturcara, kekadang ada amaran seperti ini
#+BEGIN_EXAMPLE
ad-handle-definition: 'bookmark-jump' got redefined
#+END_EXAMPLE

Ini adalah noise sahaja, untuk matikan amaran ini boleh baca dari [[https://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/][blog]]

#+BEGIN_SRC emacs-lisp
  (setq ad-redefinition-action 'accept)
#+END_SRC
** Copy file path
Cara untuk menyalin file path di buffer yang sedang digunakan.
#+BEGIN_SRC emacs-lisp
  (defun xah-copy-file-path (&optional @dir-path-only-p)
    "Copy the current buffer's file path or dired path to `kill-ring'.
  Result is full path.
  If `universal-argument' is called first, copy only the dir path.

  If in dired, copy the file/dir cursor is on, or marked files.

  If a buffer is not file and not dired, copy value of `default-directory' (which is usually the “current” dir when that buffer was created)

  URL `http://ergoemacs.org/emacs/emacs_copy_file_path.html'
  Version 2017-09-01"
    (interactive "P")
    (let (($fpath
           (if (string-equal major-mode 'dired-mode)
               (progn
                 (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                   (if (equal (length $result) 0)
                       (progn default-directory )
                     (progn $result))))
             (if (buffer-file-name)
                 (buffer-file-name)
               (expand-file-name default-directory)))))
      (kill-new
       (if @dir-path-only-p
           (progn
             (message "Directory path copied: 「%s」" (file-name-directory $fpath))
             (file-name-directory $fpath))
         (progn
           (message "File path copied: 「%s」" $fpath)
           $fpath )))))

  (global-set-key (kbd "C-c d") 'xah-copy-file-path)
#+END_SRC
** Test buffer utk R
Pindah ke test buffer bila ingin cuba fungsi di R.

* Kill-ring
Dari [[https://github.com/browse-kill-ring/browse-kill-ring][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :defer 2
    :bind ("M-y" . browse-kill-ring)
    :config
    (setq browse-kill-ring-highlight-current-entry t))
#+END_SRC

* Cache
I set up a cache folder in my =.emacs.d= folder so that it's not quite as crowded:

#+BEGIN_SRC emacs-lisp
  (defvar ybk/emacs-cache (concat user-emacs-directory ".cache/")
    "Folder to store cache files in. Should end with a forward slash.")
#+END_SRC

Save a few misc files in the =.cache= directory:

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat ybk/emacs-cache "customize.el"))
  (load custom-file)
  ;;(setq bookmark-default-file (concat ybk/emacs-cache "bookmarks"))
  ;;(setq recentf-save-file (concat ybk/emacs-cache "recentf")) ;sama dengan pkg "recentf"

#+END_SRC

* Estetik
** Menu bar
Buang menu bar dan sekiranya perlu tekan =F10-m= atau =M-x toggle-menu-bar-mode-from-frame=
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1) ;sembunyikan tool-bar
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Powerline
Untuk modeline
*** Cara Powerlie
Beza warna bila buffer aktif atau tidak

Aktifkan sekiranya pakai =moe-theme=
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package powerline
    :ensure t
    :config
    (powerline-default-theme))
#+END_SRC
*** Cara diambil dari GitHug
Diambil di [[https://github.com/sandhu/emacs.d/blob/master/config/008-ui-config.el][sini]]
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package powerline :ensure t
    :init (setq powerline-default-separator 'wave)
    :config (progn
              (require 'powerline)
              (add-hook 'desktop-after-read-hook 'powerline-reset)
              (defface modes-ml-face '((t (:background "#002b36" :inherit mode-line)))
                "Powerline face for modes section of the mode-line"
                :group 'powerline)
              (defface file-ml-face '((t (:background "#586e75" :inherit mode-line)))
                "Powerline face for file and branch section of the mode-line"
                :group 'powerline)
              (defface line-ml-face '((t (:background "#93a1a1" :inherit mode-line)))
                "Powerline face for line number section of the mode-line"
                :group 'powerline)
              (defface pos-ml-face '((t (:background "#586e75" :inherit mode-line)))
                "Powerline face for file position section of the mode-line"
                :group 'powerline)
              (defface ml-fill-face '((t (:background "#93a1a1" :inherit mode-line)))
                "Powerline face used to fill the unused portion of the mode-line"
                :group 'powerline)
              (setq-default mode-line-format
                            '("%e"
                              (:eval
                               (let* ((file-name (buffer-file-name (current-buffer)))
                                      (active (powerline-selected-window-active))
                                      (separator-left (intern (format "powerline-%s-%s"
                                                                      (powerline-current-separator)
                                                                      (car powerline-default-separator-dir))))
                                      (separator-right (intern (format "powerline-%s-%s"
                                                                       (powerline-current-separator)
                                                                       (cdr powerline-default-separator-dir))))
                                      (lhs (list (powerline-major-mode 'modes-ml-face 'l)
                                                 (powerline-process 'modes-ml-face 'l)
                                                 (powerline-minor-modes 'modes-ml-face 'l)
                                                 (powerline-raw " " 'modes-ml-face)
                                                 (funcall separator-left 'modes-ml-face 'file-ml-face)

                                                 (powerline-raw "[" 'file-ml-face)
                                                 (powerline-raw (projectile-project-name) 'file-ml-face)
                                                 (powerline-raw "] %b %*" 'file-ml-face)
                                                 (powerline-raw (concat " "
                                                                        (when (and file-name vc-mode)
                                                                          (concat "(" (-> file-name
                                                                                          vc-working-revision
                                                                                          (string-utils-truncate-to 40))
                                                                                  ")")))
                                                                'file-ml-face 'r)
                                                 (funcall separator-left 'file-ml-face 'ml-fill-face)))

                                      (rhs (list (powerline-raw global-mode-string 'ml-fill-face 'r)
                                                 (funcall separator-right 'ml-fill-face 'pos-ml-face)
                                                 (powerline-raw "%p " 'pos-ml-face 'l)
                                                 (funcall separator-right 'pos-ml-face 'line-ml-face)

                                                 (powerline-raw " %4l " 'line-ml-face 'r))))

                                 (concat (powerline-render lhs)
                                         (powerline-fill 'ml-fill-face (powerline-width rhs))
                                         (powerline-render rhs))))))))
#+END_SRC

*** Powerline aturcara sendiri

Sekiranya =moe-theme= dipakai maka matikan source-code di bawah.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powerline
    :ensure t
    :init (setq powerline-default-separator 'wave) ;contour, butt, wave, arrow, arrow-fade etc
    :config
    (add-hook 'desktop-after-read-hook 'powerline-reset)

    ;; yus-theme
    (defface yus-aktif1 '((t (:background "#3a11ff" :inherit mode-line))) ;#a2e #2a5289 #4c52ee #179 #cfdfff #00d9ff #19a
      "Powerline muka 1."
      :group 'powerline)
    (defface yus-aktif2 '((t (:background "#4c56aa" :inherit mode-line))) ;#2c5197 #a25ec3 #a19 #8b008b #369 #3a11ff #28a #a669ef
      "Powerline muka 2."
      :group 'powerline)
    (defface yus-tidak-aktif1 '((t (:background "gray10" :inherit mode-line-inactive))) ;#1a5aee #35f #a25fff #586e75
      "Powerline muka 1."
      :group 'powerline)
    (defface yus-tidak-aktif2 '((t (:background "gray30" :inherit mode-line-inactive))) ;#273f87 #5478e4 #93a1a1
      "Powerline muka 2."
      :group 'powerline)
    (defface yus-hujung '((t (:background "#5478e4" :inherit mode-line)))
      "Powerline muka 1."
      :group 'powerline)
    (defface yus-buffer-id-tidak-aktif
      '((t (:background "grey20" :inherit mode-line-buffer-id)))
      "Powerline mode-line face"
      :group 'powerline)


    ;; ;; ybk-theme
    ;; (defface ml-aktif1 '((t (:background "#273f87" :inherit mode-line)))
    ;;   "Powerline muka 1."
    ;;   :group 'powerline)
    ;; (defface ml-aktif2 '((t (:background "#cfe" :inherit mode-line)))
    ;;   "Powerline muka 2."
    ;;   :group 'powerline)
    ;; (defface ml-tidak-aktif1 '((t (:background "#ffe" :inherit mode-line-inactive)))
    ;;   "Powerline muka 1."
    ;;   :group 'powerline)
    ;; (defface ml-tidak-aktif2 '((t (:background "#69f" :inherit mode-line-inactive)))
    ;;   "Powerline muka 2."
    ;;   :group 'powerline)'
    ;; (defface ml-hujung '((t (:background "#273f87" :inherit mode-line)))
    ;;   "Powerline muka 1."
    ;;   :group 'powerline)
    ;; (defface ml-buffer-id-tidak-aktif
    ;;   '((t (:inherit mode-line-buffer-id)))
    ;;   "Powerline mode-line face"
    ;;   :group 'powerline)

    ;;untuk display

    (defun ml-yus-theme ()
      "Setup utk ml-yus-theme."
      (interactive)
      (setq-default mode-line-format
                    '("%e"
                      (:eval
                       (let* ((file-name (buffer-file-name (current-buffer)))
                              (active (powerline-selected-window-active))
                              (mode-line-buffer-id (if active 'mode-line-buffer-id 'yus-buffer-id-tidak-aktif))
                              (mode-line (if active 'mode-line 'mode-line-inactive))
                              (wajah1 (if active 'yus-aktif1 'yus-tidak-aktif1))
                              (wajah2 (if active 'yus-aktif2 'yus-tidak-aktif2))
                              (separator-left (intern (format "powerline-%s-%s"
                                                              (powerline-current-separator)
                                                              (car powerline-default-separator-dir))))
                              (separator-right (intern (format "powerline-%s-%s"
                                                               (powerline-current-separator)
                                                               (cdr powerline-default-separator-dir))))

                              (lhs (list (powerline-raw "%  " mode-line 'l)
                                         ;; (when powerline-display-buffer-size
                                         ;;   (powerline-buffer-size mode-line 'l))
                                         ;; (when powerline-display-mule-info
                                         ;;   (powerline-raw mode-line-mule-info mode-line 'l))
                                         ;; (powerline-buffer-id mode-line-buffer-id 'l)
                                         ;; (when (and (boundp 'which-func-mode) which-func-mode)
                                         ;;   (powerline-raw which-func-format nil 'l))

                                         (powerline-raw "[" mode-line)
                                         (powerline-raw (projectile-project-name) mode-line)
                                         (powerline-raw "] %b %*" mode-line)
                                         (powerline-raw (concat " "
                                                                (when (and file-name vc-mode)
                                                                  (concat "(" (-> file-name
                                                                                  vc-working-revision
                                                                                  (string-utils-truncate-to 40))
                                                                          ")")))
                                                        mode-line 'r)

                                         (powerline-raw " ")
                                         ;; pembahagian kiri
                                         (funcall separator-left mode-line wajah1)
                                         (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
                                           (powerline-raw erc-modified-channels-object wajah1 'l))
                                         (powerline-major-mode wajah1 'l)
                                         (powerline-process wajah1)
                                         (powerline-minor-modes wajah1 'l)
                                         ;;(powerline-narrow wajah1 'l)
                                         (powerline-raw " " wajah1)
                                         ;;pembahagian kiri
                                         (funcall separator-left wajah1 wajah2)
                                         (powerline-vc wajah2 'r)
                                         (when (bound-and-true-p nyan-mode)
                                           (powerline-raw (list (nyan-create)) wajah2 'l))))
                              (rhs (list (powerline-raw global-mode-string wajah2 'r)
                                         ;; pembahagian kanan
                                         (funcall separator-right wajah2 wajah1)
                                         (unless window-system
                                           (powerline-raw (char-to-string #xe0a1) wajah1 'l))
                                         (powerline-raw "%4l" wajah1 'l)
                                         (powerline-raw ":" wajah1 'l)
                                         (powerline-raw "%3c" wajah1 'r)
                                         ;; pembahagian kanan
                                         (funcall separator-right wajah1 'yus-hujung) ;mode-line
                                         (powerline-raw " " 'yus-hujung)
                                         (powerline-raw "%6p" 'yus-hujung 'r) ;mode-line
                                         (when powerline-display-hud
                                           (powerline-hud wajah2 wajah1)))))
                         (concat (powerline-render lhs)
                                 (powerline-fill wajah2 (powerline-width rhs))
                                 (powerline-render rhs)))

                       ))))

    ;; (defun powerline-ybk-theme ()
    ;;   "Setup the ybk-mode-line."
    ;;   (interactive)
    ;;   (setq-default mode-line-format
    ;;                 '("%e"
    ;;                   (:eval
    ;;                    (let* ((active (powerline-selected-window-active))
    ;;                           (mode-line-buffer-id (if active 'mode-line-buffer-id 'ml-buffer-id-tidak-aktif))
    ;;                           (mode-line (if active 'mode-line 'mode-line-inactive))
    ;;                           (muka1 (if active 'ml-aktif1 'ml-tidak-aktif1))
    ;;                           (muka2 (if active 'ml-aktif2 'ml-tidak-aktif2))
    ;;                           (separator-left (intern (format "powerline-%s-%s"
    ;;                                                           (powerline-current-separator)
    ;;                                                           (car powerline-default-separator-dir))))
    ;;                           (separator-right (intern (format "powerline-%s-%s"
    ;;                                                            (powerline-current-separator)
    ;;                                                            (cdr powerline-default-separator-dir))))
    ;;                           (lhs (list (powerline-raw "%*" mode-line 'l)
    ;;                                      (when powerline-display-buffer-size
    ;;                                        (powerline-buffer-size mode-line 'l))
    ;;                                      (when powerline-display-mule-info
    ;;                                        (powerline-raw mode-line-mule-info mode-line 'l))
    ;;                                      (powerline-buffer-id mode-line-buffer-id 'l)
    ;;                                      (when (and (boundp 'which-func-mode) which-func-mode)
    ;;                                        (powerline-raw which-func-format nil 'l))
    ;;                                      (powerline-raw " ")
    ;;                                      (funcall separator-left mode-line muka1)
    ;;                                      (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
    ;;                                        (powerline-raw erc-modified-channels-object muka1 'l))
    ;;                                      (powerline-major-mode muka1 'l)
    ;;                                      (powerline-process muka1)
    ;;                                      (powerline-minor-modes muka1 'l)
    ;;                                      (powerline-narrow muka1 'l)
    ;;                                      (powerline-raw " " muka1)
    ;;                                      (funcall separator-left muka1 muka2)
    ;;                                      (powerline-vc muka2 'r)
    ;;                                      (when (bound-and-true-p nyan-mode)
    ;;                                        (powerline-raw (list (nyan-create)) muka2 'l))))
    ;;                           (rhs (list (powerline-raw global-mode-string muka2 'r)
    ;;                                      (funcall separator-right muka2 muka1)
    ;;                                      (unless window-system
    ;;                                        (powerline-raw (char-to-string #xe0a1) muka1 'l))
    ;;                                      (powerline-raw "%4l" muka1 'l)
    ;;                                      (powerline-raw ":" muka1 'l)
    ;;                                      (powerline-raw "%3c" muka1 'r)
    ;;                                      (funcall separator-right muka1 mode-line)
    ;;                                      (powerline-raw " ")
    ;;                                      (powerline-raw "%6p" mode-line 'r)
    ;;                                      (when powerline-display-hud
    ;;                                        (powerline-hud muka2 muka1)))))
    ;;                      (concat (powerline-render lhs)
    ;;                              (powerline-fill muka2 (powerline-width rhs))
    ;;                              (powerline-render rhs)))))))

    ;; aktivkan theme yang ingin dipakai
    (ml-yus-theme)
    )
#+END_SRC
** Tema utk paparan
Utk tukar tema paparan yang lain tekan =yy-t=. Dua themes boleh di pakai:

1. Sanityinc-tomorrow
2. Moe-theme

Berbagai tema tetapi bermasalah sekiranya menukar tema di =Org-mode=. Untuk
menghilangkan tanda * ditepi harus guna capture =C-c c=. Tidak terbaik tetapi belum
jumpa cara lain.

*** Sanityinc-tomorrow
=color-theme-sanityinc-tomorrow= Tidak ada masalah tukar tema di =Org-mode=:
- blue
- bright
- eighties
- night
- day

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config
    ;; utk tukar tema f10-t
    (setq my-themes '(
                      ;; sanityinc-tomorrow-eighties
                      ;; sanityinc-tomorrow-bright
                      sanityinc-tomorrow-blue
                      sanityinc-tomorrow-night
                      sanityinc-tomorrow-day
                      ))


    (setq my-cur-theme nil)
    (defun cycle-my-theme ()
      "Cycle through a list of themes, my-themes"
      (interactive)
      (when my-cur-theme
        (disable-theme my-cur-theme)
        (setq my-themes (append my-themes (list my-cur-theme))))
      (setq my-cur-theme (pop my-themes))
      (load-theme my-cur-theme :no-confirm)
      (message "Tema dipakai: %s" my-cur-theme))

    ;; Switch to the first theme in the list above
    (cycle-my-theme)

    ;; Bind this to C-9
    (global-set-key (kbd "C-9") 'cycle-my-theme)
    ;; (bind-key "t" #'cycle-my-theme 'ybk/map)
    )
#+END_SRC
*** Moe-theme
Untuk aturcara boleh baca di [[https://github.com/kuanyui/moe-theme.el][GitHub]]

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package moe-theme
    :ensure t
    ;;:pin melpa
    :config
    ;; If too yellow background
    (setq moe-light-pure-white-background-in-terminal t)

    ;; tukar tema
    (setq my-themes '(moe-dark
                      moe-light))

    (setq my-cur-theme nil)
    (defun cycle-my-theme ()
      "Cycle through a list of themes, my-themes"
      (interactive)
      (when my-cur-theme
        (disable-theme my-cur-theme)
        (setq my-themes (append my-themes (list my-cur-theme))))
      (setq my-cur-theme (pop my-themes))
      (load-theme my-cur-theme :no-confirm)
      (message "Tema dipakai: %s" my-cur-theme))

    ;; Switch to the first theme in the list above
    (cycle-my-theme)

    ;; Bind this to C-9
    (global-set-key (kbd "C-9") 'cycle-my-theme)
    ;;(bind-key "t" #'cycle-my-theme 'ybk/map)

    ;; warna utk mode-line
    (moe-theme-set-color 'orange) ;warna lain blue,red,purple,green,cyan,magenta

    ;; pakai powerline mode selepas diaktifkan sebelum pasang moe-theme
    (powerline-moe-theme))
#+END_SRC

** Highlight line
Bila mahu aktifkan pakai =yy-g= dari *ybk/map*
*** TODO hl-line+ beri error catch
Masalah utk load =hl-line+= dan memberikan error
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package hl-line+
    :ensure hl-line
    :load-path "~/Dropbox/lisp/elisp/"
    :config
    (toggle-hl-line-when-idle 1) ; Highlight line only when idle
    ;; Number of seconds of idle time after when the line should be highlighted
    (setq hl-line-idle-interval 5)
    ;; Number of seconds for `hl-line-flash' to highlight the line
    (setq hl-line-flash-show-period 3)
    )

#+END_SRC
*** Current line
Highlight current line.

#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :ensure t
    :config
    ;; ;; enable globally
    ;; (global-hl-line-mode 1)

    ;;highlight hanya aktif window
    (setq hl-line-sticky-flag nil)

    (use-package hl-spotlight
      :load-path "~/Dropbox/lisp/elisp/"
      :config
      (use-package centered-cursor-mode
        :ensure t)
      ;;cursor mula ditengah tapi perlukan centered-cursor-mode
      (setq hl-spotlight-keep-centered-flag 1)
      )

    ;; ;; Tukar Cursor
    ;; ;; Rujukan di https://ogbe.net/emacsconfig.html
    ;; (defun ybk/set-cursor ()
    ;;   ;; (set-cursor-color "red") ;; set cursor color to red
    ;;   ;; (set-face-attribute 'region nil :background "red" :foreground "black")
    ;;   ;; (set-face-background 'hl-line "gray30")
    ;;   (set-face-foreground 'highlight nil)
    ;;   (set-face-underline 'hl-line nil)
    ;;   (cond
    ;;    (buffer-read-only
    ;;     (setq cursor-type 'box))
    ;;    (t
    ;;     (setq cursor-type 'bar)))
    ;;   ;; ;; red cursor for overwrite mode
    ;;   ;; (when overwrite-mode
    ;;   ;;   (set-cursor-color "red"))
    ;;   )
    ;; (ybk/set-cursor)

    ;; ;; run after every command
    ;; (add-hook 'post-command-hook 'ybk/set-cursor)


    ;; Tukar warna untuk highlight
    ;; Warna standard
    (eval-after-load 'hl-line
      '(set-face-background 'hl-line "grey15")) ;default hl #271f87 #0a00a0

    (defun ybk/hl-line-terang()
      "Tukar highlight ke warna cerah."
      (interactive)
      (eval-after-load 'hl-line
        '(set-face-background 'hl-line "#ede4a6")))

    (defun ybk/hl-line-gelap()
      "Tukar highlight ke warna gelap"
      (interactive)
      (eval-after-load 'hl-line
        '(set-face-background 'hl-line "grey15")))

    (defun ybk/hl-line-biru()
      "Tukar highlight ke warna gelap"
      (interactive)
      (eval-after-load 'hl-line
        '(set-face-background 'hl-line "#271f87")))

    ;; Buka fail ybk-init.org
    (defhydra hydra-hl-line (:color teal)
      "Warna hl-line"
      ("t" ybk/hl-line-terang  "terang")
      ("g" ybk/hl-line-gelap "gelap")
      ("b" ybk/hl-line-biru "biru")

      ("q" nil "quit" :color blue))

    ;; (bind-key "l" #'hydra-hl-line/body 'ybk/map)
    ;;(key-chord-define-global "gh" #'hydra-hl-line/body)
    )
#+END_SRC

** Jam dan batteri
Tujukkan waktu dan batteri
#+BEGIN_SRC emacs-lisp
  ;; Display battery info
  (use-package fancy-battery
    :ensure t
    :config
    (fancy-battery-mode)
    (setq fancy-battery-show-percentage t))
  ;; Tunjuk masa dan tarik
  (use-package minibuffer-line
    :ensure t
    :config
    (setq minibuffer-line-format
          '(""
            (:eval
             (format-time-string "%a %F %H:%M")))) ;H for 24hr and I for 12hr
    (minibuffer-line-mode))
#+END_SRC

* Shells
** Shell
Pastikan Emacs guna path yang sama utk semua system
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (or (eq system-type 'windows)
            (eq system-type 'gnu/linux))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

** Eshell
Mulakan =eshell= dengan singkatan =C-x t=
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :commands eshell
    :config
    (setq eshell-cmpl-cycle-completions nil
          ;; auto truncate after 20k lines
          eshell-buffer-maximum-lines 20000
          ;; history size
          eshell-history-size 350
          ;; no duplicates in history
          eshell-hist-ignoredups t
          ;; my prompt is easy enough to see
          eshell-highlight-prompt nil
          ;; when I cd somewhere, about 90% of the time I follow with ls, so just go ahead and always do that:
          eshell-list-files-after-cd t
          ;; also list all files w/ more info & human-readable filesizes:
          ;; eshell-ls-initial-args "-lah"

          ;; ;; treat 'echo' like shell echo
          eshell-plain-echo-behavior t)

    (setq eshell-scroll-to-bottom-on-input 'this)

    ;; ;; Fancy prompt form EmacsWiki - EshellPrompt
    ;; (defmacro with-face (str &rest properties)
    ;;   `(propertize ,str 'face (list ,@properties)))

    ;; (defun shk-eshell-prompt ()
    ;;   (let ((header-bg "grey"))
    ;;     (concat
    ;;      (with-face (concat (eshell/pwd) " ") :background header-bg)
    ;;      (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#888")
    ;;      (with-face
    ;;          (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
    ;;        :background header-bg)
    ;;      (with-face "\n" :background header-bg)
    ;;      (with-face user-login-name :foreground "blue")
    ;;      "@"
    ;;      (with-face "ybk" :foreground "green")
    ;;      (if (= (user-uid) 0)
    ;;          (with-face " #" :foreground "red")
    ;;        " $")
    ;;      " ")))
    ;; (setq eshell-prompt-function 'shk-eshell-prompt)
    ;; (setq eshell-highlight-prompt nil)
    )
#+END_SRC
** Fancy prompt
*** Eshell-git-prompt
Boleh di lihat di [[https://github.com/xuchunyang/eshell-git-prompt][sini]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eshell-git-prompt
    :ensure t
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+END_SRC
*** Eshell-git-extras
Boleh lihat di [[https://github.com/kaihaosw/eshell-prompt-extras][sini]]. Tema samada ~epe-theme-lambda~ atau ~epe-theme-dakrone~

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package eshell-prompt-extras
    :ensure t
    :config
    (with-eval-after-load "esh-opt"
      (autoload 'epe-theme-dakrone "eshell-prompt-extras")
      (setq eshell-highlight-prompt nil
            eshell-prompt-function 'epe-theme-dakrone))
    )
#+END_SRC
** Shell pop
Boleh guna key-chort =-t= untuk pakai selain dari =C-x t=

#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    ;; == sekiranya pakai di :config akan pakai 'shell' dan bukan 'eshell'
    :init
    (setq shell-pop-window-position 'bottom
          shell-pop-window-height 30
          shell-pop-full-span t
          shell-pop-shell-type '("eshell" "*eshell*" (lambda nil (eshell))))


    ;; ;;== alternatif måte å gjøre det hvis vil bruke shell
    ;; (setq shell-pop-window-position 'bottom
    ;;       shell-pop-window-height 30
    ;;       shell-pop-full-span t
    ;;       shell-pop-shell-type '("shell" "*shell*" (lambda nil (shell shell-pop-term-shell))))
    )

  ;; key-chord guna key-seq
  (key-seq-define-global "jt" 'shell-pop)

  ;; ;; bagi indent di shell
  ;; (defun ybk-setup-sh-mode ()
  ;;   (interactive)
  ;;   (setq sh-basic-offset 2
  ;;         sh-indentation 2))

  ;; (add-hook 'sh-mode-hook 'ybk-setup-sh-mode)

  ;; Fix dumb terminal
  (setenv "PAGER" "cat")

  ;; Make URLs clickable
  (add-hook 'shell-mode-hook #'goto-address-mode)
  (add-hook 'eshell-mode-hook #'goto-address-mode)

  ;; Bruk standard shell hvis ønskelig
  (global-set-key (kbd "C-x t") 'shell)
#+END_SRC
** Bash
Untuk penggunaan =alias=. Eshell akan simpan alias-alias di fail =~/.emacs.d/eshell/alias=. Utk simpan alias di
fail, tulis komando di =eshell= menggunakan =alias alias-name definition= seperti
contoh di bawah. Jangan edit di fail =alias= secara langsung

#+BEGIN_EXAMPLE
  alias ll ls -l
  alias la ls -a
  alias ff 'find-file $1' ;utk Map find-file ke ff
  alias d 'dired $1' ;utk Map dired ke d
#+END_EXAMPLE
** Shell misc
Setting lain termasuk proses di inferior =R= yang dipakai oleh =ESS=
#+BEGIN_SRC emacs-lisp
  (setq comint-scroll-to-bottom-on-input 'this)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)
#+END_SRC

* Recent files
Utk tetapkan kekerapan menyimpan =recentf= supaya "recent file" tidak hilang kalau
Emacs sangkut. Simpan setaip 5 minit. Untuk buka recent file guna =C-x 9= yang
ditetapkan di =Ivy= atau =C-x C-r= dari [[https://www.emacswiki.org/emacs/RecentFiles][Wiki]]

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    ;;:bind ("C-x C-r" . recentf-open-files)
    :ensure sync-recentf
    :init
    (setq recentf-save-file (concat ybk/emacs-cache "recentf"))
    :config
    (recentf-mode 1)

    ;; Bersihkan recent file list dan sync setiap 60 saat
    (setq recentf-auto-cleanup 60)

    ;; Kekerapan utk simpan file
    (run-at-time nil (* 10 60) 'recentf-save-list))
#+END_SRC
* Backup and auto-save files
Aturcara berkenaan dengan backup
** Backup settings
Setiap fail akan di backup bila fail di simpan /(save)/ dan versi sebelumnya disimpan
dengan meletakkan simbol =~= dinama fail contohnya fail =nama~= bila fail =nama=
disimpan. Fail-fail ini disimpan di folder ~backups~ supaya tidak terselerak di folder utama.

#+BEGIN_SRC emacs-lisp
  ;; simpan auto-save di direktori "backups"
  (setq backup-directory-alist
        `((".*" . ,(concat user-emacs-directory "backups"))))

  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t       ; deleted file goes to ~/.local/share/Trash/files
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made
        kept-new-versions 6               ; newest versions to keep when a new numbered backup is made
        )
  (setq vc-make-backup-files t) ;;  backup versioned files, which Emacs does not do by default
#+END_SRC

** Auto-save
Fail-fail yang sedang dibuka akan disimpan setiap saat atau setiap tambahan huruf
dibuat. Fail-fail seperti =#nama#= disimpan sekiranya fail yang tersebut berubah
tetapi tidak disimpan. Bila fail disimpan /(save)/ maka fail auto-save akan dipadam
secara automatik.

#+BEGIN_SRC emacs-lisp
  ;; buat direktori utk auto-save
  (defvar ybk/auto-save (concat user-emacs-directory "autosave/"))
  (unless (file-exists-p ybk/auto-save)
    (make-directory ybk/auto-save))

  ;; simpan auto-save di direktori "backups"
  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs.d/autosave/" t)))

  ;; ;; matikan autosave
  ;; (setq auto-save-default nil)
#+END_SRC

* Undo
=C-z= as undo, not minimize emacs
#+BEGIN_SRC emacs-lisp
  (bind-key "C-z" #'undo)
#+END_SRC

Undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind (("C-x u" . undo-tree-visualize)
           ("C-S-z" . redo))
    :config

    ;; make ctrl-Z redo
    (defalias 'redo 'undo-tree-redo)
    ;;(global-set-key (kbd "C-S-z") 'redo)

    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)

    (defun ybk/undo-tree-enable-save-history ()
      "Enable auto saving of the undo history."
      (interactive)

      (setq undo-tree-auto-save-history t)

      ;; Compress the history files as .gz files
      ;; (advice-add 'undo-tree-make-history-save-file-name :filter-return
      ;;             (lambda (return-val) (concat return-val ".gz")))

      ;; Persistent undo-tree history across emacs sessions
      (setq ybk/undo-tree-history-dir (let ((dir (concat ybk/emacs-cache
                                                         "undo-tree-history/")))
                                        (make-directory dir :parents)
                                        dir))
      (setq undo-tree-history-directory-alist `(("." . ,ybk/undo-tree-history-dir)))

      (add-hook 'write-file-functions #'undo-tree-save-history-hook)
      (add-hook 'find-file-hook #'undo-tree-load-history-hook))

    (defun ybk/undo-tree-disable-save-history ()
      "Disable auto saving of the undo history."
      (interactive)

      (setq undo-tree-auto-save-history nil)

      (remove-hook 'write-file-functions #'undo-tree-save-history-hook)
      (remove-hook 'find-file-hook #'undo-tree-load-history-hook))

    ;; Aktifkan
    (global-undo-tree-mode 1)

    :diminish (undo-tree-mode . " "))
#+END_SRC

* Which key
Tunjukkan kombinasi kekunci. Untuk aturcara sila rujuk [[https://github.com/justbur/emacs-which-key][GitHub]]. Bila kekunci
ditunjukkan dipelbagai mukasurat, guna =C-h= untuk pilih mukasurat seterusnya atau sebelumnya.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer 4
    :config
    ;;aktifkan
    (which-key-mode)

    ;;Utk key yang panjang
    ;; (setq which-key-use-C-h-commands nil)

    ;;Jenis pop-up
    (setq which-key-popup-type 'side-window)
    (setq which-key-side-window-max-height 0.15) ;berapa peratus dari window semasa

    ;;Bezakan kekunci local dan global
    (set-face-attribute 'which-key-command-description-face nil :inherit nil) ;buang warna
    (set-face-attribute 'which-key-local-map-description-face nil :weight 'bold) ;local bold

    :diminish which-key-mode)
#+END_SRC

* Crux
Kompilasi pelbagi fungsi untuk Emacs. [[https://github.com/bbatsov/crux#keybindings][Crux]]
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :bind(
          ("C-a" . crux-move-beginning-of-line)
          ("C-k" . crux-smart-kill-line) ;first kill end of line then kill whole line
          ("C-<backspace>" . crux-kill-line-backwards)
          ("C-c r" . crux-rename-file-and-buffer) ;rename current buffer
          ("C-c k" . crux-kill-other-buffers) ;kill all open buffers but not this
          ;; :map ybk/map
          ;; ("w" . crux-swap-windows)
          ;; ([?\\] . crux-swap-windows) ;swap between 2 windows
          ;; ("k" . crux-delete-file-and-buffer)
          ;; :map ybk/prog-map
          ;; ("b" . crux-cleanup-buffer-or-region) ;Whitespace-cleanup
          )
    :config
    ;;make a command acting normally on a region to operate on entire buffer
    ;;in the absence of a region
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify))
#+END_SRC

* Windows
** Splitting windows
Seperti =C-x 2= atau =C-x 3= cuma lebih baik
#+BEGIN_SRC emacs-lisp
  (defun ybk/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
        (switch-to-next-buffer)))
  (defun ybk/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))
  (bind-keys ("C-x 2" . ybk/vsplit-last-buffer)
             ("C-x 3" . ybk/hsplit-last-buffer))
#+END_SRC
** Tukar size windows
*** Resize pakej
Aktifkan dengan =f2 += kemudian pakai anak panah.
#+BEGIN_SRC emacs-lisp
  (use-package resize-window
    :ensure t
    :defer 1
    :bind (:map ybk/move-map
                ("+" . resize-window))
    :config
    (defvar resize-windown-alias-list
      '((right ?f)
        (up ?n)
        (left ?b)
        (down ?p))
      "List of aliases for commands.
  Rather than have to use n, etc, you can alias keys for others."))
#+END_SRC

*** Cara Elisp

| Kekunci   | Fungsi                               |
|-----------+--------------------------------------|
| C-S kiri  | Membersarkan atau mengecilkan window |
| C-S kanan |                                      |
| C-S atas  |                                      |
| C-S bawah |                                      |

Untuk membesarkan window melintang atau menegak

#+BEGIN_SRC emacs-lisp :tangle no
  (defun win-resize-top-or-bot ()
    "Figure out if the current window is on top, bottom or in the
    middle"
    (let* ((win-edges (window-edges))
           (this-window-y-min (nth 1 win-edges))
           (this-window-y-max (nth 3 win-edges))
           (fr-height (frame-height)))
      (cond
       ((eq 0 this-window-y-min) "top")
       ((eq (- fr-height 1) this-window-y-max) "bot")
       (t "mid"))))

  (defun win-resize-left-or-right ()
    "Figure out if the current window is to the left, right or in the
    middle"
    (let* ((win-edges (window-edges))
           (this-window-x-min (nth 0 win-edges))
           (this-window-x-max (nth 2 win-edges))
           (fr-width (frame-width)))
      (cond
       ((eq 0 this-window-x-min) "left")
       ((eq (+ fr-width 4) this-window-x-max) "right")
       (t "mid"))))

  (defun win-resize-enlarge-horiz ()
    (interactive)
    (cond
     ((equal "top" (win-resize-top-or-bot)) (enlarge-window -1))
     ((equal "bot" (win-resize-top-or-bot)) (enlarge-window 1))
     ((equal "mid" (win-resize-top-or-bot)) (enlarge-window -1))
     (t (message "nil"))))

  (defun win-resize-minimize-horiz ()
    (interactive)
    (cond
     ((equal "top" (win-resize-top-or-bot)) (enlarge-window 1))
     ((equal "bot" (win-resize-top-or-bot)) (enlarge-window -1))
     ((equal "mid" (win-resize-top-or-bot)) (enlarge-window 1))
     (t (message "nil"))))

  (defun win-resize-enlarge-vert ()
    (interactive)
    (cond
     ((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
     ((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
     ((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally -1))))

  (defun win-resize-minimize-vert ()
    (interactive)
    (cond
     ((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
     ((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
     ((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally 1))))

  (global-set-key [C-S-down] 'win-resize-minimize-vert)
  (global-set-key [C-S-up] 'win-resize-enlarge-vert)
  (global-set-key [C-S-left] 'win-resize-minimize-horiz)
  (global-set-key [C-S-right] 'win-resize-enlarge-horiz)
  (global-set-key [C-S-up] 'win-resize-enlarge-horiz)
  (global-set-key [C-S-down] 'win-resize-minimize-horiz)
  (global-set-key [C-S-left] 'win-resize-enlarge-vert)
  (global-set-key [C-S-right] 'win-resize-minimize-vert)

#+END_SRC

** Switching windows

Tukarkan ke window atau buffers tertentu bila terdapat window/buffer terbahagi

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <up>") 'windmove-up)
  (global-set-key (kbd "C-x <down>") 'windmove-down)
  (global-set-key (kbd "C-x <left>") 'windmove-left)
  (global-set-key (kbd "C-x <right>") 'windmove-right)
#+END_SRC

Lompat dari window ke window dengan menggunakan =M= kemudian nombor window

#+BEGIN_SRC emacs-lisp
  (use-package winum
    :ensure t
    :defer 1
    :bind (:map ybk/move-map
                ("w" . winum-select-window-by-number))
    :init
    (setq winum-keymap
          (let ((map (make-sparse-keymap)))
            ;; (define-key map (kbd "<f2> w") 'winum-select-window-by-number)
            (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
            (define-key map (kbd "M-1") 'winum-select-window-1)
            (define-key map (kbd "M-2") 'winum-select-window-2)
            (define-key map (kbd "M-3") 'winum-select-window-3)
            (define-key map (kbd "M-4") 'winum-select-window-4)
            (define-key map (kbd "M-5") 'winum-select-window-5)
            (define-key map (kbd "M-6") 'winum-select-window-6)
            (define-key map (kbd "M-7") 'winum-select-window-7)
            (define-key map (kbd "M-8") 'winum-select-window-8)
            map))
    :config
    (winum-mode))
#+END_SRC
** Transposing - perkataan dan window
Untuk tukarkan window layout
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :ensure t
    :commands (transpose-frame))
  ;;Transpose utk perkataan guna M-t
  (bind-keys :prefix "C-t"
             :prefix-map transpose-map
             ("f" . transpose-frame)
             ("c" . transpose-chars)
             ("w" . transpose-words)
             ("l" . transpose-lines)
             ("p" . transpose-paragraphs)
             ("s" . transpose-sentences)
             ("x" . transpose-sexps))
#+END_SRC
* Buffers
Aturcare berkaitan dengan buffer
** Pindahkan buffer
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :defer 4
    :bind (:map ybk/move-map
                ("b" . hydra-buffer/body))
    :init
    (defhydra hydra-buffer (:hint nil)
      "
        ^Pindahkan buffer^
        ^^^^^^^^--------------------------
         _↑_: atas       _→_: kanan
         _↓_: bawah      _←_: kiri

        "
      ("<left>" buf-move-left)
      ("<right>" buf-move-right)
      ("<down>" buf-move-down)
      ("<up>" buf-move-up)
      ("q" nil "quit" :color red))

    ;;(key-chord-define-global "vb" #'hydra-buffer/body)
    ;;(bind-key "C-c m b" #'hydra-buffer/body)
    :config
    (setq buffer-move-behavior 'move))
#+END_SRC
** Ibuffer
Guna =ibuffer= menggantikan =buffer= biasa bila pakai C-x C-b

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer                    ; Better buffer list
    :defer 4
    :bind (([remap list-buffers] . ibuffer))
    ;; Show VC Status in ibuffer
    :config (setq ibuffer-formats
                  '((mark modified read-only vc-status-mini " "
                          (name 18 18 :left :elide)
                          " "
                          (size 9 -1 :right)
                          " "
                          (mode 16 16 :left :elide)
                          " "
                          (vc-status 16 16 :left)
                          " "
                          filename-and-process)
                    (mark modified read-only " "
                          (name 18 18 :left :elide)
                          " "
                          (size 9 -1 :right)
                          " "
                          (mode 16 16 :left :elide)
                          " " filename-and-process)
                    (mark " "
                          (name 16 -1)
                          " " filename))))
#+END_SRC
** ibuffer-vc
Ibuffer for version control. Rujukan di [[https://github.com/purcell/ibuffer-vc][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc                 ; Group buffers by VC project and status
    :ensure t
    :defer t
    :init (add-hook 'ibuffer-hook
                    (lambda ()
                      (ibuffer-vc-set-filter-groups-by-vc-root)
                      (unless (eq ibuffer-sorting-mode 'alphabetic)
                        (ibuffer-do-sort-by-alphabetic)))))

#+END_SRC

* Ivy
A generic completion mechanism for Emacs. Rujukan utk kekuci dan penerangan di [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][sini]]

Fungsi berguna bila di minibuffer =M-o=

| Kekunci | Fungsi                           |
|---------+----------------------------------|
| C-v     | Page up by one Ivy buffer size   |
| M-v     | Page down by one Ivy buffer size |
| M-<     | Beginning of buffer              |
| M->     | End of buffer                    |
| M-o     | Actions when in Ivy minibuffer   |

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-b" . ivy-switch-buffer)
           ("C-d" . ivy-dired-recent-dirs)
           ("C-r" . ivy-resume) ;sambung cari bila pakai C-s "swiper"
           ;; :map ybk/map
           ;; ("'" . ivy-resume)
           )
    :config
    (ivy-mode 1)
    (setq ivy-display-style 'fancy)
    (setq ivy-use-virtual-buffers t) ;add recent files and bookmarks at ivy-switch-buffer
    (setq ivy-height 12) ;displays the current and total number in the collection in the prompt
    (setq ivy-count-format "%d/%d ") ;show number of matched candidate in current and total

    ;; Do not show "./" and "../" in the `counsel-find-file' completion list
    (setq ivy-extra-directories nil) ; default value: ("../" "./")

    ;; open recent directory, requires ivy (part of swiper)
    ;; borrows from http://stackoverflow.com/questions/23328037/in-emacs-how-to-maintain-a-list-of-recent-directories
    (defun ivy-dired-recent-dirs ()
      "Present a list of recently used directories and open the selected one in dired"
      (interactive)
      (let ((recent-dirs
             (delete-dups
              (mapcar (lambda (file)
                        (if (file-directory-p file) file (file-name-directory file)))
                      recentf-list))))

        (let ((dir (ivy-read "Directory: "
                             recent-dirs
                             :re-builder #'ivy--regex
                             :sort nil
                             :initial-input nil)))
          (dired dir))))

    ;; Ivy select multiple files
    ;; Tapi tidak berfungsi - Pakai Ibuffer dan mark utk fungsi yg sama
    ;; https://github.com/abo-abo/swiper/issues/561
    (defvar ivy-marked-candidates nil
      "List of marked candidates")

    (defun ivy-mark-candidate ()
      (interactive)
      (let ((cand ivy--current))
        (if (member cand ivy-marked-candidates)
            (progn
              (setq ivy-marked-candidates
                    (delete cand ivy-marked-candidates))
              (setcar (member ivy--current (ivy-state-collection ivy-last))
                      (setf (nth ivy--index ivy--old-cands) (substring cand 2))))
          (setcar (member ivy--current (ivy-state-collection ivy-last))
                  (setq cand (setf (nth ivy--index ivy--old-cands) (concat "M|" cand))))
          (setq ivy-marked-candidates
                (append ivy-marked-candidates (list cand))))))

    (define-key ivy-minibuffer-map (kbd "C-<SPC>") 'ivy-mark-candidate)

    (defun testf ()
      (interactive)
      (setq ivy-marked-candidates '())
      (ivy-read "select: " (mapcar #'substring-no-properties
                                   '("a" "b" "c" "d" "e"))
                :caller 'testf
                :action
                (lambda (x)
                  (with-ivy-window
                    (insert (mapconcat (lambda (s)
                                         (if (string-match "^M|" s)
                                             (substring s 2)
                                           s))
                                       (or ivy-marked-candidates
                                           (list x))
                                       ", "))))))
    ;; insert files name
    (ivy-add-actions t
                     '(("f" (lambda (x) (with-ivy-window (insert (file-relative-name x)))) "file name")))

    :diminish ivy-mode)
#+END_SRC
** Ivy-hydra
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :ensure t
    :after ivy)
#+END_SRC
** Insert file path
Diambil dari [[https://www.emacswiki.org/emacs/InsertFileName][Wiki]]. Cari fail yang ingin dimasukkan dengan =C-x C-f= kemudian bila di minibuffer boleh pakai
=M-o I=, =M-o F= atau =M-o B= untuk masukkan ~file path~ dari minibuffer

#+BEGIN_SRC emacs-lisp :tangle no
  (ivy-add-actions t
                   '(("I" (lambda (x) (with-ivy-window (insert x))) "insert")))
  (ivy-add-actions 'counsel-find-file
                   '(("F" (lambda (x) (with-ivy-window (insert (file-relative-name x))))
                      "insert relative file name")
                     ("B" (lambda (x)
                            (with-ivy-window
                              (insert (file-name-nondirectory (replace-regexp-in-string "/\\'" "" x)))))
                      "insert file name without any directory information")))
#+END_SRC

* Counsel
A collection of Ivy-enhanced versions of common Emacs commands. Pakai =M-o= utk buka
actions bila di Ivy minibuffer. Atau =C-o= utk Counsel commands

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-x C-r" . counsel-recentf)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f2> m" . counsel-imenu)
     ("C-M-y" . counsel-yank-pop)
     ("C-x l" . counsel-locate))
    :config
    ;;key-chord utk find-file
    (key-seq-define-global "jf" 'counsel-find-file)

    ;; tambah action bila pakai =M-o=
    (ivy-set-actions
     'counsel-find-file
     '(("d" delete-file "delete")))

    ;; cari di direktori current file
    (setq counsel-find-file-at-point t)
    ;; ignore . files or temporary files
    (setq counsel-find-file-ignore-regexp
          (concat
           ;; File names beginning with # or .
           "\\(?:\\`[#.]\\)"
           ;; File names ending with # or ~
           "\\|\\(?:\\`.+?[#~]\\'\\)")))
#+END_SRC

* Swiper
Untuk memudahkan pencarian di buffer. Untuk fungsi =cari & tukar= (search & replace)
mula dengan cari =C-s= dan kemudian =M-q= utk perkataan yang ingin ditukarkan. Kemudian
=SPC= atau "Y" utk laksanakan pertukaran

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ;; ("C-r" . swiper) ;C-r pakai utk ivy-resume
           ("C-c m" . woman) ;manual
           ("C-c u" . swiper-all))
    :diminish ivy-mode)
#+END_SRC

* Avy-goto

| Kekunci | Fungsi         |
|---------+----------------|
| M-g-g   | avy-goto-line  |
| qg      | hydra-avy/body |
| M-g     | hydra-avy/body |

Guna seperti =ace-jump-mode= untuk mencari perkataan kemudian taip
=avy-key= utk terus ke tempat yg ingin dipilih

#+BEGIN_SRC emacs-lisp
  ;; (use-package avy
  ;;   :bind (("M-g l" . avy-goto-line)
  ;;          ("M-g w" . avy-goto-char-timer)
  ;;          ("M-g s" . avy-goto-word-1)
  ;;          ("M-g p" . avy-pop-mark))

  ;;   :config
  ;;   (setq avy-background t)
  ;;   (advice-add 'swiper :before 'avy-push-mark)
  ;;   (setq avy-keys
  ;;         '(?c ?a ?s ?d ?e ?f ?h ?w ?y ?j ?k ?l ?n ?m ?v ?r ?u ?p)))

  ;; Guna Hydra
  (use-package avy
    :ensure t
    :defer 1
    :bind (:map ybk/move-map
                ("a" . hydra-avy-goto/body))
    :config
    (use-package link-hint
      :ensure t)
    (global-set-key (kbd "C-c g") #'avy-goto-line)
    (defhydra hydra-avy-goto (:color blue
                                     :columns 8);(global-map "M-g")
      "avy-goto"
      ("g" avy-goto-line "line")
      ("c" avy-goto-char-timer "char")
      ("C" avy-goto-char-2 "char-2")
      ("w" avy-goto-word-1 "word")
      ("s" avy-goto-subword-1 "subword")
      ("u" link-hint-open-link "open-URI")
      ("U" link-hint-copy-link "copy-URI")
      ("q" nil "cancel" :color red))
    (advice-add 'swiper :before 'avy-push-mark)
    (setq avy-keys
          '(?c ?a ?s ?d ?e ?f ?h ?w ?y ?j ?k ?l ?n ?m ?v ?r ?u ?p))

    ;;== use key-chord
    (key-seq-define-global "qg" #'hydra-avy-goto/body)
    ;;(key-chord-define-global "qg" #'hydra-avy-goto/body)
    )
#+END_SRC

* Company

Utk melengkapkan pencarian perkataan dsb. Tekan =TAB= utk percepatkan carian tanpa
tunggu 1 saat. Untuk masalah di =eshall= bila pakai estrisk (*) boleh pakai quote =C-q=

** Aturcara umum

| Kekunci | Fungsi                |
|---------+-----------------------|
| C-.     | Company-files         |
| C-c TAB | Company-dabbrev       |
| M-1     | Comp. quickhelp HIDE  |
| M-2     | Comp. quickhelp mode  |
|---------+-----------------------|
| Kekunci di lokal mode shj       |
|---------+-----------------------|
| C-n     | Comp. select next     |
| C-p     | Comp. select previous |
| C-d     | Comp. show doc buffer |

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (:map ybk/prog-map
                ("m" . company-begin-backend))
    :init
    (add-hook 'after-init-hook 'global-company-mode) ;aktifkan disemua buffer
    :config
    ;; Use Company for completion
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)

    (setq company-tooltip-align-annotations t   ; align
          company-tooltip-limit 6               ; list to show
          company-tooltip-flip-when-above t
          company-show-numbers t                ; Easy navigation to candidates with M-<n>
          company-idle-delay .2                 ; delay before autocomplete popup
          company-minimum-prefix-length 4       ; 4 prefix sebelum tunjukkan cadangan (default)
          company-abort-manual-when-too-short t ; tanpa company sekiranya prefix pendek dari 'minimum-prefix-length'
          )


    (setq company-dabbrev-downcase nil          ;keep returned candidate as-is. default 'case-replace
          company-debbrev-ignore-case t)        ;ignore case

    ;; ;; Enable globally
    ;; (global-company-mode 1)
    ;; ;;Different settings
    ;; (setq company-idle-delay .1) ;bila 1 akan tangguh 1 saat
    ;; (setq company-show-numbers t)
    ;; (setq company-minimum-prefix-length 3) ;Berapa prefix sebelum tunjukkan cadangan
    ;; (setq company-dabbrev-downcase nil)
    ;; (setq company-dabbrev-other-buffers t)
    ;; (setq company-auto-complete nil)
    ;; (setq company-tooltip-align-annotations t)
    ;; (setq company-tooltip-limit 5)
    ;; (setq company-dabbrev-code-other-buffers 'all)
    ;; (setq company-dabbrev-code-everywhere t)
    ;; (setq company-dabbrev-code-ignore-case t)
    ;; ;; (global-set-key (kbd "C-<tab>") 'company-dabbrev)
    ;; ;; (global-set-key (kbd "M-<tab>") 'company-complete)

    ;; ;; Aktivkan di mode tertentu contohny:
    ;; (add-to-list 'company-backends '(company-capf :with company-abbrev)) ;merge different backends
    ;; ;; utk pakai aktifkan dgn F12-y
    ;; (add-to-list 'company-backends 'company-yasnippet) ;yasnippet - matikan sebab confict dgn company org-mode

    ;; ;; aktivkan company
    ;; (add-hook 'shell-mode-hook (lambda () (setq-local company-backends 'company-files)))

    ;; aktifkan di org-mode selepas pastikan company-capf di company-backends
    ;; https://github.com/company-mode/company-mode/issues/50
    (defun add-pcomplete-to-capf ()
      (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))

    (add-hook 'org-mode-hook #'add-pcomplete-to-capf)

    ;; ;; Matikan di mode tertentu
    ;; (setq company-global-modes '(not org-mode)) ;org-mode

    (bind-keys :map company-active-map
               ("C-n" . company-select-next)
               ("C-p" . company-select-previous)
               ("C-d" . company-show-doc-buffer)
               ("<tab>" . company-complete))
    :diminish
    (company-mode . " "))

#+END_SRC
** Company go
#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-go))
    :config
    ;; ;;color customization
    ;; (custom-set-faces
    ;;  '(company-preview
    ;;    ((t (:foreground "darkgray" :underline t))))
    ;;  '(company-preview-common
    ;;    ((t (:inherit company-preview))))
    ;;  '(company-tooltip
    ;;    ((t (:background "lightgray" :foreground "black"))))
    ;;  '(company-tooltip-selection
    ;;    ((t (:background "steelblue" :foreground "white"))))
    ;;  '(company-tooltip-common
    ;;    ((((type x)) (:inherit company-tooltip :weight bold))
    ;;     (t (:inherit company-tooltip))))
    ;;  '(company-tooltip-common-selection
    ;;    ((((type x)) (:inherit company-tooltip-selection :weight bold))
    ;;     (t (:inherit company-tooltip-selection)))))
    )

#+END_SRC

** Company quick-helps
Tambahan informasi bagi funksi contohnya di R atau program lain. Tapi bila
aktivkan sepenuhnya selalu mengganggu. Jadi aktivkan bila perlu sahaja

#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :after company
    :config
    (company-quickhelp-mode -1) ;Matikan

    ;; Manually trigger the help popup
    (eval-after-load 'company
      '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))

    ;; :bind (("M-1" . company-quickhelp-hide)
    ;;        ("M-2" . company-quickhelp-mode))
    )
#+END_SRC

** Company-flx
Tambah fuzzy matching ke Company

#+BEGIN_SRC emacs-lisp
  (use-package company-flx
    :ensure t
    :config
    (company-flx-mode +1))
#+END_SRC
* Yasnippet
** Koleksi snippet
Koleksi rasmi snippet. Kemaskinikan package dengan =M-x package-refresh-contents=
sekiranya snippets tidak dapat dipasang. Snippet persendirian di simpan di
=Dropbox/snippet=. Bila buat snippet persendirian extention nama fail harus pakai =.yas=
supaya snippet mode diaktifkan secara automatik.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    ;;:pin melpa
    )
#+END_SRC

Untuk ESS-snippet boleh muat turun di [[https://github.com/mattfidler/yasnippet-ess-mode.git][GitHub]].

#+BEGIN_EXAMPLE
git clone https://github.com/mattfidler/yasnippet-ess-mode.git
#+END_EXAMPLE

** Aturcara yasnippet
Untuk dapatkan templete di Emacs. Sila rujuk [[https://www.emacswiki.org/emacs/Yasnippet][EmacsWiki]] untuk [[https://github.com/joaotavora/yasnippet][Yasnippet]]. Untuk buat snippets boleh baca di [[https://joaotavora.github.io/yasnippet/snippet-development.html][sini]].
Keychord =jy= untuk /company-yasnippet/.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :commands (yas-minor-mode) ;autoload 'yasnippet' when 'yas-minor-mode' is called
    :mode ("\\.yasnippet" . snippet-mode) ;aktifkan mode bila ada fail dengan .yasnippet
    :bind (;; masukkan abbrev atau snippet sekiranya ada
           ("C-x y" . company-yasnippet)
           :map ybk/prog-map
           ("y" . company-yasnippet))

    :init
    ;; Folder utk yassnippets
    (setq yas-snippet-dirs
          '("~/Dropbox/snippets"   ;; personal snippets
            ))

    :config
    ;; reload when yasnippet is loaded
    (yas-reload-all)

    ;; Aktifkan yas-minor-mode bila mode dibawah dibuka
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    (add-hook 'org-mode-hook #'yas-minor-mode)
    (add-hook 'markdown-mode-hook #'yas-minor-mode)
    (add-hook 'ess-mode-hook #'yas-minor-mode)
    (add-hook 'inferior-ess-mode-hook #'yas-minor-mode)

    ;; ;;Enable Yasnippet
    ;; (yas-global-mode 1)

    ;; Conflict with org-mode solution use of TAB
    (defun yas/org-very-safe-expand ()
      (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))

    (add-hook 'org-mode-hook
              (lambda ()
                (make-variable-buffer-local 'yas/trigger-key)
                (setq yas/trigger-key [tab])
                (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                (define-key yas-keymap [tab] 'yas/next-field)))

    (key-seq-define-global "jy" 'company-yasnippet)

    ;;Masukkan snippet sekiranya ada else masukkan blank line (open-line)
    ;;https://emacs.stackexchange.com/questions/7908/how-to-make-yasnippet-and-company-work-nicer

    ;;   (defun aya-open-line ()
    ;;     "Call `open-line', unless there are abbrevs or snippets at point.
    ;; In that case expand them.  If there's a snippet expansion in progress,
    ;; move to the next field. Call `open-line' if nothing else applies."
    ;;     (interactive)
    ;;     (cond ((expand-abbrev))

    ;;           ((yas--snippets-at-point)
    ;;            (yas-next-field-or-maybe-expand))

    ;;           ((ignore-errors
    ;;              (yas-expand)))

    ;;           (t
    ;;            (open-line 1))))

    ;;   (global-set-key (kbd "C-x y") 'aya-open-line)
    )



#+END_SRC
* Parentheses
** Smartparens
Pasangan utk parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :demand t
    :bind (:map ybk/prog-map
                ("a" . sp-beginning-of-sexp)
                ("e" . sp-end-of-sexp)
                ("u" . sp-unwrap-sexp) ;sama seperti sp-splice-sexp
                ("x" . sp-kill-sexp))
    ;; ("C-M-a" . sp-beginning-of-sexp)
    ;; ("C-M-e" . sp-end-of-sexp)
    ;; ("C-M-u" . sp-unwrap-sexp) ; sama seperti sp-splice-sexp
    :config
    (use-package smartparens-config)
    (setq sp-show-pair-from-inside t)

    ;;program mode
    ;; (add-hook 'org-src-mode-hook #'smartparens-strict-mode)
    ;; (add-hook 'inferior-ess-mode-hook #'smartparens-strict-mode)
    (add-hook 'org-src-mode-hook #'smartparens-mode)
    (add-hook 'inferior-ess-mode-hook #'smartparens-mode)
    (add-hook 'LaTeX-mode-hook #'smartparens-mode)
    (add-hook 'markdown-mode-hook #'smartparens-mode)

    ;;(smartparens-global-strict-mode)
    (show-smartparens-global-mode)
    (smartparens-global-mode)

    :diminish (smartparens-mode . ""))

#+END_SRC
** Rainbow-delimited
Warna untuk setiap pasangan parentheses
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :commands rainbow-delimiters-mode
    :init
    (add-hook 'org-src-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'inferior-ess-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'markdown-mode-hook  #'rainbow-delimiters-mode)
    (add-hook 'ess-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Origami
Untuk sembunyikan tekst yang panjang. Rujukan di [[https://github.com/gregsexton/origami.el][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :ensure t
    :defer t
    :commands origami-mode
    :bind (("C-x f" . hydra-origami/body)
           :map ybk/prog-map
           ("o" . hydra-origami/body)
           ;; :map origami-mode-map
           ;; ("C-:" . hydra-origami/body)
           )

    :custom-face
    (origami-fold-replacement-face ((t (:inherit magit-diff-context-highlight))))
    (origami-fold-fringe-face ((t (:inherit magit-diff-context-highlight))))

    :config
    (global-origami-mode)
    (face-spec-reset-face 'origami-fold-header-face)

    ;; fold symbols
    (setq origami-fold-replacement "...**")

    ;; Highlight line where the fold starts
    (setq origami-show-fold-header t)

    ;; Hydra tidak berfungsi bila diletakkan di init.
    ;; origami mode harus aktiv dahulu utk pakai fungsi2
    (defhydra hydra-origami (:hint nil)

      "
      ^Origami for codes^
      ^-----------------
      _f_: recursively toggle  _p_: previous fold      _u_: undo      _q_: Keluar
      _a_: toggle all nodes    _n_: next fold          _z_: redo
      _t_: toggle node         _o_: only current node  _r_: reset

     "
      ("f" origami-recursively-toggle-node)
      ("a" origami-toggle-all-nodes)
      ("t" origami-toggle-node)

      ("p" origami-previous-fold)
      ("o" origami-show-only-node)
      ("n" origami-forward-fold)

      ("u" origami-undo)
      ("z" origami-redo)
      ("r" origami-reset)

      ("q" (message "KELUAR") :exit t))
    )
#+END_SRC

* Winner mode

Gunakan =C-c <left>= and =C-c <right>= untuk kembali ke buffer sebelumnya

#+BEGIN_SRC emacs-lisp
  (winner-mode t)
#+END_SRC

* Rainbow mode

=rainbow-mode= displays hexadecimal colors with the color they
represent as their background.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-mode)
    (add-hook 'inferior-ess-mode-hook #'rainbow-mode)
    (add-hook 'ess-mode-hook #'rainbow-mode)
    (add-hook 'markdown-mode-hook #'rainbow-mode)
    (add-hook 'LaTeX-mode-hook #'rainbow-mode)
    (add-hook 'text-mode-hook #'rainbow-mode)

    :diminish (rainbow-mode . ""))
#+END_SRC

* Singkatan/Abbrev
** Abbreviation
Sila rujuk [[https://www.emacswiki.org/emacs/AbbrevMode][Abbrev Mode]] untuk penerangan lanjut.  Contoh untuk guna singkatan 'ns' ke
'Nama Saya', taip 'ns' kemudian =C-x a i g=, kemudian 'Nama Saya'. Bila =Abbrev Mode=
aktiv hanya taip 'ns' untuk dapatkan 'Nama Saya'

#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode
    :init
    ;; where to read abbrev def from
    (setq abbrev-file-name (concat ybk/emacs-cache "abbrev_defs"))

    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file))

    :hook ((org-mode
            ess-mode
            emacs-lisp-mode
            text-mode). abbrev-mode)

    ;; ;;== Hanya aktivkan abbrev mode di mode tertentu - sama seperti :hook
    ;; (dolist (hook '(org-mode-hook
    ;;                 ess-mode-hook
    ;;                 emacs-lisp-mode-hook
    ;;                 text-mode-hook))
    ;;   (add-hook hook (lambda () (abbrev-mode 1))))

    ;; (setq abbrev-file-name                    ;; tell emacs where to read abbrev
    ;;       "~/.emacs.d/.cache/abbrev_defs")    ;; definitions from...

    :config
    ;;== Save abbrev bila save fail - akan ditanya sebelum abbrev disimpan
    ;; (setq save-abbrevs t)
    (setq save-abbrevs 'silently)

    (setq-default abbrev-mode t)
    )
#+END_SRC

** Predictive abbreviation
Penerangan boleh baca di [[https://www.emacswiki.org/emacs/PredictiveAbbreviation][Wiki]]
#+BEGIN_SRC emacs-lisp
  (use-package pabbrev
    :ensure t
    :diminish pabbrev-mode
    :hook ((org-mode
            ess-mode
            emacs-lisp-mode
            text-mode). pabbrev-mode)

    :init
    (setq pabbrev-idle-timer-verbose nil
          pabbrev-read-only-error nil
          pabbrev-scavenge-on-large-move nil)
    :config
    (put 'yas-expand 'pabbrev-expand-after-command t)

    ;;aktifkan pabbrev
    (global-pabbrev-mode)

    ;; Fix for pabbrev not working in org mode
    ;; http://lists.gnu.org/archive/html/emacs-orgmode/2016-02/msg00311.html
    (define-key pabbrev-mode-map [tab] 'pabbrev-expand-maybe)

    ;; kill all possible overlay from current view
    (setq pabbrev-debug-erase-all-overlays t)

    ;; ;; hook to text-mode-hook
    ;; (add-hook 'text-mode-hook (lambda () (pabbrev-mode)))

    ;; pretty print a hash
    (setq pabbrev-debug-print-hash t)

    ;;limit suggestions and sort
    (setq pabbrev-suggestions-limit-alpha-sort 5)
    )
#+END_SRC

* Register dan bookmark

| Kekunci | Fungsi            |
|---------+-------------------|
| C-f2    | bm-toggle         |
| M-home  | save point        |
| M-end   | restore point     |

** Register
Untuk simpan sementara (transient storage) dan hilang bila matikan Emacs. Caranya:
- =C-x-r-Space= utk simpan/daftarkan tempat cursor utk kembali di register
- =C-x-r-j= utk ke tempat yang didaftarkan di register

Contoh =C-x r SPC b= daftarkan tempat cursor sebagai *b* dan utk kembali ke sini tekan
=C-x r j b=. Pendaftaran tempat hanya boleh pakai satu huruf sahaja.

#+BEGIN_SRC emacs-lisp
  (global-set-key [M-home] 'point-to-register)
  (global-set-key [M-end] 'jump-to-register)

  ;; bind-key dengan [f2] move key
  ;; (bind-key "SPC" #'point-to-register 'ybk/move-map)
  ;; (bind-key "<end>" #'jump-to-register 'ybk/move-map)
  (bind-key "p" #'point-to-register 'ybk/move-map)
  (bind-key "o" #'jump-to-register 'ybk/move-map)
#+END_SRC

** Bookmark
Berlu dipelajari. Sila baca [[https://www.emacswiki.org/emacs/BookMarks][Wiki:Bookmarks]] utk cara umum iaitu:
- ‘C-x r m’ – set a bookmark at the current location (e.g. in a file)
- ‘C-x r b’ – jump to a bookmark
- ‘C-x r l’ – list your bookmarks
- ‘M-x bookmark-delete’ – delete a bookmark by name

[[https://github.com/emacsmirror/bookmark-plus][Bookmark-plus]] boleh download langsung di GitHub dan pasang di =load-path=

  Some keys for bookmark list:
  ‘s’ – save bookmark while in bookmark
  ‘a’ – show annotation for the current bookmark
  ‘A’ – show all annotations for your bookmarks
  ‘d’ – mark various entries for deletion (‘x’ – to delete them)
  ‘e’ – edit the annotation for the current bookmark
  ‘m’ – mark various entries for display and other operations, (‘v’ – to visit)
  ‘o’ – visit the current bookmark in another window, keeping the bookmark list open
  ‘C-o’ – switch to the current bookmark in another window
  ‘r’ – rename the current bookmark
  ‘x’ – to delete bookmark or with 'd' to mark various entries before deletion with x

  Sila rujuk ke =Ivy= untuk funksi /ivy-bookmark-goto/ kekunci =bm=. Cara
  diambil dari [[http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html][Blog Binchen]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bookmark
    :ensure t
    :init
    (setq bookmark-default-file (concat ybk/emacs-cache "bookmarks") ;bookmarks dir
          bookmark-save-flag 1) ;auto save when chnage else use "t" to autosave when emacs quits
    :bind (:map ybk/move-map
                ("r" . bookmark-set)
                ("j" . bookmark-jump)
                ("l" . bookmark-bmenu-list))
    :config
    ;; bookmark+ harus di download di GitHub dan pasang di load-path
    ;; http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html
    (defun ivy-bookmark-goto ()
      "Open ANY bookmark"
      (interactive)
      (let (bookmarks filename)
        ;; load bookmarks
        (unless (featurep 'bookmark)
          (require 'bookmark))
        (bookmark-maybe-load-default-file)
        (setq bookmarks (and (boundp 'bookmark-alist) bookmark-alist))

        ;; do the real thing
        (ivy-read "bookmarks:"
                  (delq nil (mapcar (lambda (bookmark)
                                      (let (key)
                                        ;; build key which will be displayed
                                        (cond
                                         ((and (assoc 'filename bookmark) (cdr (assoc 'filename bookmark)))
                                          (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'filename bookmark)))))
                                         ((and (assoc 'location bookmark) (cdr (assoc 'location bookmark)))
                                          ;; bmkp-jump-w3m is from bookmark+
                                          (unless (featurep 'bookmark+)
                                            (require 'bookmark+))
                                          (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'location bookmark)))))
                                         (t
                                          (setq key (car bookmark))))
                                        ;; re-shape the data so full bookmark be passed to ivy-read:action
                                        (cons key bookmark)))
                                    bookmarks))
                  :action (lambda (bookmark)
                            (bookmark-jump bookmark)))
        ))


    ;; Last visited bookmark on top
    (defadvice bookmark-jump (after bookmark-jump activate)
      (let ((latest (bookmark-get-bookmark bookmark)))
        (setq bookmark-alist (delq latest bookmark-alist))
        (add-to-list 'bookmark-alist latest)))
    )

#+END_SRC
** Mark with bm
Cara lain untuk pakai bookmark diambil dari [[https://github.com/joodland/bm][GitHub]]. Bolah tandah dibarisan dengan =C-f4=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bm
    :ensure t
    :demand t

    :init
    ;; where to store persistant files
    (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; restore on load (even before you require bm)
    (setq bm-restore-repository-on-load t)

    :config
    ;; Allow cross-buffer 'next'
    (setq bm-cycle-all-buffers t)

    ;; ;; where to store persistant files
    ;; (setq bm-repository-file "~/.emacs.d/bm-repository")

    ;; save bookmarks
    (setq-default bm-buffer-persistence t)

    ;; Loading the repository from file when on start up.
    (add-hook' after-init-hook 'bm-repository-load)

    ;; Restoring bookmarks when on file find.
    (add-hook 'find-file-hooks 'bm-buffer-restore)

    ;; Saving bookmarks
    (add-hook 'kill-buffer-hook #'bm-buffer-save)

    ;; Saving the repository to file when on exit.
    ;; kill-buffer-hook is not called when Emacs is killed, so we
    ;; must save all bookmarks first.
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save)))

    ;; The `after-save-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state.
    (add-hook 'after-save-hook #'bm-buffer-save)

    ;; Restoring bookmarks
    (add-hook 'find-file-hooks   #'bm-buffer-restore)
    (add-hook 'after-revert-hook #'bm-buffer-restore)

    ;; The `after-revert-hook' is not necessary to use to achieve persistence,
    ;; but it makes the bookmark data in repository more in sync with the file
    ;; state. This hook might cause trouble when using packages
    ;; that automatically reverts the buffer (like vc after a check-in).
    ;; This can easily be avoided if the package provides a hook that is
    ;; called before the buffer is reverted (like `vc-before-checkin-hook').
    ;; Then new bookmarks can be saved before the buffer is reverted.
    ;; Make sure bookmarks is saved before check-in (and revert-buffer)
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)


    ;; :bind (("<f4>" . bm-next)
    ;;        ("S-<f4>" . bm-previous)
    ;;        ("C-<f4>" . bm-toggle))
    )
#+END_SRC

* Projectile
Utk masukkan projek ke [[http://projectile.readthedocs.io/en/latest/][Projectile]], buka projek fail dan hidupkan =projectile-mode=
di buffer tersebut. Untuk menggunakan =Projectile= di projek directory, gunakan komman
=M-x projectile-discover-projects-in-directory= atau kekunci =C-c M-p D=

Utk letakkan folder sebagai projek sekirannya tidak di git, buat fail kosong dan namakan =.projectile=

Aktivkan =Ivy= dengan =Projectile=.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer 1
    :bind (:map ybk/prog-map
                ;; find project
                ("p" . counsel-switch-project) ;boleh tukar project walaupun tidak di projectile buffer
                ;; project hydra
                ("P" . hydra-projectile/body))
    :init
    (setq projectile-cache-file (concat ybk/emacs-cache "projectile.cache"))
    (setq projectile-known-projects-file (concat ybk/emacs-cache "projectile-bookmarks.eld"))

    ;; Projectile hydra
    ;; https://github.com/abo-abo/hydra/wiki/Projectile
    (defhydra hydra-projectile-other-window (:color teal)
      "projectile-other-window"
      ("f"  projectile-find-file-other-window        "file")
      ("g"  projectile-find-file-dwim-other-window   "file dwim")
      ("d"  projectile-find-dir-other-window         "dir")
      ("b"  projectile-switch-to-buffer-other-window "buffer")
      ("q"  nil                                      "cancel" :color blue))

    (defhydra hydra-projectile (:color teal
                                       :hint nil)
      "
         PROJECTILE: %(projectile-project-root)

         Find File            Search/Tags          Buffers                Cache
    ------------------------------------------------------------------------------------------
      _f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
      _m_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
      _j_: file curr dir   _o_: multi-occur       _k_: Kill all buffers  _X_: cleanup non-existing
      _r_: recent file                                               ^^^^_z_: cache current
      _d_: dir

    "
      ("a"   projectile-ag)
      ("b"   projectile-switch-to-buffer)
      ("c"   projectile-invalidate-cache)
      ("d"   projectile-find-dir)
      ("f"   projectile-find-file)
      ("m"   projectile-find-file-dwim)
      ("j"   projectile-find-file-in-directory)
      ("g"   ggtags-update-tags)
      ("i"   projectile-ibuffer)
      ("k"   projectile-kill-buffers)
      ("o"   projectile-multi-occur)
      ("p|s" projectile-switch-project "switch project")
      ("s"   projectile-switch-project)
      ("p"   counsel-switch-project)
      ("r"   projectile-recentf)
      ("x"   projectile-remove-known-project)
      ("X"   projectile-cleanup-known-projects)
      ("z"   projectile-cache-current-file)
      ("w"   hydra-projectile-other-window/body "other window")
      ("q"   nil "cancel" :color blue))

    ;; ;; Simple Hydra projectile
    ;; (defhydra hydra-projectile (:color teal
    ;;                                    :columns 4)
    ;;   "PROJECTILE"
    ;;   ("f"   projectile-find-file                "Find File")
    ;;   ("r"   projectile-recentf                  "Recent Files")
    ;;   ("z"   projectile-cache-current-file       "Cache Current File")
    ;;   ("x"   projectile-remove-known-project     "Remove Known Project")

    ;;   ("d"   projectile-find-dir                 "Find Directory")
    ;;   ("b"   projectile-switch-to-buffer         "Switch to Buffer")
    ;;   ("c"   projectile-invalidate-cache         "Clear Cache")
    ;;   ("X"   projectile-cleanup-known-projects   "Cleanup Known Projects")

    ;;   ("o"   projectile-multi-occur              "Multi Occur")
    ;;   ("s"   projectile-switch-project           "Switch Project")
    ;;   ("k"   projectile-kill-buffers             "Kill Buffers")
    ;;   ("q"   nil "Cancel" :color blue))


    :config
    ;;hidupkan projectile
    (projectile-mode t)

    ;;integrerer ivy i projectile
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode 1))

    (setq projectile-completion-system 'ivy)

    ;; Don't consider my home dir as a project
    (add-to-list 'projectile-ignored-projects `,(concat (getenv "HOME") "/"))

    ;; catch projects
    (setq projectile-enable-caching t)

    ;; ;; utk git
    ;; (def-projectile-commander-method ?F
    ;;   "Git fetch."
    ;;   (magit-status)
    ;;   (call-interactively #'magit-fetch-current))

    ;; Berbeza dengan 'projectile-switch-project' sebab fungsi ini boleh dipakai
    ;; walaupun tidak di projectile buffer.
    (defun counsel-switch-project ()
      (interactive)
      (ivy-read "Switch to project: "
                projectile-known-projects
                :sort t
                :require-match t
                :preselect (when (projectile-project-p) (abbreviate-file-name (projectile-project-root)))
                :action '(1
                          ("o" projectile-switch-project-by-name "goto")
                          ("g" magit-status "magit")
                          ("s" (lambda (a) (setq default-directory a) (counsel-git-grep)) "git grep"))
                :caller 'counsel-switch-project))
    (bind-key* "C-c p p" 'counsel-switch-project)

    :diminish (projectile-mode . " "))

#+END_SRC

* PDF-Tools
PDF Tools dipakai utk menggantikan =DocView= yang sedia ada di Emacs utk fail-fail
PDF. PDF-Tools juga berfungsi utk membuat nota di fail PDF. Sila rujuk [[https://github.com/politza/pdf-tools][PDF-Tools]].

Bila bermasalah untuk pasang PDF-tool boleh dapatkan bantuan di [[http://google-ebook.com/blog/2016/01/13/pdf-tools-in-emacs/][ebook]]. Antaranya ialah:
- Pasang =pdf-tools= melalui =M-x package-list-packages=
- Pasang pakej-pakej lain melalui terminal
  #+BEGIN_EXAMPLE
   $ sudo apt install libpng-dev libz-dev libpoppler-glib-dev libpoppler-private-dev
  #+END_EXAMPLE
- Kemudian kalau tidak tersedia dipasang boleh larikan =M-x pdf-tools-install= di mini buffer

Pakai kekunci =C-c C-a= utk compile kemudian pakai =C-c C-v= utk View. Bila ke pdf-file
tekan =g= utk refresh pertukaran.

** Aturcara
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t
    :if (eq system-type 'gnu/linux)
    :config
    ;; Use C-RET in latex mode to jump to location in pdf file
    (setq pdf-sync-forward-display-pdf-key "<C-return>")
    ;; The t says to install the server without asking me
    (pdf-tools-install t)
    ;; Show full pages by default instead of fitting page width:
    (setq-default pdf-view-display-size 'fit-page)
    ;; Use pdf-tools to display pdfs from latex runs:
    (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
    (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
    )
#+END_SRC
** Auto-revert
=Auto-revert-mode= untuk auto update di =doc-view-mode= sebarang
pertukaran di file LaTeX dengan menekan =C-c C-c=. Boleh baca di
[[http://www.r-bloggers.com/using-doc-view-with-auto-revert-to-view-latex-pdf-output-in-emacs/][doc-view]]
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'doc-view-mode-hook #'auto-revert-mode) ;tidak berjaya di pdf-tools

  (defun th/pdf-view-revert-buffer-maybe (file)
    (let ((buf (find-buffer-visiting file)))
      (when buf
        (with-current-buffer buf
          (when (derived-mode-p 'pdf-view-mode)
            (pdf-view-revert-buffer nil t))))))
  (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
            #'th/pdf-view-revert-buffer-maybe)
#+END_SRC

** Useful key bindings

|--------------------------------+-----------------------------|
| Key Binding                    | Description                 |
|--------------------------------+-----------------------------|
| n                              | Next page                   |
| p                              | Previous page               |
| SPC                            | Scroll up                   |
| S-SPC                          | Scroll down                 |
| C-n                            | Next line/page              |
| C-p                            | Previous line/page          |
|--------------------------------+-----------------------------|
| <goto-line binding>            | Go to page                  |
|--------------------------------+-----------------------------|
| + / =                          | Enlarge view                |
| -                              | Shrink view                 |
| 0                              | Reset view                  |
| W                              | Fit page width              |
| H                              | Fit page height             |
| P                              | Fit page                    |
| s m <drag mouse to select box> | PDF zooms to that selection |
| s r                            | Resets the above view slice |
|--------------------------------+-----------------------------|
| M-s w                          | isearch-forward-word        |
| M-s o                          | pdf-isearch-occur           |
|--------------------------------+-----------------------------|
| m                              | bookmark-set                |
|                                | (jump to bookmark using     |
|                                | C-x r b)                    |
|--------------------------------+-----------------------------|
| View in Printed mode           | C-c C-r p                   |
| View in Midnight mode          | C-c C-r m                   |
|--------------------------------+-----------------------------|

** Interleave
Untuk memasukkan nota dan komet di fail PDF.
Diambil dari https://github.com/rudolfochrist/interleave
NB! Fungsi dimatikan kerana fungsi yang sama terdapat di ~PDF-Tools~ melalui menu di F10
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package interleave
    ;; :load-path "elisp/interleave"
    :init
    (progn
      (with-eval-after-load 'doc-view
        (bind-key "i" #'interleave--open-notes-file-for-pdf doc-view-mode-map))
      (with-eval-after-load 'pdf-view
        (bind-key "i" #'interleave--open-notes-file-for-pdf pdf-view-mode-map)))
    :commands (interleave interleave--open-notes-file-for-pdf))

  (with-eval-after-load 'doc-view
    ;; In continuous mode, reaching the page edge advances to the next/prev page
    (setq doc-view-continuous t))
#+END_SRC

*Cara guna*

Create a Org file that will keep your notes. In the Org header section (#+TITLE, #+AUTHOR, etc.) add

#+BEGIN_EXAMPLE
    #+INTERLEAVE_PDF: /the/path/to/pdf.pdf
#+END_EXAMPLE

Then you can start interleave by typing =M-x interleave= and this will:

1. Display the PDF side by side to the org buffer for your notes. You
   can navigate the PDF as usual with 'n' and 'p'. Changing the page of
   the PDF will also narrow to the notes that are meant for this particular PDF page.
2. If you want to add some notes to the current page you can type
   'i'. This will create a new headline for your notes. If some notes
   are already present, 'i' will switchover to the other buffer.
3. Typing 'q' in the DocView will quite interl

* Quick-preview

Utk =quick-preview= sebarang fail menggunakan external tool seperti GNOME Sushi, Gloobus preview atau Quick Look.
#+BEGIN_SRC emacs-lisp
  (use-package quick-preview
    :ensure t
    :defer t
    :bind ("C-c q" . quick-preview-at-point)
    :config
    (define-key dired-mode-map (kbd "Q") 'quick-preview-at-point))
#+END_SRC
* Graphics
** PlantUML
Major mode untuk edit [[http://plantuml.com/][PlantUML]]. Untuk memastikan plantuml befungsi, pastikan =java=
dan =graphviz= dipasang

#+BEGIN_EXAMPLE
  $ sudo apt-get update
  $ sudo apt-get install graphviz
  $ sudo apt-get install default-jre
#+END_EXAMPLE

| kekunci         | Fungsi                           |
|-----------------+----------------------------------|
| C-c C-c         | Plantuml-preview                 |
| C-u C-c C-c     | Plantuml-preview in other window |
| C-u C-u C-c C-c | Plantuml-preview in other frame  |
| C-c u           | Plantuml-complete-symbol         |

Untuk prosess pakai command line

#+BEGIN_EXAMPLE
java -jar plantuml.jar -png yourfile.txt
java -jar plantuml.jar -pdf yourfile.txt
#+END_EXAMPLE

Untuk membolehkan fail diproses ke format =pdf= harus pasang fail-fail berikut dan
simpan di folder yang sama dengan =plantuml.jar=. Sila rujuk [[http://plantuml.com/pdf][PlantUML PDF]]

#+BEGIN_EXAMPLE
avalon-framework-4.2.0.jar
batik-all-1.7.jar
commons-io-1.3.1.jar
commons-logging-1.0.4.jar
fop.jar
xml-apis-ext-1.3.04.jar
xmlgraphics-commons-1.4.jar
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :defer t
    :commands plantuml-mode
    :mode (("\\.puml$" . plantuml-mode)
           ("\\.plantuml$" . plantuml-mode)
           ("\\.uml$" . plantuml-mode))
    :init
    (setq plantuml-jar-path "~/Dropbox/softwares/plantuml.jar")

    :config
    (progn
      ;;Integration with org-mode
      (add-to-list
       'org-src-lang-modes '("plantuml" . plantuml))
      ;;autocomplete
      (bind-key "C-c u" #'plantuml-complete-symbol)))
#+END_SRC
** DOT dan Graphviz
Cara untuk guna =DOT= boleh dibaca di [[http://tonyballantyne.com/graphs.html][sini]] dan untuk =GraphViz= di [[http://graphs.grevian.org/example][sini]]. Untuk pakai
di =Org-mode= harus aktifkan =DOT= di =org-babel=. *GraphVis* mesti dipasang sebelum
memakai DOT seperti di =PlantUML= di atas.

Contoh untuk memakai di org-mode

#+BEGIN_EXAMPLE
  ,#+begin_src dot :file ./img/example1.png :cmdline -Kdot -Tpng
  graph graphname {
                  a -- b;
                  b -- c;
                  b -- d;
                  d -- a;
          }
  ,#+end_src
#+END_EXAMPLE
** TikZ
TikZ digunakan terutama sebab ia amat robus. TikZ boleh di baca di [[https://en.wikibooks.org/wiki/LaTeX/PGF/TikZ][Wikibook]]. Untuk
membolehkan menukarkan fail PDF yang dihasilkan bila memakai TikZ, program
[[https://www.imagemagick.org/script/index.php][ImageMagick]] harus dipasang dan paling mudah ialah menggunakan Synaptic.

* Org
** Maklumat
Rujukkan utk aturcara org-mode diambil dari [[http://doc.norang.ca/org-mode.html#Setup][Bernt Hansen]] dan [[https://github.com/jabranham/emacs/blob/master/emacs.org][Jabraham]]. Utk asas sila rujuk [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][Aaron Bieber]]

Fail-fail yang ditetapkan di folder =org-agenda-fail= perlu dibuat sendiri
terlebih dahulu sebelum memakai fungsi =C-c c=.

** Rujukkan kekunci
Pasang dan kemaskini aturcara org-mode.
+ =C-c C-t= org-todo dan tukar TODO states.
+ =S-left/right= cycle workflow
+ =C-c C-v= show todos in current document
+ =C-c / t= (org-show-todo-tree)
+ =C-c a t= (org-todo-list) tujukkan semua TODO list yang belum DONE di semua fail-fail agenda
+ =C-c a a= to get agenda entry
+ =C-c C-c= add tag
+ =C-c t c= Buka pop agenda di current window
+ =qq=      TODO shortcut
+ =C-c t a=   Agenda sendiri

Bila di =Agenda list=, kekunci ini boleh di
+ =TAB= : Tunjukkan dimana asal Org-file untuk item tertentu di agenda. Mudah utk mengedit
+ =S-kiri/kanan= : Tukarkan masa atau tarikh item at point kedepan atau kebelakang
+ =,=   : Letakkan priority cth A, B atau C
+ =+/-= : Tingkatakan atau kurangkan priority
+ =t=   : Tukar status mengikut =org-todo-keywords=
+ =s=   : Save semua Org-buffers yang menyumbangkan data di agenda
+ =g=   : Mengemaskinikan agenda selepas menukarkan tarikh atau status kerja

Untuk =Refile= gunakan =C-c C-w= dan =IDO mode=. Tetapi sudah disingakatkan dengan hanya =r=
bila di fail ~agenda~. Contohnya utk refile task "nonton" ke-file 'privat' bawah tajuk
'hari ahad', letakkan curson di task "nonton" kemudian =C-c C-w= dan taip 'pri' dan
=S-SPC= dan 'hari' kemudan =RET=.

OBS!!
Untuk tunjukkan semua TODO di current buffer yang tidak termasuk di
=org-agenda-files= guna =org-show-todo-tree= dan kekuncinya ialah =C-c / t=

Untuk tangguh tarikh ke esok letakkan =.+1d=
#+BEGIN_EXAMPLE
SCHEDULED: <2012-08-17 Fri .+1d>
#+END_EXAMPLE

** Org-settings
*** org-mode
Aktifkan org-mode, auto-mode dan org-direktori. Sekiranya org-directory belum ada
sila sediakan.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :mode (("\\.txt$" . org-mode)
           ("\\.org$" . org-mode))
    :config
    (setq org-directory "~/Dropbox/org/")

    ;; use syntax highlighting in org-file code blocks dan guna org code block
    ;; seperti guna di major-mode kode blok tersebut
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t) ; utk completion di src blocks

    ;;== Render subscripts and superscripts in org buffers
    (setq org-pretty-entities-include-sub-superscripts t)

    ;; Allow _ and ^ characters to sub/super-script strings but only when
    ;; string is wrapped in braces
    (setq org-use-sub-superscripts '{}) ; in-buffer rendering
    (setq org-export-with-sub-superscripts nil)

    ;; Number of empty lines needed to keep an empty line between collapsed trees.
    ;; If you leave an empty line between the end of a subtree and the following
    ;; headline, this empty line is hidden when the subtree is folded.
    ;; Org-mode will leave (exactly) one empty line visible if the number of
    ;; empty lines is equal or larger to the number given in this variable.
    (setq org-cycle-separator-lines 2) ; default = 2

    ;; Prevent renumbering/sorting footnotes when a footnote is added/removed.
    ;; Doing so would create a big diff in an org file containing lot of
    ;; footnotes even if only one footnote was added/removed.
    (setq org-footnote-auto-adjust t) ; `'sort' - only sort
                                          ; `'renumber' - only renumber
                                          ; `t' - sort and renumber
                                          ; `nil' - do nothing (default)

    ;; Make firefox the default web browser for applications like viewing
    ;; an html file exported from org ( C-c C-e h o )
    (when (executable-find "firefox")
      (add-to-list 'org-file-apps '("\\.x?html\\'" . "firefox %s")))

    ;; Do NOT try to auto-evaluate entered text as formula when I begin a field's
    ;; content with "=" e.g. |=123=|. More often than not, I use the "=" to
    ;; simply format that field text as verbatim. As now the below variable is
    ;; set to nil, formula will not be automatically evaluated when hitting TAB.
    ;; But you can still using ‘C-c =’ to evaluate it manually when needed.
    (setq org-table-formula-evaluate-inline nil) ; default = t

    ;; default with images open
    (setq org-startup-with-inline-images "inlineimages")

    ;; Prevent from editing things you can't seen
    (setq org-catch-invisible-edits 'error)

    ;; make words italic or bold, hide / and *
    (setq org-hide-emphasis-markers nil)

    ;; Masukkan image automatik ke file org
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images))


  ;; (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
#+END_SRC
*** Toggle display
Untuk tunjukkan sumber link atau kode tersembunyi boleh gunakan =font-lock-mode=
diaktivkan atau matikan. Cara lain ialah dengan menggunakan fungsi ini yang diambil
dari [[https://emacs.stackexchange.com/questions/5387/show-org-mode-hyperlink-as-plain-text][StackExchange]]

#+BEGIN_SRC emacs-lisp
  (defun org-toggle-link-display ()
    "Toggle the literal or descriptive display of links."
    (interactive)
    (if org-descriptive-links
        (progn (org-remove-from-invisibility-spec '(org-link))
               (org-restart-font-lock)
               (setq org-descriptive-links nil))
      (progn (add-to-invisibility-spec '(org-link))
             (org-restart-font-lock)
             (setq org-descriptive-links t))))
#+END_SRC

*** Link
Simpan link dengan =C-c l= kemudian letakkan link ke tempat tertentu dengan =C-c C-l=.
Untuk mengikuti atau buka link tersebut pakai =C-c C-o=. Utk kembali ke asal =C-c &=

Link guna ivy rujuk di heading [[*Worf][Worf]]

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c l" #'org-store-link)

  ;; utk memudahkan pindah ke link sebelum atau selepas
  (add-hook 'org-load-hook
            (lambda ()
              (define-key org-mode-map "\C-n" 'org-next-link)
              (define-key org-mode-map "\C-p" 'org-previous-link)))
#+END_SRC
*** indent
#+BEGIN_SRC emacs-lisp
  ;;== Indent bila mula
  (setq org-startup-indented t)
#+END_SRC
*** Blank line
#+BEGIN_SRC emacs-lisp
  ;;== Prevent auto insertion of blank lines before headings and list items
  (setq org-blank-before-new-entry '((heading)
                                     (plain-list-item)))
#+END_SRC
*** Current window
#+BEGIN_SRC emacs-lisp
  ;; Use the current window for indirect buffer display
  (setq org-indirect-buffer-display 'current-window)

  ;; Source editing in current window
  (setq org-src-window-setup 'current-window)
#+END_SRC

Tunjukkan kandungan sebagai ~sparse tree~ cth TODO, SCHEDULE, DEADLINE dll. Asal key
=C-c /= di org.el. Dipakai di kekunci F10.

#+BEGIN_SRC emacs-lisp :tangle no
  (bind-key "s" #'org-sparse-tree 'ybk/org-map)
#+END_SRC

*** Navigate headings
Bind =F10-h-b= and =F10-h-d= to navigate heading more easily (these are bound to =C-c C-p/n=
by default):
#+BEGIN_SRC emacs-lisp :tangle no
  (bind-keys :map ybk/org-map
             ("<up>" . org-previous-visible-heading) ;belakang
             ("<down>" . org-next-visible-heading)) ;depan
#+END_SRC

** Worf
[[https://github.com/abo-abo/worf][Worf]] ialah minor mode utk mempercepatkan process contohnya seperti penggunaan fungsi
=<s Enter= dll. di org-mode. Juga utk melihat list tajuk2 di dalam dokument Aturcara
utk 'Headings' diambil dari [[http://stackoverflow.com/questions/28030946/emacs-org-mode-search-only-headers][Stackoverflow]]. Rujukan utk =Ivy= dan =wolf= di [[http://pragmaticemacs.com/emacs/insert-internal-org-mode-links-the-ivy-way/][sini]]. Banyak fungsi =worf= yang perlu di pelajari

#+BEGIN_SRC emacs-lisp
  (use-package worf
    :init
    (use-package ivy
      :ensure t)
    :ensure t
    :bind (:map ybk/move-map
                ("h" . worf-goto))
    :config

    ;; use ivy to insert a link to a heading in the current document
    ;; based on `worf-goto`
    (defun ybk/worf-insert-internal-link ()
      "Use ivy to insert a link to a heading in the current `org-mode' document. Code is based on `worf-goto'."
      (interactive)
      (let ((cands (worf--goto-candidates)))
        (ivy-read "Heading: " cands
                  :action 'ybk/worf-insert-internal-link-action)))


    (defun ybk/worf-insert-internal-link-action (x)
      "Insert link for `ybk/worf-insert-internal-link'"
      ;; go to heading
      (save-excursion
        (goto-char (cdr x))
        ;; store link
        (call-interactively 'org-store-link)
        )
      ;; return to original point and insert link
      (org-insert-last-stored-link 1)
      ;; org-insert-last-stored-link adds a newline so delete this
      (delete-char 1)))
#+END_SRC
** Calendar
*** Calendar settings
Not technically part of org, but I'll stick the calendar config here since I mainly use it along with org-agenda (config'ed below)
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    ;; built-in, :ensure t not necessary
    :config
    ;; Norwegian-holiday - bør legge mer etterhvert
    (setq norsk-ferier
          '((holiday-fixed 5 17 "Nasjonaldag")))


    (setq calendar-set-date-style 'european) ; alternativ 'iso
    (setq calendar-mark-holidays-flag t)
    (setq calendar-week-start-day 1) ; uker begynner på mandag
    (setq calendar-date-display-form calendar-iso-date-display-form)

    ;; Holiday
    (setq calendar-holidays (append
                             norsk-ferier
                             holiday-islamic-holidays
                             holiday-christian-holidays))
    )
#+END_SRC
*** Google calendar sync
Dapatkan Google kalender ke org-agenda. Cara ini boleh di baca di [[https://github.com/myuhe/org-gcal.el][org-gcal]] atau di [[http://cestlaz.github.io/posts/using-emacs-26-gcal/#.WmJ80N_ODSf][sini]].
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-gcal
    :ensure t
    :bind (:map ybk/misc-map
                ("f" . org-gcal-fetch)
                ("a" . org-gcal-sync)
                ("c" . org-gcal-refresh-token))
    :config
    ;; aturcara persendirian
    (setq gcal-dir "~/Dropbox/org")
    (let ((ybkcal-file (concat gcal-dir "ybkcal.el")))
      (when (file-exists-p ybkcal-file)
        (load-file ybkcal-file)))

    ;; hook utk sync agenda dengan google
    (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
    (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
    )

#+END_SRC

** Nice bulleted lists
Mencatikkan *bullet* di Org-mode
#+begin_src emacs-lisp
  ;; Sembunyi leading star
  (setq org-hide-leading-stars  t)

  (use-package org-bullets
    :ensure t
    :config
    ;; make available "org-bullet-face" such that I can control the font size individually
    (setq org-bullets-face-name (quote org-bullet-face))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("◎""◉""▶""○""⚫""⚪""◯"))
    ;; org ellipsis options, other than the default Go to Node...
    ;; not supported in common font, but supported in Symbola (my fall-back font) ⬎, ⤷, ⤵
    ;; (setq org-ellipsis " ⤵") ;; ⤵ ≫
    )
  ;; (add-hook 'org-mode-hook (lambda ()
  ;;                            (org-bullets-mode 1))))
#+end_src

** Code blocks (org-babel)
#+BEGIN_SRC emacs-lisp
  ;; Load languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (C . t)
     (python . t)
     (dot . t)
     (ditaa . t)
     (sh . t)
     (org . t)
     (plantuml . t)
     (latex . t)
     ))
#+END_SRC
** Diagrams
*** Ditaa
#+BEGIN_SRC emacs-lisp
  (setq my-diagram-dir "~/Dropbox/softwares/")

  (setq org-ditaa-jar-path (expand-file-name "ditaa.jar" my-diagram-dir))
  (setq org-plantuml-jar-path (expand-file-name "plantuml.jar" my-diagram-dir))
#+END_SRC
*** TikZ
**** PDF
Untuk membolehkan preview image Tikz di org-mode diambil dari [[http://bnbeckwith.com/blog/org-mode-tikz-previews-on-windows.html][sini]]. Pakai kekuci =C-c
C-x C-l= untuk preview di source code dan =C-c C-c= kembali ke source teks.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist
               '("" "tikz" t))

  (eval-after-load "preview"
    '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))

  (setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC

Contoh utk pakai di org-mode. Pastikan =:results raw= supaya code hanya dikopi ke TeX
dan tidak dilarikan.

#+BEGIN_EXAMPLE
  ,#+begin_src latex :file fsa.pdf :packages '(("" "tikz")) :border 1em :results raw
    % Define block styles
    \usetikzlibrary{shapes,arrows}
    \tikzstyle{astate} = [circle, draw, text centered, font=\footnotesize, fill=blue!25]
    \tikzstyle{rstate} = [circle, draw, text centered, font=\footnotesize, fill=red!25]

    \begin{tikzpicture}[->,>=stealth', shorten >=1pt, auto, node distance=2.8cm, semithick]
      \node [astate] (1) at (0,0) {1};
      \node [astate] (2) at (1,0) {2};
      \node [rstate] (3) at (2,0) {3};
      \path (1) edge [bend left] node {b} (2)
            (2) edge node {b} (3)
            (2) edge [bend left] node {a} (1)
            (3) edge [loop above] node {(a, b)} (3);
    \end{tikzpicture}
  ,#+end_src
  ,#+CAPTION: tikz caption
  ,#+LABEL: fig:tikz
  ,#+RESULTS:
  [[file:fsa.pdf]]
#+END_EXAMPLE

**** HTML
Untuk menghasilkan TikZ object sebagi svg untuk dimasukkan di HTML dokumen, guna
premable seperti ini. Dirujuk dari [[http://www.homepages.ucl.ac.uk/~ucahjde/blog/tikz.html][sini]]. ImageMagick dipakai utk menukarkan PDF ke SVG.

#+BEGIN_EXAMPLE
  ,#+HEADER: :file ../img/contoh.svg :imagemagick yes
  ,#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
  ,#+HEADER: :fit yes :imoutoptions -geometry 400 :iminoptions -density 600
  ,#+BEGIN_src latex
  \begin{tikzpicture}
  \draw[->] (-3,0) -- (-2,0) arc[radius=0.5cm,start angle=-180,end angle=0] (-1,0) -- (1,0) arc[radius=0.5cm,start angle=180,end angle=0] (2,0) -- (3,0);
  \filldraw (-1.5,0) circle[radius=1mm];
  \filldraw (1.5,0) circle[radius=1mm];
  \end{tikzpicture}
  ,#+END_src
#+END_EXAMPLE

Larikan source-code dengan =C-c C-c= untuk menghasilkan =contoh.svg=, kemudian masukkan hasilan tersebut difail HTML dengan begini:

#+BEGIN_EXAMPLE
[[../img/contoh.svg]]
#+END_EXAMPLE

Tiga baris pertama yang menggandunggi =HEADER= berfungsi utk:

 1. Header pertama menetapkan dimana fail ingin disimpan dan bagimana fail harus
    di-compile mengganggu ImageMagick. Folder =img= harus disediakan sekiranya tidak
    sedia ada.
 2. Header kedua mengarahkan utk tidak memasukkan results langsung ke fail sebab
    hasil pertama ialah LaTeX. Oleh itu perlu tetapkan secara manual seperti di atas.
 3. Header ketiga menetapkan berapa besar dan jelas image diingini menggunakan fungsi dari ImageMagick

** Exporting
*** markdown
HTML and latex shown by default, let's add markdown:

#+BEGIN_SRC emacs-lisp
  (use-package ox-md)
#+END_SRC
*** LaTeX
Shortcut latex-to-pdf-open dan latex-save-pdf di ambil di [[https://stackoverflow.com/questions/18291114/emacs-org-mode-how-to-automatically-process-to-pdf-on-save][sini]]

#+BEGIN_SRC emacs-lisp
  (defun org-export-pdf-open ()
    (interactive)
    (save-buffer)
    (org-open-file (org-latex-export-to-pdf)))

  (add-hook
   'org-mode-hook
   (lambda()
     (define-key org-mode-map
       (kbd "<f5> x") 'org-export-pdf-open)))
#+END_SRC

Proses ke PDF bila save
#+BEGIN_SRC emacs-lisp
  (defun org-save-as-pdf ()
    (interactive)
    (save-buffer)
    (org-latex-export-to-pdf))

  (add-hook
   'org-mode-hook
   (lambda()
     (define-key org-mode-map
       (kbd "<f5> z") 'org-save-as-pdf)))
#+END_SRC

*** others
This makes org export smart quotes so that it uses ~``word``~ style quotes for
latex export:

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

This lets me override all the export variables with a =#+BIND:= statement at the
beginning of org-mode files for export:

#+BEGIN_SRC emacs-lisp
  (setq org-export-allow-bind-keywords t)
#+END_SRC

** Eksport setiap top-level subtree ke fail berasingan
Pilih backend kemudian boleh eksport setiap top-level substree ke fail
berasingan. Cara ini diambil dari [[http://emacs.stackexchange.com/questions/2259/how-to-export-top-level-headings-of-org-mode-buffer-to-separate-files][Emacs.Stackexchange]]

Sebagai contoh
#+BEGIN_EXAMPLE
  * Header 1
  :PROPERTIES:
  :CUSTOM_ID: rapport
  :END:

  Bla.. bla.. bla..

  ** Sub-heading
  Bla.. bla.. bla..

  * Header 2
  :PROPERTIES:
  :CUSTOM_ID: beamer
  :END:

  Bla.. bla.. bla..
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (defun org-export-all (backend)
    "Export all subtrees that are *not* tagged with :noexport: to
  separate files.

  Note that subtrees must have the :EXPORT_FILE_NAME: property set
  to a unique value for this to work properly."
    (interactive "sEnter backend: ")
    (let ((fn (cond ((equal backend "html") 'org-html-export-to-html)
                    ((equal backend "latex") 'org-latex-export-to-latex)
                    ((equal backend "pdf") 'org-latex-export-to-pdf)
                    ((equal backend "Rnw") 'org-latex-export-to-Rnw))))
      (org-map-entries (lambda () (funcall fn nil t)) "-noexport")))

  ;; :EXPORT_FILE_NAME: dihasilkan dari :CUSTOM_ID:
  (defadvice org-set-property (after set-export-file-name
                                     (property value) activate compile)
    (when (equal org-last-set-property "CUSTOM_ID")
      (let ((export-file-name
             (concat (org-entry-get nil "CUSTOM_ID")
                     "-"
                     (replace-regexp-in-string " " "-" (downcase (org-get-heading t t))))))
        (org-entry-put nil "EXPORT_FILE_NAME" export-file-name))))
#+END_SRC
** Ravel dan Ravel auto
To convert to Rnw or Rmd. The ox-ravel.org file should be tangle =M-x
org-babel-tangle=

Cara guna:
- Rujuk ke [[ESS and R]]
- =C-c C-e l r= utk buat fail .Rnw
- Buka fail .Rnw dan tekan =kk= utk buat fail .tex
- Buka fail .tex dan tekan =C-c C-c= utk buat PDF atau lihat fail PDF

Cara lain: [[https://github.com/chasberry/orgmode-accessories/issues/2][Chasberry]]
- =C-c c-e l r= utk buat fail .Rnw atau =C-c C-e C-s l r= utk subtree export.
- Untuk revise tekan =C-u C-c C-e= yg akan melarikan arahan yg sama
- Masukkan babbel block di fail org atau subtree yg ingin dieksport
#+BEGIN_EXAMPLE
  #+NAME: knit-was
  #+BEGIN_SRC R :exports none :results file :file lineage/lineage.kout
    suppressPackageStartupMessages(require(knitr))
    knit2pdf("lineage/lineage.Rnw",output="lineage/lineage.tex")
  #+END_SRC
#+END_EXAMPLE
- Larikan babel block diatas dengan =C-c C-c=
- Kembali ke =session *R*= utk guna knitr, kemaskini src blocks, dan =C-u C-c C-e= utk larikan knitr lagi

  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ox-ravel
      :ensure org
      :load-path "~/Dropbox/lisp/ox-ravel/"
      :config
      ;; Masukkan caption secara automatik
      ;; Utk pakai tambah #+header: :ravel(org-ravel-get-knitr-caption)
      (defun org-ravel-get-knitr-caption (&optional prefix)
        "Find the caption and format as knitr caption. If PREFIX is nil use `fig.cap=' as the prefix of the result."
        (concat (or prefix "fig.cap=") "\""
                (mapconcat
                 'substring-no-properties
                 (org-export-get-caption (org-element-at-point)) "")
                "\""
                ))
      )

  #+END_SRC

** Code block shortcut
Here I define a function ([[https://github.com/vdemeester/emacs-config/blob/master/.emacs.d/emacs.org][thanks!]]) that lets me easily add and edit source blocks in
org mode. Just use =f12-s= or =C-c s=

#+BEGIN_SRC emacs-lisp
  (defun ybk/org-insert-src-block (src-code-type)
    "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
    (interactive
     (let ((src-code-types
            '("emacs-lisp" "python" "sh" "calc" "R" "latex" "org")))
       (list (ivy-completing-read "Source code type: " src-code-types))))
    (progn
      (newline-and-indent)
      (insert "#+END_SRC\n")
      (previous-line 2)
      (insert (format "#+BEGIN_SRC %s\n" src-code-type))
      (org-edit-src-code)))

  (bind-key "s" #'ybk/org-insert-src-block 'ybk/prog-map)
  (bind-key "C-c s" #'ybk/org-insert-src-block org-mode-map)
#+END_SRC

** References (org-ref)
Utk pakai org-ref letak fail =.bib= dan tetapkan =ref style= di penghujung dokument
org. Stail-stail utk rujukan boleh lihat di [[http://sites.stat.psu.edu/~surajit/present/bib.htm][sini]]

Sekiranya tidak terdapat fail =.bib= boleh tulis =bibliography:reference.bib= dan klik
link utk buka fail dan masukkan rujukan-rujukan utk dokument yang dipakai. Untuk masukkan rujukkan di fail ~bib~

- Drag-drop fail ~pdf~ ke fail ~bib~
- Block rujukkan tertentu dari rujukan list di artikkel dan drag ke fail ~bib~ kemudian
  larikan =crossref-add-bibtex-entry= F5-o-c dan kopi rujukkan tersebut
- Boleh kopi dari ~doi~ =doi-ref-bibtex-entry=
- Boleh kopi dari ~ISBN~ =isbh-to-bibtex=
- Drag-drop secara langsung dari URL cth dari ScienceDirect.

Bole lihat di [[https://www.youtube.com/watch?v=2t925KRBbFc][video]]

#+BEGIN_EXAMPLE
  bibliographystyle:nama-style
  bibliography:nama-fail.bib
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :demand t ; make sure this gets loaded since I use it all the time
    :bind*
    (("<f5> i" . org-ref-ivy-insert-cite-link)
     :map bibtex-mode-map
     ;;utk gantikan singkatan nama journal seperti di add-to-journal-list
     ("C-c C-c" . org-ref-clean-bibtex-entry)
     ;; :map ybk/org-map
     ;; ("b c" . crossref-add-bibtex-entry) ;utk kopi dari reference list di artikle
     ;; ("b d" . doi-ref-bibtex-entry) ;kopi dari nombor doi
     ;; ("b i" . isbn-to-bibtex) ;kopi dari isbn
     )
    :init
    ;; Bibtex hydra
    (defhydra hydra-ybk-bibtex (:hint nil)
      "
        ^Bibtex entry from^
        ^--------------------------
        _c_: ref. list  _d_: doi   _i_: isbn   _q_: DONE

        "
      ("c" crossref-add-bibtex-entry) ;utk kopi dari reference list di artikle
      ("d" doi-ref-bibtex-entry) ;kopi dari nombor doi
      ("i" isbn-to-bibtex) ;kopi dari isbn
      ("q" (message "KELUAR") :exit t)
      )

    (bind-key "c" #'hydra-ybk-bibtex/body 'ybk/org-map)

    ;; (setq org-ref-completion-library 'org-ref-helm-bibtex)
    (setq org-ref-completion-library 'org-ref-ivy-cite) ;pakai ivy utk completion

    (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
          org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
          org-ref-pdf-directory  "~/Dropbox/bibliography/bibtex-pdfs")
    ;; (setq org-ref-default-citation-link "autocite")

    :config
    ;; utk masukkan reference list bila eksport ke PDF
    ;; dilarikan beberapa kali utk memastikan cross-references dimasukkan dgn betul

    ;; ;; Default value utk org-latex-pdf-process
    ;; (setq org-latex-pdf-process
    ;;       '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b"
    ;;         "bibtex %b"
    ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b"
    ;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %b"))

    ;;pakai latexmk utk prosess - sama seperti fungsi di atas
    (setq org-latex-to-pdf-process (list "latexmk -pdf %f"))


    (defvar my/notes-template
      "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n")
    (setq org-ref-note-title-format my/notes-template)

    ;; Cleanup nil entries from articles. I wrote this function and got a PR accepted! :-)
    (add-hook 'org-ref-clean-bibtex-entry-hook #'orcb-clean-nil-opinionated t)

    ;; Org-ref-bibtex is a package (contained in org-ref, so no need for
    ;; an =:ensure t=) that helps me manage my bib file(s). I add the
    ;; my/fix-journal-name function to always put in the full name of
    ;; the journal. I also add it to the cleaning hook so that it's
    ;; taken care of for me more or less automatically.
    (defun my/add-to-journal-list (element)
      "Add ELEMENT to `org-ref-bibtex-journal-abbreviations'"
      (push element org-ref-bibtex-journal-abbreviations))

    (mapc #'my/add-to-journal-list
          '(("APSR" "American Political Science Review" "Am Polit Sci Rev")
            ("APSR" "American Political Science Review" "The American Political Science Review")
            ("AJPS" "American Journal of Political Science" "Am Jour Polit Sci")
            ("AJPS" "American Journal of Political Science" "Am J Political Science")
            ("JOP" "Journal of Politics" "The Journal of Politics")
            ("JOP" "Journal of Politics" "J of Pol")
            ("jop" "Journal of Politics" "J of Pol")
            ("EPSR" "European Political Science Review" "Eur. Pol. Sci. Rev.")
            ("JoC" "Journal of Communication" "J Communication")
            ("PoP" "Perspectives on Politics" "Perspect. polit.")))

    (defun my/fix-journal-name (&optional key start end)
      "Replace journal name in a bibtex entry with the full name.
        The strings are defined in
        `org-ref-bibtex-journal-abbreviations'. The optional arguments
        KEY, START and END allow you to use this with
        `bibtex-map-entries'"
      (interactive)
      (bibtex-beginning-of-entry)
      (when
          (string= "article"
                   (downcase
                    (cdr (assoc "=type=" (bibtex-parse-entry)))))
        (let* ((initial-names (mapcar
                               (lambda (row)
                                 (cons  (nth 0 row) (nth 1 row)))
                               org-ref-bibtex-journal-abbreviations))
               (abbrev-names (mapcar
                              (lambda (row)
                                (cons  (nth 2 row) (nth 1 row)))
                              org-ref-bibtex-journal-abbreviations))
               (journal (s-trim (bibtex-autokey-get-field "journal")))
               (bstring (or
                         (cdr (assoc journal initial-names))
                         (cdr (assoc journal abbrev-names)))))
          (when bstring
            (bibtex-set-field "journal" bstring)
            (bibtex-fill-entry)))))

    (add-hook 'org-ref-clean-bibtex-entry-hook #'my/fix-journal-name)

    ;; Make sure that the journal entry is in org-ref-bibtex-journal-abbreviations
    (defun my/org-ref-clean-check-journal ()
      "Check entry at point to see if journal exists in `org-ref-bibtex-journal-abbreviations'. If not, issue a warning."
      (interactive)
      (when
          (string= "article"
                   (downcase
                    (cdr (assoc "=type=" (bibtex-parse-entry)))))
        (save-excursion
          (bibtex-beginning-of-entry)
          (let* ((entry (bibtex-parse-entry t))
                 (journal (reftex-get-bib-field "journal" entry)))
            (when (null journal)
              (error "Unable to get journal for this entry."))
            (unless (member journal (-flatten org-ref-bibtex-journal-abbreviations))
              (message "Journal \"%s\" not found in org-ref-bibtex-journal-abbreviations." journal))))))

    (add-hook 'org-ref-clean-bibtex-entry-hook #'my/org-ref-clean-check-journal t)


    (use-package doi-utils
      :config
      (setq doi-utils-open-pdf-after-download t))
    (use-package org-ref-isbn)
    (use-package org-ref-latex))
#+END_SRC
** Org-todo

Tambah keyword =org-todo= dan pakai =C-c C-t= untuk tukar status. Bila =Hold= atau
=Cancelled= masukkan penjelasan sekiranya perlu =h@/!=. Bila tekan =C-c C-t= di
heading memasukkan memasukkan keyword di heading.

wUntuk tunjukkan semua TODO di current buffer yang tidak termasuk di
=org-agenda-files= guna =org-show-todo-tree= dan kekuncinya ialah =C-c / t= atau shortcut ke =org-sparse-tree= ~j-w-v~

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "HOLD(h@/!)" "CANCELLED(c@/!)"))))

  ;;Menyenagkan utk tukar kekunci TODO dengan C-c C-t KEKUNCI (org-todo-keywords)
  (setq org-use-fast-todo-selection t)

  ;;Tetapkan warna keyword
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "purple" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                )))


  ;;== Buat TAGS automatik
  ;; Status TODO memberikan atau menukarkan tag secara automatisk. Cth ke status 'HOLD'
  ;; memberikan tag 'HOLD' dan ke status 'DONE' membuang tag 'HOLD' dan 'CANCELLED'
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("HOLD" ("HOLD" . t))
                (done ("HOLD"))
                ("TODO" ("CANCELLED") ("HOLD"))
                ("NEXT" ("CANCELLED") ("HOLD"))
                ("DONE" ("CANCELLED") ("HOLD")))))

  ;; Utk tukar status TODO menggunakan S-kiri dan S-kanan dan elakkan proses biasa seperti memasukkan masa
  ;; atau nota utk HOLD atau CANCELLED sekiranya yang ingin dibuat ialah pertukaran status TODO sahaja
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)

  ;;== Tukar parents status ke "DONE" hanya bila semua child tasks sudah ke status "DONE"
  (setq org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t)

  ;;== Masukkan annotation di task bila tukar status
  (setq org-log-done (quote time))

  ;;== Masukkan annotation bila tukar tarikh DEADLINE
  (setq org-log-redeadline (quote time))

  ;;== Masukkan annotation bila tukar tarikh SCHEDULE
  (setq org-log-reschedule (quote time))

#+END_SRC
** TODO Test org-todo
** Agenda
Tunjukkan semua TODO, temujanji dan pelbagai tugasan yang perlu
diselesaikan. Fail-fail utk dimasukkan ke org-agenda diatur di sini. Pakai Dropbox
utk sync fail-fail di Orgzly dan komputer lain. Lock to current file =C-u C-c C-x <=
*** Aturcara agenda
Selepas pasang versi org-mode 9.1.2, masalah untuk tukar stail
=org-agenda-time-grid=. Hydra dipakai di =org-agenda-view-mode= dan diambil dari [[http://oremacs.com/2016/04/04/hydra-doc-syntax/][sini]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-agenda
    :bind
    (("C-c a" . org-agenda)
     ("C-'" . org-cycle-agenda-files) ; quickly access agenda files
     :map org-agenda-mode-map
     ("v" . hydra-org-agenda-view/body)
     ("r" . org-agenda-refile) ; overrides org-agenda-redo, which I use "g" for anyway
     ("s" . org-agenda-schedule) ; overrides saving all org buffers, also bound to C-x C-s
     ("d" . my/org-agenda-mark-done)) ; overrides org-exit
    :init
    ;;== Folder utk masukkan org agenda files
    (setq org-agenda-files (quote ("~/Dropbox/org/"
                                   "~/Dropbox/org/privat/"
                                   )))

    ;; remove C-c [ from adding or excluding org file to front of agenda
    ;; other then those specified in org-agenda-files
    (unbind-key "C-c [" org-mode-map)
    (unbind-key "C-c ]" org-mode-map)


    ;; Hydra http://oremacs.com/2016/04/04/hydra-doc-syntax/
    (defun org-agenda-cts ()
      (let ((args (get-text-property
                   (min (1- (point-max)) (point))
                   'org-last-args)))
        (nth 2 args)))

    (defhydra hydra-org-agenda-view (:hint none)
      "
      _d_: ?d? day        _g_: time grid=?g? _a_: arch-trees    _l_: show-log
      _w_: ?w? week       _[_: inactive      _A_: arch-files    _L_: log-4
      _t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?    _c_: clockcheck
      _m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
      _y_: ?y? year     _SPC_: reset         _!_: deadline      _q_: quit"
      ("SPC" org-agenda-reset-view)
      ("d" org-agenda-day-view
       (if (eq 'day (org-agenda-cts))
           "[x]" "[ ]"))
      ("w" org-agenda-week-view
       (if (eq 'week (org-agenda-cts))
           "[x]" "[ ]"))
      ("t" org-agenda-fortnight-view
       (if (eq 'fortnight (org-agenda-cts))
           "[x]" "[ ]"))
      ("m" org-agenda-month-view
       (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
      ("y" org-agenda-year-view
       (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
      ("l" org-agenda-log-mode
       (format "% -3S" org-agenda-show-log))
      ("L" (org-agenda-log-mode '(4)))
      ("c" (org-agenda-log-mode 'clockcheck))
      ("f" org-agenda-follow-mode
       (format "% -3S" org-agenda-follow-mode))
      ("a" org-agenda-archives-mode)
      ("A" (org-agenda-archives-mode 'files))
      ("r" org-agenda-clockreport-mode
       (format "% -3S" org-agenda-clockreport-mode))
      ("e" org-agenda-entry-text-mode
       (format "% -3S" org-agenda-entry-text-mode))
      ("g" org-agenda-toggle-time-grid
       (format "% -3S" org-agenda-use-time-grid))
      ("D" org-agenda-toggle-diary
       (format "% -3S" org-agenda-include-diary))
      ("!" org-agenda-toggle-deadlines)
      ("["
       (let ((org-agenda-include-inactive-timestamps t))
         (org-agenda-check-type t 'timeline 'agenda)
         (org-agenda-redo)))
      ("q" (message "Abort") :exit t))


    :config

    ;; Vise viktige dato som er registert i agenda-fil "dato" under "privat" mappen
    ;; med deaktiveres og brukes filen OBS.org i private mappen og spesifisere datoene
    ;; denne metoden er raskere enn å bruke diary.
    ;; (setq org-agenda-include-diary t)

    (setq org-agenda-skip-deadline-if-done t ; remove done deadlines from agenda
          org-agenda-skip-scheduled-if-done t ; remove done scheduled from agenda
          ;; don't show scheduled if the deadline is visible unless it's
          ;; also scheduled for today:
          org-agenda-skip-scheduled-if-deadline-is-shown 'not-today
          org-deadline-warning-days 3  ; warn me 3 days before a deadline
          )
    (setq org-agenda-tags-column -120)
    (setq org-agenda-window-setup 'current-window ; use current window for agenda
          ;; restore previous config after I'm done
          org-agenda-restore-windows-after-quit t)
    (setq org-agenda-span 'day) ; just show today. I can "vw" to view the week

    ;; Masalah pakai org-agenda-entry-types dibawah ialah ia
    ;; mematikan anniversary dates dan weather-metno
    ;; (setq org-agenda-entry-types '(:deadline)) ;show deadline but not schedule alt. '(:deadline scheduled)

    ;; remove tags when display agenda
    (setq org-agenda-remove-tags t)

    ;; Tukar cara tunjuk waktu tanpa "----" dan sentiasa tunjuk masa walaupun
    ;; tidak ada task yang ditetapkan pada jam dihari yang sama - require-timed
    (setq org-agenda-time-grid
          '((daily today) ; (daily today require-tmed)
            (800 1000 1200 1400 1600 1800)
            " --- " " ")
          )

    ;; mark the current time
    (setq org-agenda-current-time-string "<----- { NÅ } ")

    ;; mark as DONE
    (defun my/org-agenda-mark-done (&optional arg)
      "Mark current TODO as DONE.
             See `org-agenda-todo' for more details."
      (interactive "P")
      (org-agenda-todo "DONE"))

    ;; Skip register tags
    (defun my-skip-reg ()
      "Skip trees that are not register"
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (if (re-search-forward ":REGISTER:" subtree-end t)
            nil          ; tag found, do not skip
          subtree-end))) ; tag not found, continue after end of subtree


    ;; Skip tags https://stackoverflow.com/questions/10074016/org-mode-filter-on-tag-in-agenda-view
    (defun zin/org-agenda-skip-tag (tag &optional others)
      "Skip all entries that correspond to TAG.

    If OTHERS is true, skip all entries that do not correspond to TAG."
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
            (current-headline (or (and (org-at-heading-p)
                                       (point))
                                  (save-excursion (org-back-to-heading)))))
        (if others
            (if (not (member tag (org-get-tags-at current-headline)))
                next-headline
              nil)
          (if (member tag (org-get-tags-at current-headline))
              next-headline
            nil))))

    ;; Display format
    (setq org-agenda-prefix-format '((agenda  . "%-12 s%?-2t") ; (agenda . " %s %-12t ") or "%-12 s%?-2t" if want to show schedule/timeline
                                     (timeline . "%-9:T%?-2t%") ; "%-9:T%?-2t% s" if want to show deadline/schedule in timeline ie. s
                                     (todo . " +%i %t") ;%i%?-8:T tidak justify TODO
                                     (tags . " +%i %t") ;(tags . "%i %-8:T")
                                     (search . "%i %-8:T")))

    ;; Custom agenda
    (setq org-agenda-custom-commands
          '(("y" "Privat Agenda"
             ((agenda ""
                      (
                       ;; (org-agenda-overriding-header "Dagens oversikt")
                       (org-agenda-show-all-dates t)
                       (org-agenda-use-time-grid t)))
              (todo "NEXT"
                    ((org-agenda-max-entries 5)
                     (org-agenda-overriding-header "Dagens oppgaver")
                     ))
              (todo "HOLD"
                    ((org-agenda-max-entries 5)
                     (org-agenda-overriding-header "Oppgaver på vent")
                     ))
              (todo "TODO"
                    ((org-agenda-max-entries 20)
                     (org-agenda-overriding-header "Jobb relaterte oppgaver")
                     (org-agenda-skip-function '(zin/org-agenda-skip-tag "JOBB" t)) ;only JOBB tag included
                     ))
              ;; (tags-todo "-REFILE-PRIVAT" nil
              ;;            (org-agenda-skip-entry-if 'todo 'next))
              (tags "REFILE"
                    ((org-agenda-max-entries 10)
                     (org-agenda-overriding-header "Refile")
                     (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) ;skip if TODO keyword marked DONE
                     ))
              (todo "TODO"
                    ((org-agenda-max-entries 20)
                     (org-agenda-skip-function '(zin/org-agenda-skip-tag "PRIVAT" t))
                     (org-agenda-overriding-header "Private saker")))
              ;; (tags-todo "JOBB")
              ))
            ("d" "Deadline" agenda "Oppgaver med fristdato"
             ((org-agenda-time-grid nil)
              (org-deadline-warning-days 356)
              (org-agenda-entry-types '(:deadline))))
            ("s" "Scheduled" agenda "Planglagte oppgaver"
             ((org-agenda-time-grid nil)
              (org-get-scheduled-time t)
              (org-agenda-entry-types '(:scheduled))))
            ("r" "Refile" tags "REFILE"
             ((org-agenda-overriding-header "Usorterte oppgaver")
              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) ;skip if TODO keyword marked DONE
              (org-tags-match-list-sublevels nil))))
          )

    ;;== Org agenda buka di frame semasa
    (defun ybk/waktu-todo (split)
      "Visit the org agenda, in the current window or a SPLIT."
      (interactive "P")
      (org-agenda-list) ;tunjukkan waktu. Utk seminggu tekan "vw" - view week
      (when (not split)
        (delete-other-windows)))

    (bind-key "w" #'ybk/waktu-todo 'ybk/org-map)

    ;;== Singkatan utk org-agenda TODO
    (defun ybk/todo (&optional split)
      "Visit the org agenda, in the current window or a SPLIT."
      (interactive "P")
      ;;pakai list TODO ie. "t"
      (org-agenda nil "t") ;boleh pilih sebarang option kalau buat custom agenda view
      (when (not split)
        (delete-other-windows)))

    (bind-key "d" #'ybk/todo 'ybk/org-map)

    ;;== Singkatan utk org-agenda REFILE
    (defun ybk/refile (&optional split)
      "Visit the org agenda, in the current window or a SPLIT."
      (interactive "P")
      ;;pakai list TODO ie. "t"
      (org-agenda nil "r") ;boleh pilih sebarang option kalau buat custom agenda view
      (when (not split)
        (delete-other-windows)))

    (bind-key "r" #'ybk/refile 'ybk/org-map)

    ;;== Singkatan utk org-agenda persendirian sekiranya dibuat
    (defun ybk/min-agenda (&optional split)
      "Visit the org agenda, in the current window or a SPLIT."
      (interactive "P")
      ;;pakai list TODO ie. "t"
      (org-agenda nil "y") ;boleh pilih sebarang option kalau buat custom agenda view
      (when (not split)
        (delete-other-windows)))

    (bind-key "y" #'ybk/min-agenda 'ybk/org-map)
    ;; (define-key global-map (kbd "C-c t a") 'ybk/pop-to-org-agenda)

    ;; mula org-agenda bila buka Emacs
    ;; (add-hook 'after-init-hook 'org-agenda-list)
    (add-hook 'after-init-hook 'ybk/min-agenda)

    ;;== Tukar parents status ke "DONE" hanya bila semua child tasks sudah ke status "DONE"
    (setq org-enforce-todo-dependencies t
          org-enforce-todo-checkbox-dependencies t)

    ;; Utk tukar status TODO menggunakan S-kiri dan S-kanan dan elakkan proses biasa seperti memasukkan masa
    ;; atau nota sekiranya yang ingin dibuat ialah pertukaran status TODO
    (setq org-treat-S-cursor-todo-selection-as-state-change nil)

    ;;== warn me of any deadlines in next 3 days
    (setq org-deadline-warning-days 3)

    ;; Compact the block agenda view when "t" will leave out lines like the agenda span name
    ;; and week number or the separator lines
    (setq org-agenda-compact-blocks nil)
    )
#+END_SRC
*** Org-super-agenda
Diambil dari [[https://github.com/alphapapa/org-super-agenda][GitHub:alphapapa]]

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-super-agenda
    :ensure t
    ;;:pin melpa
    :config
    ;;Enable mode
    (org-super-agenda-mode t)

    ;;Configure
    (let ((org-super-agenda-groups
           '(;; Each group has an implicit boolean OR operator between its selectors.
             (:name "Today"  ; Optionally specify section name
                    :time-grid t  ; Items that appear on the time grid
                    :todo "TODAY")  ; Items that have this TODO keyword
             (:name "Important"
                    ;; Single arguments given alone
                    :tag "bills"
                    :priority "A")
             ;; ;; Set order of multiple groups at once
             ;; (:order-multi (2 (:name "Shopping in town"
             ;;                         ;; Boolean AND group matches items that match all subgroups
             ;;                         :and (:tag "shopping" :tag "@town"))
             ;;                  (:name "Food-related"
             ;;                         ;; Multiple args given in list with implicit OR
             ;;                         :tag ("food" "dinner"))
             ;;                  ;; (:name "Personal"
             ;;                  ;;        :habit t
             ;;                  ;;        :tag "personal")
             ;;                  (:name "Space-related (non-moon-or-planet-related)"
             ;;                         ;; Regexps match case-insensitively on the entire entry
             ;;                         :and (:regexp ("space" "NASA")
             ;;                                       ;; Boolean NOT also has implicit OR between selectors
             ;;                                       :not (:regexp "moon" :tag "planet")))))
             ;; Groups supply their own section names when none are given
             (:todo "WAITING" :order 8)  ; Set order of this section
             (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                    ;; Show this group at the end of the agenda (since it has the
                    ;; highest number). If you specified this group last, items
                    ;; with these todo keywords that e.g. have priority A would be
                    ;; displayed in that group instead, because items are grouped
                    ;; out in the order the groups are listed.
                    :order 9)
             (:priority<= "B"
                          ;; Show this section after "Today" and "Important", because
                          ;; their order is unspecified, defaulting to 0. Sections
                          ;; are displayed lowest-number-first.
                          :order 1)
             ;; After the last group, the agenda will display items that didn't
             ;; match any of these groups, with the default order position of 99
             )))
      (org-agenda nil "a"))
    )
#+END_SRC

*** Org-agenda-property
Aturcara utk tunjukkan property of items di org-agenda buffer sekiranya tidak pakai
=org-agenda-custom-commands=. Contohnya utk tunjukkan "DEADLINE" di *TODO* list bila tekan
=C-c a t=. Dua tempat boleh tukar:

+ org-agenda-property-list eg. POSITION, DEADLINE, SCHEDULED, Responsibility etc
+ org-agenda-property-position eg. where-it-fits, same-line, next-line

Rujukkan di [[https://github.com/Malabarba/org-agenda-property][Malabarba
]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-agenda-property
    :ensure t
    :config
    (setq org-agenda-property-list '("DEADLINE")))
#+END_SRC

** Capture
I use org-capture to create short notes about all kinds of things. I can capture
emails to remember for later, quick thoughts for later, RSS feeds (see [[Feed reader]]),
really anything.

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :bind*
    ("C-c c" . org-capture)
    :bind
    (:map org-capture-mode-map
          ("C-c C-j" . my/org-capture-refile-and-jump))
    :config
    (defun my/org-capture-refile-and-jump ()
      (interactive)
      (org-capture-refile)
      (org-refile-goto-last-stored)))
#+END_SRC
*** Org-eww
Org-eww lets me capture eww webpages with org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org-eww)
#+END_SRC

*** Firefox
This line is necessary for the [[https://addons.mozilla.org/en-US/firefox/addon/org-capture/][org capture]] extension for Firefox.

#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
#+END_SRC

*** Capture templates
And now for the capture templates themselves. It's a bit complicated, but [[http://orgmode.org/manual/Capture-templates.html][the manual]] does a great job explaining:
Untuk penerangan aturcara template rujuk di [[http://orgmode.org/manual/Template-expansion.html#Template-expansion][expension]] dan di [[http://orgmode.org/manual/Template-elements.html][elements]] cth:

|-----+---------------------------------------------------|
| %   | Fungsi                                            |
|-----+---------------------------------------------------|
| %i  | Masukkan isi kandungan yang di-block bila capture |
| %T  | Timestap. Utk tarikh sahaja guna %t               |
| %a  | Masukkan link seperti pakai org-store-link        |
| %f  | Nama fail yang di capture                         |
| %^g | Prompt for tags as in target file                 |
| %^G | Masukkan tags seperti yang ada di semua fail-fail |
| %?  | Cursor di sini bila pakai template                |

Untuk meletakkan SCHEDULED =C-c C-s= dan DEADLINE =C-c C-d=

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "refile.org"))
  (defconst my/org-inbox (concat org-directory "refile.org"))
  (defconst my/org-notes (concat org-directory "notes.org"))

  (setq org-capture-templates
        (quote (("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" )
                 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                ("s" "store" entry (file my/org-inbox)
                 "* TODO %?\n %a\n %i\n %U\n ")
                ("t" "task" entry (file  my/org-inbox)
                 "* TODO %? \n %i\n ")
                ("n" "note" entry (file my/org-notes)
                 "* %?\n %i")
                ("b" "bib" entry (file+headline my/org-inbox "Bibliography")
                 "* TODO %?\n %a \n %i")
                ("p" "Protocol" entry (file my/org-inbox)
                 "* TODO [[%:link][%:description]]\n%i" :immediate-finish t)
                ("L" "Protocol Link" entry (file my/org-inbox)
                 "* TODO [[%:link][%:description]]" :immediate-finish t))))
#+END_SRC
*** Capture shortcut
Guna fungsi key-chord dan tekan =qq= utk terus ke TODO task
#+BEGIN_SRC emacs-lisp
  (defun ybk/org-task-capture ()
    "Capture a task with my default template."
    (interactive)
    (org-capture nil "t"))
  (key-chord-define-global "qq" #'ybk/org-task-capture)

#+END_SRC

** Refile
Org-refile lets me quickly move around headings in org files. It plays nicely with
org-capture, which I use to turn emails into TODOs easily (among other things, of
course)

#+BEGIN_SRC emacs-lisp
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-refile-use-outline-path t)
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6)))) ;up to 6 level deep headlines

  ;; Exclude DONE state tasks from refile targets
  (defun ybk/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'ybk/verify-refile-target)
#+END_SRC

** Meeting
Diambil dari [[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org][sini]]. Untuk memudahkan buat nota masa meeting dan menggelakkan sebarang
gangguan dari semua buffer-buffer yang dibuka

#+BEGIN_SRC emacs-lisp
  (defun meeting-notes ()
    "Call this after creating an org-mode heading for where the notes for the meeting
  should be. After calling this function, call 'meeting-done' to reset the environment."
    (interactive)
    (outline-mark-subtree)                              ;; Select org-mode section
    (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
    (deactivate-mark)
    (delete-other-windows)                              ;; Get rid of other windows
    (newline-and-indent)
    ;;(text-scale-set 1)                                  ;; Text is now readable by others
    (fringe-mode 0)
    (message "Bila habis ambil nota, matikan dengan F6-d atau M-x meeting-done."))

  (defun meeting-done ()
    "Attempt to 'undo' the effects of taking meeting notes."
    (interactive)
    (widen)                                       ;; Opposite of narrow-to-region
    (text-scale-set 0)                            ;; Reset the font size increase
    (fringe-mode 1)
    (winner-undo))    ;; Put the windows back in place

  ;; Kekunci
  (bind-key "n" #'meeting-notes 'ybk/org-map)
  (bind-key "m" #'meeting-done 'ybk/org-map)
#+END_SRC
** Slides Reveal
Cara buat slides pembentangan menggunakan =Reveal.js=. Untuk memakai Reveal
menggunakan org-mode, harus memuatkan ~ox-raveal~ dari [[https://github.com/yjwen/org-reveal][GitHub]] atau [[http://melpa.org/#/getting-started][Melpa]]. Selain itu
perlu dapatkan =Reveal.js= dari [[http://hakim.se/][Hakim El Hattab]] di [[https://github.com/hakimel/reveal.js][GitHub]]. Cara untuk pakai dan
aturcara lain boleh dibaca di [[https://github.com/yjwen/org-reveal][sini]]. Kemudian pakai =C-c C-e R R= untuk hasilkan slides.

=Reveal.js= boleh diletakkan di folder yang sama setiap kali menyediakan
slides. Folder *css, js, lib* dan *plugin* dikopi ke folder slides. Sekiranya
=Reveal.js= disimpan di folder yang sama, tetapkan =org-reveal-root= dengan hanya
="."= dan sekiranya difolder yang lain, tetapkan dengan
=file:///tempat/folder/reveal.js=. Sekiranya tidak menbuat salinan =Reveal.js= maka
boleh meletakkan =#+REVEAL_ROOT:= di org-file slide yang sedang dibuat.

#+BEGIN_EXAMPLE
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    ;; tetapkan lokasi
    (setq org-reveal-root ".") ;lokasi reveal.js di folder yg sama dengan slides

    ;; ;; tetapkan di Dropbox tapi ada masalah.. jadi pakai cara atas
    ;;(setq org-reveal-root "file:///home/Dropbox/lisp/reveal.js") ;lokasi di Dropbox
    )
#+END_SRC

Sekiranya ingin meletakkan slides di GitHub, branch =gh-pages= harus buat untuk
menyimpan semua slides. Untuk lihat contoh aturcara di fail =org= boleh lihat di
[[https://raw.githubusercontent.com/ybkamaleri/slides/gh-pages/2017-06-08-Workshop-resultat/workshop.org][sini]].

Antara fungsi berguna yang disenaraikan di [[https://github.com/yjwen/org-reveal#set-the-location-of-revealjs][sini]] ialah:
*** Force split
Masukkan =#+REVEAL: split= dan slide baru bermula selepas kekunci =#+REVEAL= tersebut.
*** Tajuk
Tajuk dimasukkan secara automatik dari =#+Title:=. Sekiranya tidak ingin masukkan
tajuk, boleh letakkan =reveal_title_slide:nil= di =#+OPTIONS:=
*** Ubah tajuk
Untuk ubah tajuk slide boleh gunakan fungsi =org-reveal-title-slide= dan tetapkan
informasi yang diinginkan menggunakan:

| kod | Infomasi  |
|-----+-----------|
| %t  | Title     |
| %a  | Author    |
| %e  | Email     |
| %d  | Date      |
| %%  | Literal % |
*** Latarbelakang
**** Satu warna
Tetapkan di fungsi =reveal_background= guna RGB atau format warna CSS. Contohnya:

#+BEGIN_EXAMPLE
   *** Single Colored Background
      :PROPERTIES:
      :reveal_background: #123456
      :END:
#+END_EXAMPLE
**** Imej
Gunakan URL atau tetapkan imej. =reveal_background_trans= gunakan =slide= untuk
menetapkan yang imej latarbelakang /sliding/ dan tidak /fading/.

#+BEGIN_EXAMPLE
   *** Single Image Background
      :PROPERTIES:
      :reveal_background: ./images/whale.jpg
      :reveal_background_trans: slide
      :END:
#+END_EXAMPLE
**** Ulang imej latarbelakang
Gunakan fungsi =reveal_background_repeat= dan tetapkan =repeat=

#+BEGIN_EXAMPLE
  *** Repeating Image Background
      :PROPERTIES:
      :reveal_background: ./images/whale.jpg
      :reveal_background_size: 200px
      :reveal_background_repeat: repeat
      :END:
#+END_EXAMPLE
**** Imej untuk tajuk latarbelakang
Untuk menggunakan imej utk tajuk latarbelakang, tetapkan:
- =REVEAL_TITLE_SLIDE_BACKGROUND= tetapkan image URL
- =REVEAL_TITLE_SLIDE_BACKGROUND_SIZE= contohnya 200px
- =REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT= ditetapkan ke =repeat=
*** Tunjukkan isi-kandungan
Tetapkan =:frag t= di =#+OPTIONS= akan menggunakan /fragment style/ sedia ada. Untuk
tukar boleh tetapkan /fragment style/ secara local menggunakan
=#+REVEAL_DEFAULT_FRAG_STYLE= atau umum menggunakan =org-reveal-default-frag-style=.

Guna =#+ATTR_REVEAL= untuk tetapkan cara menunjukkan kandungan di slides. Contohnya:

#+BEGIN_EXAMPLE
 #+ATTR_REVEAL: :frag (roll-in)
  - Bistand til analyse av registerdata
  - Etablering av resultattjenester
#+END_EXAMPLE
** Insert photo
Masukkan gambar ke ~org-file~ melalui command folder contohnya dari Dropbox. File
akan dipindahkan ke folder yang sama dengan ~org-file~ yang digunakan. Diambil dari
[[http://pragmaticemacs.com/emacs/a-workflow-to-quickly-add-photos-to-org-mode-notes/][Pragmaticemacs]]
dan ubahsuaian dari
[[https://gist.github.com/nico202/1c645c2a0a6cfb5a06bf2f6717d0cf54][gist]]

Prefix =C-u M-x= arg akan pindahkan gambar ke subfolder dan utk hanya copy gambar
dan original di biarkan di folder asal pakai prefix =M-x=

#+BEGIN_SRC emacs-lisp
  ;; [[elfeed:pragmaticemacs.com#http://pragmaticemacs.com/?p=752][A workflow to quickly add photos to org-mode notes]]
  ;; use case is taking a photo of a slide in a conference and uploading
  ;; it to syncthing and get it on your computer. You then want to embed
  ;; it in an org-mode document by moving it to the subfolder and
  ;; renaming according to the current section of the org file, avoiding
  ;; name clashes

  ;; required libraries
  (require 'dash)
  (require 'swiper)
  (require 's)
  (require 'f)

  ;; Hydra
  (defhydra hydra-photo (:hint nil :color green)
    "
        ^Masukkan gambar^
        ^^^^^^^^--------------------------
         _i_: insert       _c_: copy

        "
    ("i" nx/insert-screenshot)
    ("c" nx/copy-syncthing-photo)
    ("q" nil "quit"))

  (bind-key "p" #'hydra-photo/body 'ybk/org-map)

  ;;(key-chord-define-global "vb" #'hydra-buffer/body)
  ;;(bind-key "C-c m b" #'hydra-buffer/body)

  (setq buffer-move-behavior 'move)

  ;; Default move, copy on prefix (C-u)
  (defun nx/insert-screenshot (arg)
    (interactive "P")
    (bjm/insert-image "~/Dropbox/photo/" arg))

  ;; This defaults to copy: move with prefix (C-u)
  (defun nx/insert-syncthing-photo (arg)
    (interactive "P")
    (bjm/insert-image "~/Dropbox/photo/" (not arg)))


  ;; Always copy, ignore prefix
  (defun nx/copy-syncthing-photo (arg)
    (interactive "P")
    (bjm/insert-image "~/Dropbox/photo/" t))


  (defun bjm/insert-image (image-dir copy)
    "Insert image from conference directory, rename and add link in
    current file.
  The file is taken from a start directory set by `image-dir' and
  copied/moved to the img subdirectory, renamed and embedded at the
  point as an org-mode link. The user is presented with a list of files
  in the start directory, from which to select the file to move, sorted
  by most recent first. The `copy` argument decides if it will be copied
  or moved"'
    (interactive)
    (let (file-list target-dir file-list-sorted start-file
                    start-file-full file-ext end-file end-file-base end-file-full
                    file-number subfolder)
      (setq subfolder "imgs")
      ;; clean directories from list but keep times
      (setq file-list
            (-remove (lambda (x) (nth 1 x))
                     (directory-files-and-attributes image-dir)))

      ;; get target directory
      (setq target-dir (concat
                        (expand-file-name subfolder (file-name-directory (buffer-file-name)))
                        "/"))

      ;; sort list by most recent
      ;; http://stackoverflow.com/questions/26514437/emacs-sort-list-of-directories-files-by-modification-date
      (setq file-list-sorted
            (mapcar #'car
                    (sort file-list
                          #'(lambda (x y) (time-less-p (nth 6 y) (nth 6 x))))))

      ;; use ivy to select start-file
      (let (action)
        (setq action (if copy "Copy" "Move"))
        (setq start-file (ivy-read
                          (concat action " selected file to " target-dir ":")
                          file-list-sorted
                          :re-builder #'ivy--regex
                          :sort nil
                          :initial-input nil)))

      ;; add full path to start file and end-file
      (setq start-file-full
            (expand-file-name start-file image-dir))
      ;; generate target file name from current org section
      (setq file-ext (file-name-extension start-file t))

      ;; my phone app doesn't add an extension to the image so I do it
      ;; here. If you want to keep the existing extension then use the
      ;; line above
      ;; (setq file-ext ".jpg")

      ;; get section heading and clean it up
      (setq end-file-base
            (concat (s-downcase
                     (s-dashed-words (nth 4 (org-heading-components))))))
      ;; shorten to first 40 chars to avoid long file names
      (setq end-file-base (s-left 40 end-file-base))
      ;; number to append to ensure unique name
      (setq file-number 1)
      (setq end-file (concat
                      end-file-base
                      (format "-%s" file-number)
                      file-ext))

      ;; increment number at end of name if file exists
      (message (concat target-dir end-file))
      (while (file-exists-p (concat target-dir end-file))
        ;; increment
        (setq file-number (+ file-number 1))
        (setq end-file (concat
                        end-file-base
                        (format "-%s" file-number)
                        file-ext)))

      ;; final file name including path
      (setq end-file-full
            (expand-file-name end-file target-dir))

      ;; if target-dir does not exists, create it, else copy-file will fail
      (if (not (f-directory? target-dir))
          (make-directory target-dir))
      ;; rename file if move it t
      (if copy
          (copy-file start-file-full end-file-full)
        (rename-file start-file-full end-file-full))
      (let (action)
        (setq action (if copy "Copied" "Moved"))
        (message action " %s to %s" start-file-full end-file))
      ;; insert link
      (insert (org-make-link-string (format "file:%s" (concat "./" subfolder "/" end-file))))
      ;; display image
      (org-display-inline-images t t)))
#+END_SRC
** Images
*** Kekalkan saiz imej
Untuk pastikan yang saiz imej sama untuk semua imej-imej di dokument. Pastikan
program =ImageMagick= sudah dipasang. Sekiranya ingin size lebih besar, boleh tukar
=300x300= ke saiz yang diingini. Fungsi ini diambil dari [[https://stackoverflow.com/questions/17637685/configuring-emacs-for-showing-fixed-width-inline-images][StackOverflow]]

#+BEGIN_SRC emacs-lisp
  (defun org-display-inline-images (&optional include-linked refresh beg end)
    "Display inline images.
  Normally only links without a description part are inlined, because this
  is how it will work for export.  When INCLUDE-LINKED is set, also links
  with a description part will be inlined.  This can be nice for a quick
  look at those images, but it does not reflect what exported files will look
  like.
  When REFRESH is set, refresh existing images between BEG and END.
  This will create new image displays only if necessary.
  BEG and END default to the buffer boundaries."
    (interactive "P")
    (unless refresh
      (org-remove-inline-images)
      (if (fboundp 'clear-image-cache) (clear-image-cache)))
    (save-excursion
      (save-restriction
        (widen)
        (setq beg (or beg (point-min)) end (or end (point-max)))
        (goto-char beg)
        (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                          (substring (org-image-file-name-regexp) 0 -2)
                          "\\)\\]" (if include-linked "" "\\]")))
              old file ov img)
          (while (re-search-forward re end t)
            (setq old (get-char-property-and-overlay (match-beginning 1)
                                                     'org-image-overlay))
            (setq file (expand-file-name
                        (concat (or (match-string 3) "") (match-string 4))))
            (when (file-exists-p file)
              (let ((file-thumb (format "%s%st.png" (file-name-directory file) (file-name-base file) "t.png")))
                (unless (file-exists-p file-thumb)
                  (shell-command (format "convert %s -thumbnail 300x300 %s"
                                         file file-thumb)))
                (if (and (car-safe old) refresh)
                    (image-refresh (overlay-get (cdr old) 'display))
                  (setq img (save-match-data (create-image file-thumb)))
                  (when img
                    (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                    (overlay-put ov 'display img)
                    (overlay-put ov 'face 'default)
                    (overlay-put ov 'org-image-overlay t)
                    (overlay-put ov 'modification-hooks
                                 (list 'org-display-inline-remove-overlay))
                    (push ov org-inline-image-overlays))))))))))
#+END_SRC
*** Imej PDF
Secara asalnya imej PDF tidak dapat ditunjukkan /inline/ di Org-mode. Fungsi di bawah
membolehkan imej PDF dan pelbagai jenis imej ditunjukkan di Org-mode. Fungsi dari
[[https://stackoverflow.com/questions/15407485/inline-pdf-images-in-org-mode][StackOverflow]]. Fail /PDF/ akan ditukarkan ke /PNG/ menggunakan =ImageMagick= dan
diberikan nama baru ke /<nama-fail-asal>_thumb.png/.

Sekiranya ingin membuat link, namakan ke =./<nama-fail>_thumb.png=

#+BEGIN_SRC emacs-lisp
  (setq image-file-name-extensions
        (quote
         ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))

  (setq org-image-actual-width 600)

  (setq org-imagemagick-display-command "convert -density 600 \"%s\" -thumbnail \"%sx%s>\" \"%s\"")
  (defun org-display-inline-images (&optional include-linked refresh beg end)
    "Display inline images.
  Normally only links without a description part are inlined, because this
  is how it will work for export.  When INCLUDE-LINKED is set, also links
  with a description part will be inlined.  This
  can be nice for a quick
  look at those images, but it does not reflect what exported files will look
  like.
  When REFRESH is set, refresh existing images between BEG and END.
  This will create new image displays only if necessary.
  BEG and END default to the buffer boundaries."
    (interactive "P")
    (unless refresh
      (org-remove-inline-images)
      (if (fboundp 'clear-image-cache) (clear-image-cache)))
    (save-excursion
      (save-restriction
        (widen)
        (setq beg (or beg (point-min)) end (or end (point-max)))
        (goto-char beg)
        (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                          (substring (org-image-file-name-regexp) 0 -2)
                          "\\)\\]" (if include-linked "" "\\]")))
              old file ov img)
          (while (re-search-forward re end t)
            (setq old (get-char-property-and-overlay (match-beginning 1)
                                                     'org-image-overlay)
                  file (expand-file-name
                        (concat (or (match-string 3) "") (match-string 4))))
            (when (file-exists-p file)
              (let ((file-thumb (format "%s%s_thumb.png" (file-name-directory file) (file-name-base file))))
                (if (file-exists-p file-thumb)
                    (let ((thumb-time (nth 5 (file-attributes file-thumb 'string)))
                          (file-time (nth 5 (file-attributes file 'string))))
                      (if (time-less-p thumb-time file-time)
                          (shell-command (format org-imagemagick-display-command
                                                 file org-image-actual-width org-image-actual-width file-thumb) nil nil)))
                  (shell-command (format org-imagemagick-display-command
                                         file org-image-actual-width org-image-actual-width file-thumb) nil nil))
                (if (and (car-safe old) refresh)
                    (image-refresh (overlay-get (cdr old) 'display))
                  (setq img (save-match-data (create-image file-thumb)))
                  (when img
                    (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                    (overlay-put ov 'display img)
                    (overlay-put ov 'face 'default)
                    (overlay-put ov 'org-image-overlay t)
                    (overlay-put ov 'modification-hooks
                                 (list 'org-display-inline-remove-overlay))
                    (push ov org-inline-image-overlays))))))))))
#+END_SRC
*** Tukar PDF ke png
Cara lain yang boleh dipakai untuk tukarkan imej PDF ke PNG diambil dari [[https://emacs.stackexchange.com/questions/390/display-pdf-images-in-org-mode][Kaushal
Modi]]. Cara ini ialah dengan meletakkan komando =# ()convertfrompdf:t= sebelum
masukkan link, dan fail di link harus dinamakan dengan sambungan PNG. Contohnya:

#+BEGIN_EXAMPLE
# ()convertfrompdf
[[./namafail.png]]
#+END_EXAMPLE

Fungsinya ialah =org-include-img-from-pdf= dan dilarikan setiap kali fail di simpan
(/save/) yang ditetapkan di /hook/.

#+BEGIN_SRC emacs-lisp
  (defun org-include-img-from-pdf (&rest _)
    "Convert pdf files to image files in org-mode bracket links.

      # ()convertfrompdf:t # This is a special comment; tells that the upcoming
                           # link points to the to-be-converted-to file.
      # If you have a foo.pdf that you need to convert to foo.png, use the
      # foo.png file name in the link.
      [[./foo.png]]
  "
    (interactive)
    (if (executable-find "convert")
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward "^[ \t]*#\\s-+()convertfrompdf\\s-*:\\s-*t"
                                    nil :noerror)
            ;; Keep on going to the next line till it finds a line with bracketed
            ;; file link.
            (while (progn
                     (forward-line 1)
                     (not (looking-at org-bracket-link-regexp))))
            ;; Get the sub-group 1 match, the link, from `org-bracket-link-regexp'
            (let ((link (match-string-no-properties 1)))
              (when (stringp link)
                (let* ((imgfile (expand-file-name link))
                       (pdffile (expand-file-name
                                 (concat (file-name-sans-extension imgfile)
                                         "." "pdf")))
                       (cmd (concat "convert -density 96 -quality 85 "
                                    pdffile " " imgfile)))
                  (when (and (file-readable-p pdffile)
                             (file-newer-than-file-p pdffile imgfile))
                    ;; This block is executed only if pdffile is newer than
                    ;; imgfile or if imgfile does not exist.
                    (shell-command cmd)
                    (message "%s" cmd)))))))
      (user-error "`convert' executable (part of Imagemagick) is not found")))


  ;; Hook fungsi ke sebelum simpan fail
  (defun my/org-include-img-from-pdf-before-save ()
    "Execute `org-include-img-from-pdf' just before saving the file."
    (add-hook 'before-save-hook #'org-include-img-from-pdf nil :local))
  (add-hook 'org-mode-hook #'my/org-include-img-from-pdf-before-save)

  ;; If you want to attempt to auto-convert PDF to PNG  only during exports, and not during each save.
  ;; (with-eval-after-load 'ox
  ;;   (add-hook 'org-export-before-processing-hook #'org-include-img-from-pdf))
#+END_SRC

** CSS di org
Untuk memasukkan CSS persendirian ke org file bila eksport. Diambil dari
[[https://stackoverflow.com/questions/19614104/how-to-tell-org-mode-to-embed-my-css-file-on-html-export][StackOverflow]]. Fail CSS persendirian ialah =org-style.css= dan diletakkan di
=~/Dropbox/customize/org-style.css= boleh edit bila perlu

#+BEGIN_SRC emacs-lisp
  (defun my-org-inline-css-hook (exporter)
    "Insert custom inline css"
    (when (eq exporter 'html)
      (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
             (path (concat dir "style.css"))
             (homestyle (or (null dir) (null (file-exists-p path))))
             (final (if homestyle "~/Dropbox/customize/org-style.css" path))) ;; <- set your own style file path
        (setq org-html-head-include-default-style nil)
        (setq org-html-head (concat
                             "<style type=\"text/css\">\n"
                             "<!--/*--><![CDATA[/*><!--*/\n"
                             (with-temp-buffer
                               (insert-file-contents final)
                               (buffer-string))
                             "/*]]>*/-->\n"
                             "</style>\n")))))

  (add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)
#+END_SRC

** Blogs
Aktivkan library yang diperlukan untuk mengeksport ke html.

#+BEGIN_SRC emacs-lisp
  (use-package ox-html)
  (use-package ox-publish)
  (use-package ox-rss)
#+END_SRC

Untuk kemaskini blogs saya [[http://yusbk.github.io][Github page]]. Cara ini diambil dari [[https://carl.ac/blogging-with-emacs-org-github-pages/][Carl Lieberman]]
Bila memasukkan isi-kandungan baru ke blog pakai =C-c C-e P f=

#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        '(("yusbk.blog"
           ;; Path to org files.
           :base-directory "~/Git-personal/yusbk.github.io/org"
           :base-extension "org"

           ;; Path to Jekyll Posts
           :publishing-directory "~/Git-personal/yusbk.github.io/_posts/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :html-extension "html"
           :body-only t
           )))
#+END_SRC

Untuk pastikan cara menamakan fail di blogs mengikut cara [[http://jekyllrb.com/][Jekyll]] masukkan ini di premeable

#+BEGIN_EXAMPLE
  #+OPTIONS: toc:nil num:nil
  #+BEGIN_EXPORT html
  ---
  layout: post
  title: "Blogging with Emacs, Org, and GitHub Pages"
  permalink: /:title/
  tags: [emacs]
  ---
  #+END_EXPORT
#+END_EXAMPLE

** Tips and tricks
*** Buat table
- Pakai =C-C |= utk buat table cth. 2x5
- Mula isi cth. =|Tajuk|Cara|Penerangan= kemudian =C-c RET=
- Pakai =|= dan =TAB= utk garis menegak
- Pakai =|-= dan =TAB= utk garis melintang
- =M-S-down= atau =M-S-up= tambah atau buang table row
*** Numbering
- Utk masukkan nombor atau bullet di ayat2 yang sedia ada, tekan =C-c -= dan gunakan
  =S-<kanan>= utk tukarkan ke nombor atau bullet yg diingini.
- Utk tukarkan ayat ke /headline/, tekan =C-c *=
- Utk tukarkan semua ayat2 ke /subtree/, tekan =C-c

*** Properties
Shortcut =C-c C-x p= (org-set-property) dan utk padam C-c C-c d (org-delete-property)

* CSV file
Untuk menggendali fail csv
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :mode (("\\.csv" . csv-mode)))
#+END_SRC
* Periksa ejaan (spelling)
Untuk periksa enjaan
** Kerja
*** TODO Elisp periksa kalau hunspell atau aspell sudah tersedia dan pakai apa yang tersedia
** Flyspell: periksa ejaan

|-------+-------------------------|
| key   | fungi                   |
|-------+-------------------------|
| qk    | hydra-kamus/body        |
| C-c f | betulkan ejaan flyspell |
| C-c i | betulkan ejaan ispell   |
| C-c n | next error              |
| C-c b | pervious error (back)   |


=Ispell= ialah prog untuk memeriksa ejaan yang tersedia bersama Emacs. Di sini =Aspell=
dipakai bersama =Flyspell= sebab ia lebih baik dari =Hunspell=. Tetapi pemasangan =Aspell=
selalunya memberikan masalah berbanding dengan =Hunspell=. Langkah-langkah pemasangan
seperti dibawah boleh diikuti sebagai cadangan. Sekurang-kurangnya ia berfungsi di
komputer saya.

*OBSS!!* Boleh cuba pasang aspell melalui Synaptic atau App manager dulu. Sekiranya
tidak berjaya baru cuba cara di bawah. Tapi yang penting bahasa harus di download dan
di pasang seperti cara yang disebutkan di no. 5.

1. Turunkan program aspell di [[http://aspell.net/]]
2. Unzip fail seperti begini =$ tar xvzf file.tar.gz=
3. Pasang [[https://launchpad.net/ubuntu/+source/gcc-7][gcc7]] dengan cara di bawah. Tetapi tidak terdapat utk ubuntu 16.10
   #+BEGIN_EXAMPLE
     sudo add-apt-repository ppa:ubuntu-toolchain-r/test
     sudo apt-get update
     sudo apt-get install gcc-7
     gcc-7 --version
   #+END_EXAMPLE
4. Ikut selajutnya cara seperti di [[http://www.linuxfromscratch.org/blfs/view/svn/general/aspell.html][sini]]
   #+BEGIN_EXAMPLE
     ##pasang aspell
     ./configure --prefix=/usr && make
     sudo make install

     ## aturcara utk penggunaan di program lain
     sudo ln -svfn aspell-0.60 /usr/lib/aspell
     sudo install -v -m755 -d /usr/share/doc/aspell-0.60.6.1/aspell{,-dev}.html
     sudo install -v -m644 manual/aspell.html/* \
         /usr/share/doc/aspell-0.60.6.1/aspell.html

     sudo install -v -m644 manual/aspell-dev.html/* \
         /usr/share/doc/aspell-0.60.6.1/aspell-dev.html
   #+END_EXAMPLE
5. Turunkan bahasa di [[ftp://ftp.gnu.org/gnu/aspell/dict/0index.html][sini]] atau di [[https://ftp.gnu.org/gnu/aspell/dict/][sini]]. Sekiranya fail jenis ~gz2~ boleh di-zip seperti ini =$ tar -xvjf
   fail_bahasa.tar.bz2=. Kemudian pasang dengan =./configure && make= kemudian sebagai
   root =make install=. Bahasa Norwegian cth nya perlu kedua-dua fail ~nb~ dan ~no~.
6. Larikan =aspell config= di terminal utk lihat dimana direktori-direktori yang dipakai

Untuk tukar bahasa boleh ditetapkan di ~ispell-local-dictionary~.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flyspell
    :ensure t
    :diminish (flyspell-mode . "FS")
    :bind (("C-c f" . flyspell-correct-word-generic)
           ("C-\\" . flyspell-correct-word-generic) ;kekeunci asal C-\ ialah toggle-input-method
           ("C-." . flyspell-auto-correct-word) ;C-M-i alternatif
           ("C-c n" . flyspell-goto-next-error)
           ("C-c b" . ybk/flyspell-goto-previous-error)
           ("C-c v" . flyspell-auto-correct-previous-word)
           ("C-c i" . ispell-word)
           :map ybk/org-map
           ("f" . hydra-ybk-kamus/body))
    :init
    ;; Hydra flyspell
    (defhydra hydra-ybk-kamus (:hint nil )
      "
        ^Periksa perkataan (prefix i-Ispell dan f-Flyspell)^
        ^--^----------^--^------------^--^-------^--^-----------^--^----------^--^-----------
        _n_: next.err  _p_: prev.err  _w_: iword  _b_: ibuffer  _r_: iregion  _c_: icontinue
        _i_: ikill     _z_: prev.cor  _y_: fword  _x_: fbuffer  _s_: fregion

        ^Tukar Kamus^
        ^---------------------------------------------------------------------
        _f_: Flysell  _k_: tkr.kamus  _g_: British  _o_: Norwegian     _q_: KELUAR

      "
      ("f" flyspell-mode)
      ("k" ybk/change-languages)
      ("g" lang-eng)
      ("o" lang-norsk)
      ("c" ispell-continue)
      ("n" flyspell-goto-next-error)
      ("p" ybk/flyspell-goto-previous-error)
      ("w" ispell-word)
      ("b" ispell-buffer)
      ("r" ispell-region)
      ("i" ispell-kill-ispell)
      ("z" flyspell-corect-previous-word-generic)
      ("y" flyspell-correct-word-generic)
      ("x" flyspell-buffer)
      ("s" flyspell-region)
      ("q" (message "KELUAR") :exit t))

    ;;(key-chord-define-global "qk" #'hydra-kamus/body)
    (key-seq-define-global "qk" #'hydra-ybk-kamus/body)

    :config
    ;;(flyspell-mode t)

    ;; Pakai Aspell
    (setq ispell-program-name "aspell")
    ;;flyspell-buffer dan flyspell-region perlu "-l" sebagi "--lang" sekiranya pakai aspell
    (setq ispell-list-command "--list")
    (setq ispell-extra-args   '("--sug-mode=ultra" ;normal|fast|ultra utk melajukan proses
                                "--lang=en_GB")) ;british en_GB

    ;; ;; Save a new word to personal dictionary without asking
    ;; (setq ispell-silently-savep t) ;hanya hidupkan sekiranya sudah tahu fungsinya

    ;; aktifkan flyspell-mode di mode-mode tertentu
    (add-hook 'org-mode-hook 'turn-on-flyspell)
    (add-hook 'text-mode-hook 'turn-on-flyspell)
    (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
    (add-hook 'markdown-mode-hook 'turn-on-flyspell)


    ;; flyspell-prog-mode hanya periksa comments dan strings
    (dolist (mode '(emacs-lisp-mode-hook
                    inferior-lisp-mode-hook
                    clojure-mode-hook
                    python-mode-hook
                    js-mode-hook
                    R-mode-hook))
      (add-hook mode
                '(lambda ()
                   (flyspell-prog-mode))))

    ;; Boleh betulkan pakai mouse kalau mahu
    (eval-after-load "flyspell"
      '(progn
         (define-key flyspell-mouse-map [s-mouse-1] #'flyspell-correct-word-generic)))

    ;; move point to previous error
    ;; based on code by hatschipuh at
    ;; http://emacs.stackexchange.com/a/14912/2017
    (defun ybk/flyspell-goto-previous-error (arg)
      "Go to arg previous spelling error."
      (interactive "p")
      (while (not (= 0 arg))
        (let ((pos (point))
              (min (point-min)))
          (if (and (eq (current-buffer) flyspell-old-buffer-error)
                   (eq pos flyspell-old-pos-error))
              (progn
                (if (= flyspell-old-pos-error min)
                    ;; goto beginning of buffer
                    (progn
                      (message "Restarting from end of buffer")
                      (goto-char (point-max)))
                  (backward-word 1))
                (setq pos (point))))
          ;; seek the next error
          (while (and (> pos min)
                      (let ((ovs (overlays-at pos))
                            (r '()))
                        (while (and (not r) (consp ovs))
                          (if (flyspell-overlay-p (car ovs))
                              (setq r t)
                            (setq ovs (cdr ovs))))
                        (not r)))
            (backward-word 1)
            (setq pos (point)))
          ;; save the current location for next invocation
          (setq arg (1- arg))
          (setq flyspell-old-pos-error pos)
          (setq flyspell-old-buffer-error (current-buffer))
          (goto-char pos)
          (if (= pos min)
              (progn
                (message "No more miss-spelled word!")
                (setq arg 0))
            (forward-word)))))

    ;; Tukar bahasa
    (defun lang-norsk ()
      "Bahasa Norwegian."
      (interactive)
      (ispell-change-dictionary "norsk")
      (flyspell-buffer))

    (defun lang-eng ()
      "Bahasa Inggris."
      (interactive)
      (ispell-change-dictionary "en_GB")
      (flyspell-buffer))

    ;; Utk cadangkan perkataan cara Ivy
    (use-package flyspell-correct-ivy
      :ensure t))
#+END_SRC

** Tukar bahasa
Hanya dipakai sekiranya fungsi di =auto-lang= memili basa yang lain.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;;cara 1
  ;; (defun ybk/tukar-kamus ()
  ;;   "Tukar kamus."
  ;;   (interactive)
  ;;   (let* ((dic ispell-current-dictionary)
  ;;          (change (if (string= dic "british") "norsk" "american"))) ;"en_US"
  ;;     (ispell-change-dictionary change)
  ;;     (message "Dictionary switched from %s to %s" dic change)
  ;;     ))

  ;; (bind-key "k" #'ybk/tukar-kamus 'ybk/org-map)
  ;;(global-set-key (kbd "<f6> b") 'ybk-tukar-kamus)

  ;;Cara 2
  (let ((langs '("british" "norsk"))) ;"american""
    (setq lang-ring (make-ring (length langs)))
    (dolist (elem langs) (ring-insert lang-ring elem)))

  (defun ybk/change-languages ()
    (interactive)
    (let ((lang (ring-ref lang-ring -1)))
      (ring-insert lang-ring lang)
      (ispell-change-dictionary lang)))

  (bind-key "k" #'ybk/change-languages 'ybk/org-map)
  ;;(global-set-key (kbd "C-<f7>") 'change-languages)
#+END_SRC

** Auto lang
Kenal pasti bahasa secara automatik. Utk larikan secara manual guna =M-x
auto-lang-minor-mode=. Diambil dari [[https://github.com/altruizine/auto-lang/blob/master/auto-lang.el][sini]] cuma dansk ditukar ke norwegian dan polish
dimatikan sebab crash dengan BM

#+BEGIN_SRC emacs-lisp
  (use-package auto-lang
    :load-path "~/Dropbox/lisp/"
    :config
    (defun ybk/auto-lang () (auto-lang-minor-mode t))

    (add-hook 'message-setup-hook 'ybk/auto-lang)
    (add-hook 'org-mode-hook 'ybk/auto-lang)
    (add-hook 'text-mode-hook 'ybk/auto-lang)
    )
#+END_SRC
* Periksa kode (flycheck)
Untuk periksa kode
** Flycheck: periksa kode
Emacs can tell you magically if your code is wrong (or just ugly). Flycheck is a
minor mode for this. Let's enable it globally. Untuk rujukkan boleh baca [[http://www.flycheck.org/en/latest/index.html][di sini]].

Flycheck can check your R code too, but you'll need to install the ~lintr~ ([[https://github.com/jimhester/lintr][Rujukan)]]
package. Sekiranya ada masalah untuk =install.package("lintr")= disebabkan ~curl~, ~openssl~ atau ~httr~ larikan komdo ini

#+BEGIN_EXAMPLE
sudo apt-get install libcurl4-openssl-dev libssl-dev
#+END_EXAMPLE

sekiranya bermasalah pemasangan berkaitan ~igraph~ atau ~irlba~. Coba buang dan pasang semula R, atau pasang

#+BEGIN_EXAMPLE
# apt-get install liblapack-dev
# apt-get install libblas-dev
#+END_EXAMPLE

Kemudian pasang di R

#+BEGIN_EXAMPLE
> install.packages("igraph")
> devtools::install_github("jimhester/lintr")
#+END_EXAMPLE

Sekiranya ada masalah berkaitan ~xml2~ atau ~libxml2~. Pasangkan

#+BEGIN_EXAMPLE
apt-get install libxml2-dev libxslt-dev
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package flycheck ; checks for style and syntax
    :ensure t
    :diminish (flycheck-mode . "FC")
    :init (global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

    ;; I don't care if code is commented out in R:
    (setq flycheck-lintr-linters "with_defaults(commented_code_linter = NULL)")

    ;; (add-hook 'after-init-hook #'global-flycheck-mode)

    ;; :diminish (flycheck-mode . " ")
    )
#+END_SRC
** Electric operator
Electric operator will turn ~a=10*5+2~ into ~a = 10 * 5 + 2~, so let's enable it for R:

#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :ensure t
    ;; :hook (ess-mode python-mode)
    :config
    (add-hook 'ess-mode-hook #'electric-operator-mode)
    (add-hook 'python-mode-hook #'electric-operator-mode)

    (setq electric-operator-R-named-argument-style 'spaced)
    )
#+END_SRC

* ESS
** R
Aturcara dan ESS snippet
*** Aturcara ESS
Untuk guna R. Kekunci yang berguna antaranya:
- =C-c C-d=   Pelbagai aturcara lain
- =C-c C-d e= ESSdescribe-object-at-point

Untuk tukar syntax highlight, boleh guna =menu= dan =Font-lock=

#+BEGIN_SRC emacs-lisp
  (use-package ess-site
    :ensure ess
    ;;:pin melpa-stable
    :bind
    (:map ess-mode-map ;ESS
          ("C-c s" . run-shiny-app)
          ("C-a" . crux-move-beginning-of-line)
          ("M--" . ess-insert-assign) ; assign <-
          ("_"   . self-insert-command)
          ("M-+" . my/dt-update)
          ("M-m" . my/add-match)
          ("M-." . ess-switch-process) ;sama dengan C-c C-s
          ("M-p" . my/add-pipe)
          ("C-|" . my/ess-eval-pipe-through-line)
          :map inferior-ess-mode-map ;iESS
          ("M--" . ess-insert-assign)
          ("_"   . self-insert-command)
          ("M-+" . my/dt-update)
          ("M-m" . my/add-match)
          ("M-<up>" . ess-readline);previous cmd from script
          ;; :map ybk/r-map
          ;; ("." . ess-describe-object-at-point)
          ;; ("d" . ess-dev-map)
          ;; ("r" . ess-r-package-dev-map)
          )
    :init
    ;; Tetapkan Rsetting folder
    (defvar ybk/r-dir "~/Rsetting/") ;definere hvor epost skal være
    ;; lage direktori om ikke allerede finnes
    (unless (file-exists-p ybk/r-dir)
      (make-directory ybk/r-dir t))

    :config
    ;; ess-company
    ;; https://stackoverflow.com/questions/49232454/emacs-ess-how-to-auto-complete-library-function
    (defun my-ess-hook ()
      ;; ensure company-R-library is in ESS backends
      (make-local-variable 'company-backends)
      (cl-delete-if (lambda (x) (and (eq (car-safe x) 'company-R-args))) company-backends)
      (push (list 'company-R-args 'company-R-objects 'company-R-library :separate)
            company-backends))

    (add-hook 'ess-mode-hook 'my-ess-hook)

    ;; (with-eval-after-load 'ess
    ;;   (setq ess-use-company t))
    (setq ess-use-company t)

    ;; whitespace
    (setq ess-nuke-trailing-whitespace-p t)

    ;; pakai indentation cara RStudio
    (setq ess-default-style 'RStudio-)
    ;; (add-hook 'ess-mode-hook
    ;;           (lambda ()
    ;;             (ess-set-style 'RStudio)))

    (setq ess-eval-visibly 'nowait) ; don't hog Emacs
    (setq ess-ask-for-ess-directory nil) ; don't ask for dir when starting a process
    (setq ess-eldoc-show-on-symbol t) ; show eldoc on symbol instead of only inside of parens
    (setq ess-use-ido nil) ; rely on ivy instead of ido

    ;; History
    (setq ess-history-directory ybk/r-dir) ;tetapkan folder utk history
    (setq ess-history-file t) ;nil if not saving .Rhistory
    ;; (setq inferior-R-args "--no-restore-history --no-save") ;utk R comman not to restore and save Rhistory
    (setq inferior-R-args "--no-restore-history --vanilla") ; guna vanilla sebagai default utk reproducibility
    (setq ess-pdf-viewer-pref "emacsclient") ; guna pdf-tools

    ;; data.table update
    (defun my/dt-update ()
      "Adds a data.table update."
      (interactive)
      ;;(just-one-space 1) ;delete whitespace around cursor
      (insert ":="))

    ;; Match
    (defun my/add-match ()
      "Adds match."
      (interactive)
      (insert "%in%"))

    ;; pipe
    (defun my/add-pipe ()
      "Adds a pipe operator %>% with one space to the left and then
  starts a newline with proper indentation"
      (interactive)
      (just-one-space 1)
      (insert "%>%")
      (ess-newline-and-indent))

    ;; I sometimes want to evaluate just part of a piped sequence. The
    ;; following lets me do so without needing to insert blank lines or
    ;; something:
    (defun my/ess-beginning-of-pipe-or-end-of-line ()
      "Find point position of end of line or beginning of pipe %>%"
      (if (search-forward "%>%" (line-end-position) t)
          (let ((pos (progn
                       (beginning-of-line)
                       (search-forward "%>%" (line-end-position))
                       (backward-char 3)
                       (point))))
            (goto-char pos))
        (end-of-line)))

    (defun my/ess-eval-pipe-through-line (vis)
      "Like `ess-eval-paragraph' but only evaluates up to the pipe on this line.

  If no pipe, evaluate paragraph through the end of current line.

  Prefix arg VIS toggles visibility of ess-code as for `ess-eval-region'."
      (interactive "P")
      (save-excursion
        (let ((end (progn
                     (my/ess-beginning-of-pipe-or-end-of-line)
                     (point)))
              (beg (progn (backward-paragraph)
                          (ess-skip-blanks-forward 'multiline)
                          (point))))
          (ess-eval-region beg end vis))))

    ;; Get commands run from script or console
    ;; https://stackoverflow.com/questions/27307757/ess-retrieving-command-history-from-commands-entered-in-essr-inferior-mode-or
    (defun ess-readline ()
      "Move to previous command entered from script *or* R-process and copy
     to prompt for execution or editing"
      (interactive)
      ;; See how many times function was called
      (if (eq last-command 'ess-readline)
          (setq ess-readline-count (1+ ess-readline-count))
        (setq ess-readline-count 1))
      ;; Move to prompt and delete current input
      (comint-goto-process-mark)
      (end-of-buffer nil) ;; tweak here
      (comint-kill-input)
      ;; Copy n'th command in history where n = ess-readline-count
      (comint-previous-prompt ess-readline-count)
      (comint-copy-old-input)
      ;; Below is needed to update counter for sequential calls
      (setq this-command 'ess-readline)
      )

    ;; (global-set-key (kbd "\C-cp") 'ess-readline)
    )
#+END_SRC
*** ESS snippet
Diambil dari [[https://github.com/mattfidler/r-autoyas.el][GitHub]]. Pakai =TAB= untuk buka snippet. =Yasnippet= perlu dipasang untuk
memakai fungsi ini.

#+BEGIN_SRC emacs-lisp
  (use-package r-autoyas
    :ensure t
    ;;:pin melpa
    :bind (:map ybk/prog-map
                ;; Keluar yassnippet dan buang argument selebihnya yang tidak dipakai
                ("-" . r-autoyas-exit-snippet-delete-remaining))
    :config
    ;; Aktifkan yasnippet sebab diperlukan utk r-autoyas
    (require 'yasnippet)

    ;; Aktivkan di mode tertentu
    (add-hook 'ess-mode-hook #'r-autoyas-ess-activate)
    (add-hook 'markdown-mode-hook #'r-autoyas-ess-activate)

    ;; Tunjuk mesej untuk debugging
    (setq r-autoyas-debug t)

    ;; Masukkan personal function
    (setq r-autorays-expand-package-functions-only nil))
#+END_SRC
*** Deploy shiny app

|----+-----------|
| xs | run shiny |

Untuk buka Shiny app. Fail "deployApp.R" harus disediakan dan diletakkan di dalam
app-folder. Untuk larikan fungsi ini menggunakan =C-c s= atau =xs= mesti berada di app-folder.

Fail =deployApp.R= harus menggandungi kode ini:

#+BEGIN_EXAMPLE
 #!//usr/lib/R/bin/Rscript
 shiny::runApp('~/Git-work/traume/ntrApp', launch.browser = TRUE)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  ;; mesti ada fail ini di app-folder
  (setq deploy-file "deployApp.R")

  (defun run-shiny-app ()
    "Run app from any opened app files."
    (interactive)
    (let* (shiny-app)
      (setq shiny-app
            (expand-file-name deploy-file (file-name-directory (buffer-file-name))))
      (shell-command-to-string (format "Rscript %s" shiny-app))))

  (key-seq-define-global "xs" #'run-shiny-app)
#+END_SRC

*** Debug
=ess-tracebug= aktiv secara automatik dan untuk mematikan boleh tetapkan =(setq
ess-use-tracebug nil)=. Untuk penggunaan debug guna kekuci =C-c C-t= [ess-dev-map]
untuk dapatkan semua kekunci. Hydra utk ess-debug pakai =jx= atau =F9=

Untuk penerangan mendalam baca di [[https://code.google.com/archive/p/ess-tracebug/][ess-tracedebug]]. Untuk keluar dari browser pakai
=c + Return= dan fungsi akan diteruskan. Untuk matikan debugging dan kembali ke
console pakai =Q + Return=.

Bila debugging, kekuci ini boleh dipakai

|------------+---------------------------|
| Kekuci     | Fungsi                    |
|------------+---------------------------|
| F9 atau jx | hydra-r-debug             |
| M-C        | Teruskan (continue)       |
| M-C-C      | Teruskan pelbagai (multi) |
| M-C-N      | Next step multi           |
| M-Q        | quit                      |
| C-x M-g n  | next-error                |
| C-x M-g p  | pervious-error            |
|------------+---------------------------|

Guna =F9= *hydra-ybk-r-debug* bila di ess-mode untuk dapatkan kekuci di bawah:

#+BEGIN_SRC emacs-lisp

  ;; ;; Cobaan untuk guna hydra cuma belum selesai
  ;; (eval-after-load 'ess-mode
  ;;   '(progn
  ;;      (defhydra hydra-ybk-r-debug (:color teal :hint nil)
  ;;        "
  ;;        ^ESS R-debug  'C-c C-t' r-dev-map. F9 or 'jk'^

  ;;        ^Misc          ^Package^             ^^Break point^           ^^^Exit [_q_]
  ;;        ^--------------^-----------------------^-----------------------
  ;;        _o_: object     _l_: load  _t_: test    _b_: set    _k_: kill
  ;;        _a_: devtools   _d_: doc   _c_: check   _n_: next   _K_: kill all
  ;;        _e_: traceback                      ^^^^_p_: prev
  ;;        "
  ;;        ("o" ess-describe-object-at-point)
  ;;        ("b" ess-bp-set)
  ;;        ("k" ess-bp-kill)
  ;;        ("K" ess-bp-kill-all)

  ;;        ("n" ess-bp-next)
  ;;        ("p" ess-bp-previous)
  ;;        ("a" ess-r-devtools-ask)
  ;;        ("l" ess-r-devtools-load-package)
  ;;        ("c" ess-r-devtools-check-package)

  ;;        ("e" ess-show-traceback)
  ;;        ("d" ess-r-devtools-document-package)
  ;;        ("t" ess-r-devtools-test-package)
  ;;        ("q" (message "KELUAR") :exit t))

  ;;      ;;== key-binding
  ;;      (define-key ess-mode-map [f9] 'hydra-ybk-r-debug/body)
  ;;      (define-key inferior-ess-mode-map[ f9] 'hydra-ybk-r-debug/body)
  ;;      ;;(bind-key "<f9>" #'hydra-ybk-r-debug/body)

  ;;      ;;(key-chord-define-global "jv" #'hydra-ybk-r-debug/body)
  ;;      (key-seq-define ess-mode-map "jk" #'hydra-ybk-r-debug/body)
  ;;      (key-seq-define inferior-ess-mode-map "jk" #'hydra-ybk-r-debug/body)
  ;;      ))

  (defhydra hydra-ybk-r-debug (:hint nil)
    "
     ^ESS R-debug  'C-c C-t' r-dev-map. F9 or 'jb'^

     ^Misc          ^Package^             ^^Break point^
     ^--------------^-----------------------^-----------------------
     _o_: object     _l_: load  _t_: test    _b_: set    _k_: kill
     _a_: devtools   _d_: doc   _c_: check   _n_: next   _K_: kill all
     _e_: traceback                      ^^^^_p_: prev   _q_: KELUAR
    "
    ("o" ess-describe-object-at-point)
    ("b" ess-bp-set)
    ("k" ess-bp-kill)
    ("K" ess-bp-kill-all)

    ("n" ess-bp-next)
    ("p" ess-bp-previous)
    ("a" ess-r-devtools-ask)
    ("l" ess-r-devtools-load-package)
    ("c" ess-r-devtools-check-package)

    ("e" ess-show-traceback)
    ("d" ess-r-devtools-document-package)
    ("t" ess-r-devtools-test-package)
    ("q" (message "KELUAR") :exit t))


  ;;== key-binding
  (key-seq-define-global "jx" 'hydra-ybk-r-debug/body)
  (global-set-key (kbd "<f9>") 'hydra-ybk-r-debug/body)
#+END_SRC
*** Test R buffer
Buka buffer untuk test fungsi R dll guna =R-mode=. Fungsi ini dimodifikasikan dari
[[http://ergoemacs.org/emacs/emacs_new_empty_buffer.html][ErgoEmacs]].

#+BEGIN_SRC emacs-lisp
  (defun test-r-buffer ()
    "Create a new empty buffer with R-mode."
    (interactive)
    (let (($buf (generate-new-buffer "*r-test*"))
          (test-mode2 (quote R-mode)))
      (switch-to-buffer $buf)
      (insert (format "## == Test %s == \n\n" "R script"))
      (funcall test-mode2)
      (setq buffer-offer-save t)
      $buf
      ))

  (global-set-key (kbd "C-c x") 'test-r-buffer)
#+END_SRC

*** Flycheck-julia
Periksa kode di ESS. Diambil dari [[https://github.com/gdkrmr/flycheck-julia][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-julia
    :ensure t
    :config
    ;; loads ess, which contains ess-julia-mode
    (require 'ess-site)
    ;; enable flycheck globally
    (add-hook 'after-init-hook #'global-flycheck-mode)

    (flycheck-julia-setup))
#+END_SRC

*** Buka data.frame
**** ESS-view
Untuk view data.frame di speadsheet software seperti Excel atau Calc. Untuk lihat
dataframe pakai kekunci =C-x w=. Untuk buka dataframe dan edit kemudian dimasukkan
semula ke R gunakan kekunci =C-x q=
#+BEGIN_SRC emacs-lisp
  (use-package ess-view
    :ensure t)
#+END_SRC
** Stata
Untuk guna Stata di ESS
*** Tetapkan dimana Stata dipasang
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ess-site
    :ensure ess
    :mode (("\\.do" . stata-mode)
           ("\\.ado" . stata-mode))

    :init
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/stata"))
    (setq exec-path (append exec-path '("/usr/local/stata")))

    :config
    (require 'ess-stata-mode)
    )
#+END_SRC
*** Stata guna Ado-mode
Download =ado-mode= dari Github atau di [[https://www.louabill.org/Stata/ado-mode_install.html][sini]]
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ado-mode
    :load-path "~/Dropbox/lisp/ado-mode/lisp"
    :init
    (setq auto-mode-alist (append (list '("\\\\.ado\\\\'" . ado-mode)
                                        '("\\.do\\'" . ado-mode))
                                  auto-mode-alist))
    )
#+END_SRC

* Polymode (for knitr)
Mode ini dipakai untuk membuat dokumen yang menggunakan program R.
** Aturcara

|-----+-------------------|
| key | fungsi            |
|-----+-------------------|
| xk  | hydra-Rmd (knitr) |
|     |                   |

Polymode is a (relatively new) way of working with multiple major modes. This is
especially helpful if we want to use latex or markdown together with R code. The
process is as follows:

#+begin_src ditaa :file ~/Test/ditaa-rmd.png
  +------+   +-----+   +-----+   +------+  +-------\
  |{io}  |   |{d}  |   |{s}  |   |cBLU  |  | Doc   |
  | Rmd  +-->+Knitr+-->+ md  +-->+Pandoc+->| Pdf   |
  |      |   |     |   |     |   |      |  | html  |
  +------+   +-----+   +--+--+   +------+  \-------+
#+end_src

[[~/Test/ditaa-rmd.png]]

Default key to access polymode is =M-n=. Markdown atau Pandoc diperlukan utk proses ke html

NB! Utk aktifkan ~ess-company~ dan ~ElDoc~ utk bantuan function call args di R-chuck mesti buka R-prog di background dulu

#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :ensure t
    :mode
    ("\\.Snw" . poly-noweb+r-mode)
    ("\\.Rnw" . poly-noweb+r-mode)
    ("\\.[rR]md" . Rmd-mode)
    :bind (:map ybk/prog-map
                ("c" . rmd-insert-r-chunk)
                ("r" . rmd-eval-chunk)
                ("t" . rmd-eval-buffer)
                ("d" . poly-ess-rmarkdown)
                )
    :init
    (progn
      (defun Rmd-mode ()
        "ESS Markdown mode for Rmd files"
        (interactive)
        (require 'poly-R)
        (require 'poly-markdown)
        (R-mode)
        (poly-markdown+r-mode)))

    ;; Hydra
    (defhydra hydra-ybk-poly (:hint nil)
      "
     ^Polymode^                        ^Markdown^
     ^----------------------------------------------------------------------------------
     _n_: next      _e_: evaluate      _c_: insert chk     _f_: Fold chk      _d_: Create html
     _p_: previous  _w_: weave         _t_: eval. buffer   _a_: Fold all chk
     _k_: kill      _E_: set exporter  _r_: eval. chk      _u_: Unfold chk    _q_: KELUAR

     Rnw guna '<' utk masukkan chunck baru
     "
      ("n" polymode-next-chunk-same-type)
      ("p" polymode-previous-chunk-same-type)
      ("k" polymode-kill-chunk)

      ("e" polymode-export)
      ("w" polymode-weave)
      ("E" polymode-set-exporter)

      ("c" rmd-insert-r-chunk)
      ("r" rmd-eval-chunk)
      ("t" rmd-eval-buffer)

      ("f" rmd-fold-block)
      ("a" rmd-fold-all-blocks)
      ("u" fold-this-unfold-all)

      ("d" poly-ess-rmarkdown)
      ;; ("q" nil "keluar" :color red)
      ("q" (message "Selesai") :exit t)
      )

    ;;==key ikut urutan
    (key-seq-define-global "xk" 'hydra-ybk-poly/body)
    ;;(key-seq-define ess-mode-map "js" 'hydra-ybk-poly/body)

    ;; (bind-key "<f7>" #'hydra-ybk-poly/body)
    )
#+END_SRC

** Masukkan chunk
Untuk memasukkan =r-chunck= di polymode.

#+BEGIN_SRC emacs-lisp
  ;;Masukkan R-chunk M-n M-i
  (defun polymode-insert-new-chunk ()
    (interactive)
    (insert "\n```{r}\n")
    (save-excursion
      (newline)
      (insert "```\n")
      (previous-line)))

  ;; Masukkan R-chunk cara lain
  ;; https://emacs.stackexchange.com/questions/27405/insert-code-chunk-in-r-markdown-with-yasnippet-and-polymode
  (defun rmd-insert-r-chunk (header)
    "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yas snippet"
    (interactive "sHeader: ")
    (insert (concat "```{r " header "}\n\n```"))
    (forward-line -1))
#+END_SRC

** Menilai atau proseskan chunk
Untuk dapatkan hasilan dari chunk, boleh diproses chunk satu persatu atau semuanya serentak.
#+BEGIN_SRC emacs-lisp
  ;;Evaluate chunck
  ;;https://stackoverflow.com/questions/40894202/execute-all-r-chunks-at-once-from-an-rmd-document
  (eval-when-compile
    (require 'polymode-core)  ;; SO format :('
    (defvar pm/chunkmode))
  (declare-function pm-map-over-spans "polymode-core")
  (declare-function pm-narrow-to-span "polymode-core")

  ;; Nilai satu persatu
  (defun rmd-eval-chunk ()
    "Send current R chunk to ess process."
    (interactive)
    (and (eq (oref pm/chunkmode :mode) 'r-mode) ;;'
         (pm-with-narrowed-to-span nil
           (goto-char (point-min))
           (forward-line)
           (ess-eval-region (point) (point-max) nil nil 'R)))) ;;'

  ;; Nilai semua serentak
  (defun rmd-eval-buffer (arg)
    "Send all R code blocks in buffer to ess process. With prefix
    send regions above point."
    (interactive "P")
    (save-restriction
      (widen)
      (save-excursion
        (pm-map-over-spans
         'rmd-eval-chunk (point-min) ;;'
         ;; adjust this point to send prior regions
         (if arg (point) (point-max))))))
#+END_SRC

** Sembunyikan chunk
Pakai pakej [[https://github.com/magnars/fold-this.el][fold-this]] dan aturcara diambil dari [[https://github.com/brendan-r/dotemacs/blob/b601eb09e227d1a0ec3220a79884a743e4027e5a/init.el#L821-L843][Brendan]].

#+BEGIN_SRC emacs-lisp
  (use-package fold-this
    :ensure t
    :bind (:map ybk/prog-map
                ("+" . rmd-fold-block)
                ("*" . rmd-fold-all-blocks)
                ([?\\] . fold-this-unfold-all))
    :config
    ;; Fold chunck
    ;; https://github.com/brendan-r/dotemacs/blob/b601eb09e227d1a0ec3220a79884a743e4027e5a/init.el#L821-L843
    (defun rmd-fold-block ()
      "Fold the contents of the current R block, in an Rmarkdown file (can be undone
     with fold-this-unfold-at-point)"
      (interactive)
      (and (eq (oref pm/chunkmode :mode) 'r-mode)
           (pm-with-narrowed-to-span nil
             (goto-char (point-min))
             (forward-line)
             (fold-this (point) (point-max)))))

    ;; E.g. to send a prefix, use C-u M-x rmd-send-buffer
    (defun rmd-fold-all-blocks (arg)
      "Fold all R blocks in an Rmarkdown file (can be undone with
     fold-this-unfold-all)"
      ;; Interactive, with a prefix argument
      (interactive "P")
      (save-restriction
        (widen)
        (save-excursion
          (pm-map-over-spans
           'rmd-fold-block (point-min)
           ;; adjust this point to fold prior regions
           (if arg (point) (point-max)))))))
#+END_SRC

** Compile Rmd file
Fungsi ini menggunakan informasi YAML di fail Rmd untuk menetapkan jenis fail samada
PDF, HTML atau DOCX seperti di =RStudio=. Diambil dari [[https://gist.github.com/benmarwick/ee0f400b14af87a57e4a][gist]].

contoh YAML:
#+BEGIN_EXAMPLE
  ---
  title: "Tajuk dokumen"
  author: "Nama penulis"
  date: "2 november 2017"
  output: pdf_document
  ---
#+END_EXAMPLE

Sekiranya ingin mendapatkan pelbagai jenis dokumen boleh ditetapkan seperti di bawah
tetapi diproses dengan menggunakan kekunci standard polymode =M-n e=

#+BEGIN_EXAMPLE
  ---
  title: "Tajuk dokumen"
  author: "Nama penulis"
  date: "2 november 2017"
  output:
    pdf_document: default
    html_document: default
    word_document: default
  ---

#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun poly-ess-rmarkdown ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
        (ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
        (let* ((sprocess (ess-get-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (buf-coding (symbol-name buffer-file-coding-system))
               (R-cmd
                (format "library(rmarkdown); rmarkdown::render(\"%s\")"
                        buffer-file-name)))
          (message "Running rmarkdown on %s" buffer-file-name)
          (ess-execute R-cmd 'buffer nil nil)
          (switch-to-buffer rmd-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))

  ;; (define-key polymode-mode-map "\M-ns" 'ess-rmarkdown)
  ;; (bind-key "d" #'ess-rmarkdown ybk/prog-map)
#+END_SRC

* Markdown
Markdown mode for Markdown editing! Guna =Pandoc= utk view. Pandoc harus di install
terlebih dahulu.

ESS mode harus diaktifkan utk aktifkan =ess-company=

#+BEGIN_EXAMPLE
sudo apt install pandoc
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :config
    ;;(setq markdown-enable-math t)

    ;;Guna Pandoc utk view
    (custom-set-variables '(markdown-command "pandoc")))
#+END_SRC

Of course, markdown contains a yaml header, so we need yaml-mode as well:

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (("\\.yml\\'" . yaml-mode)))
#+END_SRC

* LaTeX
AuCTeX diguna sebab ia lebih bagus dari yang tersedia (build in) tex mode. Penggunaan
yang tersedia di AuCTeX diubahsuai dan menggunakan =latexmk= untuk tukarkan fail ke
pdf tanpa perlu melarikan fail banyak kali untuk tetapkan rujukan-rujukan secara
betul. Tapi latexmk harus dipasang dan cara senang ialah menggunakan Synaptic.

Untuk memproses fail =.Rnw= atau =.Rmd= ke PDF harus memasang *TeX-Live*. Cara untuk
pasang di Ubuntu 18.04 Bionic Beaver boleh baca di [[https://linuxconfig.org/how-to-install-latex-on-ubuntu-18-04-bionic-beaver-linux][sini]].

#+BEGIN_EXAMPLE
  $ sudo apt update
  $ sudo apt install texlive
#+END_EXAMPLE

Atau pasang =texlive-latex-extra= dan size file 404 MB.

Pastikan fail-fail ini dipasang sebelum melarikan fail =.Rnw= di *ESS*

#+BEGIN_EXAMPLE
apt install libssl-dev libcurl4-openssl-dev libxml2-dev libmagick++-dev
#+END_EXAMPLE


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex-site
    :ensure auctex
    :config
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
    (setq TeX-auto-save t
          TeX-parse-self t
          reftex-plug-into-AUCTeX t)
    (add-hook 'LaTeX-mode-hook 'reftex-mode)
    (add-hook 'LaTeX-mode-hook #'TeX-PDF-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-mode t)
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -pdf %s"
                                        TeX-run-compile nil t :help "Process file with latexmk")))
    (eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -xelatex %s"
                                        TeX-run-compile nil t :help "Process file with xelatexmk")))
    (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "latexmk")))

    ;; Stop littering everywhere with auto/ directories
    (setq-default TeX-auto-local
                  (expand-file-name "auctex/auto" (concat user-emacs-directory "var")))

    ;; Some extra files generated by xelatexmk that I don't generally
    ;; want to keep:
    (push ".synctex.gz" completion-ignored-extensions)
    (push ".fdb_latexmk" completion-ignored-extensions)
    (push ".fls" completion-ignored-extensions)
    ;; (push "\\.fdb_latexmk" LaTeX-clean-intermediate-suffixes)
    ;; (push "\\.fls" LaTeX-clean-intermediate-suffixes)
    ;; (push "\\.synctex.gz" LaTeX-clean-intermediate-suffixes)
    (setq TeX-clean-confirm nil)

    ;; ;; to use pdfview with auctex - setting sudah di letak di PDF-Tools
    ;; (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    ;;       TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
    ;;       TeX-source-correlate-start-server t) ;; not sure if last line is neccessary

    ;; revert pdf from file after compilation finishes
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    (use-package latex
      :bind
      (:map LaTeX-mode-map
            ("M-p" . outline-previous-visible-heading)
            ("M-n" . outline-next-visible-heading))))


#+END_SRC

Finally, sometimes we want wordcounts. If I just want a quick snippet, I can run the following command. If I want more information, I can drop into a shell with ~C-c M-e~ (~shell-pop~) and run ~texcount my-file.tex~:

#+BEGIN_SRC emacs-lisp
  (defun latex-word-count ()
    (interactive)
    (let* ((this-file (buffer-file-name))
           (word-count
            (with-output-to-string
              (with-current-buffer standard-output
                (call-process "texcount" nil t nil "-brief" this-file)))))
      (string-match "\n$" word-count)
      (message (replace-match "" nil nil word-count))))
#+END_SRC

** Reftex
I use =helm-bibtex= to manage my references, but ReFTeX is still great to have around for cross-references in latex files.

You will need to change ~reftex-default-bibliography~ to wherever you keep your main .bib file.

#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :commands turn-on-reftex
    :init
    (setq reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\citet{%l}")
            (?p . "\\citep[]{%l}")
            (?a . "\\autocite{%l}")
            (?A . "\\textcite{%l}")
            (?P . "[@%l]")
            (?T . "@%l [p. ]")
            (?x . "[]{%l}")
            (?X . "{%l}")))
    (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))
    (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
    (setq reftex-extra-bindings t)
    :config
    (add-hook 'LaTeX-mode-hook #'turn-on-reftex))
#+END_SRC

** Latex math
Cdlatex lets me write latex in org-mode. It's particularly useful for math. [[https://www.gnu.org/software/emacs/manual/html_node/org/CDLaTeX-mode.html][doc]]

#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-cdlatex-mode))
#+END_SRC

* HTML and Webpage
** Browser
Buka link di browser guna =F5-w=. Untuk buka html fail ke browser boleh pakai =F12-w=
browser-url-of-buffer
#+BEGIN_SRC emacs-lisp
  (bind-key "w" #'browse-url-at-point 'ybk/misc-map)

  ;;key-chord for C-c C-v
  (key-chord-define-global "qw" #'browse-url-of-buffer)
  (bind-key "w" #'browse-url-of-buffer 'ybk/prog-map)
#+END_SRC

** eww
Guna Emacs' build in =eww= browser ie. Emacs Web Wowser (eww), by default. Cuma bila larikan Rmd berikan error.

Dimatikan sebab bila export =Rmd= file ke HTML ada error

#+BEGIN_SRC emacs-lisp :tangle no
  (setq browse-url-browser-function
        '((".*kvalitetsregistre.*" . browse-url-default-browser)
          (".*github.*" . browse-url-chromium)
          (".*youtube.*" . browse-url-firefox)
          (".*youtu.be*" . browse-url-firefox)
          ("*[exported].*" . browser-url-default-browser)
          ("." . eww-browse-url)
          ))

  ;; make emacs always use its own browser for opening URL links
  ;;(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

Sekiranya webpage terlalu komplex dan =eww= tidak sesuai, tukar ke system default dengan =&= atau =0=

#+BEGIN_SRC emacs-lisp
  (use-package eww
    :bind
    (:map eww-mode-map
          ("0" . eww-browse-with-external-browser)))
#+END_SRC

Untuk menyenangkan ikuti link di =eww=

#+BEGIN_SRC emacs-lisp
  (use-package eww-lnum
    :ensure t
    :after eww
    :bind
    (:map eww-mode-map
          ("f" . eww-lnum-follow)
          ("F" . eww-lnum-universal)))
#+END_SRC

** HTML and friends
Web-mode dipakai sebagai emacs major-mode utk edit web templates.
*** Web mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :bind (:map web-mode-map
                ("C-x w" . open-html)) ;or use C-c C-v
    :mode
    ("\\.html?\\'" . web-mode)
    ("\\.scss?\\'" . web-mode)
    ("\\.erb\\'" . web-mode)
    ("\\.djhtml\\'" . web-mode)
    :config
    ;;bila web-mode tidak tahu file extension atau terlalu general cth *.html
    (setq web-mode-engines-alist
          '(("django" . "\\.djhtml'")))

    ;; ;;masih belum dikaji - C-x c sama dengan git-gutter+-commit
    ;; (define-key web-mode-map (kbd "C-x ?") 'eww-open-file) ;tentukan key sebab C-x c crash

    (defun open-html()
      "Get the HTML file path & open it"
      (interactive)
      (let (html-file-path)
        (setq html-file-path (buffer-file-name))
        (shell-command (format "xdg-open '%s'" html-file-path))))

    ;; ;;Change face color
    ;; (set-face-attribute 'web-mode-css-rule-face nil :foreground "Pink3")
    )
#+END_SRC
*** Htmlize
Untuk menukarkan file atau buffer ke kod HTML dan CSS. Untuk maklumat selajutnya boleh baca di [[https://github.com/abo-abo/htmlize/blob/master/htmlize.el][GitHub]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package htmlize
    :ensure t
    ;;:pin melpa
    :config
    ;; utk tidak ambil face-size bila ditukar ke html
    ;; dan size harus ditetapkan di css. Boleh pakai 'absolute kalau
    ;; ingin ambil size yang ditetapkan
    (setq htmlize-ignore-face-size t)

    ;; ;; tetapkan nama prefix utk css
    ;; (setq htmlize-css-name-prefix "ybk")

    ;; cara masukkan css di file
    (setq htmlize-output-type 'inline-css)
    )
#+END_SRC

* RSS Feed reader
** Elfeed-org
Untuk simpan semua langanan RSS. Masukkan alamat RSS di fail ~ybk-elfeed.org~ di
Dropbox. Utk update RSS list =S-g=. Kekunci berguna:

- Bila di rss list pakai =S-s= untuk filter apa yang ingin di lihat, cth utk tapis hanya
  list minggu lepas RSS Norge yang belum dibaca
  #+BEGIN_EXAMPLE
    @1-week-ago +Norge +unread
  #+END_EXAMPLE
- Utk buang ~tags~ pakai minus (-) dan tambah pakai plus (+)

Untuk tambah topik baru di =bookmark-jump=:
- masukkan alamat RSS ke list di Dropbox
- Bagi Tags dan tajuk di list
- Defun elfeed-show.. dengan topic baru
- Buka RSS all =F10-r= atau =yy-r=
- Filter dengan (huruf besar S) =S-s= kemudian tambah +<topic>
- Bookmark topic dengan =C-x r m=

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :init
    (setq rmh-elfeed-org-files (list "~/Dropbox/rss/ybk-elfeed.org"))
    :config
    (elfeed-org))
#+END_SRC

** Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :bind
    (:map elfeed-search-mode-map
          ("a" . bjm/elfeed-show-all)
          ("s" . bjm/elfeed-show-stats)
          ("n" . bjm/elfeed-show-norge)
          ("m" . bjm/elfeed-show-malay)
          ("t" . bjm/elfeed-show-sport)
          ("i" . bjm/elfeed-show-inter)
          ("f" . bjm/elfeed-show-fun) ;tidak berfungsi sekiranya lebih dari 6
          ("q" . bjm/elfeed-save-db-and-bury))
    :init
    ;; thanks - http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
    ;; though slightly modified
    ;; functions to support syncing .elfeed between machines
    ;; makes sure elfeed reads index from disk before launching
    (defun bjm/elfeed-load-db-and-open ()
      "Load the elfeed db from disk before opening."
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force)
      (elfeed-update))
    ;;write to disk when quiting
    (defun bjm/elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed db to disk before burying buffer"
      (interactive)
      (elfeed-db-save)
      (quit-window))
    :config

    ;;
    ;; elfeed feed reader
    ;;
    ;;shortcut functions
    (defun bjm/elfeed-show-all ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "rss-alle"))

    (defun bjm/elfeed-show-stats ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "rss-stats"))

    (defun bjm/elfeed-show-norge ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "rss-norge"))

    (defun bjm/elfeed-show-malay ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "rss-malaysia"))

    (defun bjm/elfeed-show-sport ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "rss-sport"))

    (defun bjm/elfeed-show-inter ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "rss-inter"))

    (defun bjm/elfeed-show-fun ()
      (interactive)
      (bookmark-maybe-load-default-file)
      (bookmark-jump "rss-fun"))

    (setq elfeed-db-directory "~/Dropbox/rss")
    ;; Don't use visual line mode in elfeed-search:
    (add-hook 'elfeed-search-mode-hook (lambda () (visual-line-mode -1)))
    (use-package elfeed-link
      ;; This sets up org links for org capture and the like
      ;; no ensure, since it comes with elfeed
      ))
#+END_SRC
* Email
[[https://www.emacswiki.org/emacs/GnusTutorial][Gnus]] digunakan untuk membaca email. Tetapi ~Gmail web~ juga digunakan dari masa ke
semasa terutama bila ada lampiran. Aturcara di ambil di [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/25e9fdf494c7cc33e53abeda234fe573ec4f4f58/gnus-guide-en.org][sini]] dan [[https://www.emacswiki.org/emacs/GnusGmail][sini]]. Atau di [[https://www.emacswiki.org/emacs/GnusTutorial][Gnus Tutorial]].

Aturcara di *~/.mailcap* menentukan aplikasi sesuai untuk membuka lampiran di
email. Guna =M-x mailcap-parse-mailcaps= untuk pasang data di fail ~/.mailcap ke
=mailcap-mime-data= tanpa perlu tweak =mailcap-mime-data=

Fail =.authinfo.gpg= diperlukan untuk mendapatkan username dan password kedua-dua akaun
email. Fail ini akan di-encrypted oleh Linux secara automatik bila pakai extention
=gpg=. Sekiranya ingin menggunakan kedua-dua akaun untuk menghantar email harus
memasangnya dengan [[http://www.cataclysmicmutation.com/2010/11/multiple-gmail-accounts-in-gnus][msmtp]]

#+BEGIN_EXAMPLE
  machine gmail login Brukernavn password DinPassord port 993
  machine smtp.gmail.com login Brukernavn password DinPassord port 587
  machine reise login Brukernavn password DinPassord port 993
#+END_EXAMPLE
** list TODO
*** DONE ybk/gnus-list-all kaji semula
CLOSED: [2017-08-20 sø. 17:24]
*** DONE masukkan list unread =/ o= di mode-map *Y*
CLOSED: [2017-08-20 sø. 17:24]
** Kekunci

Kekunci utk penggunaan Gnus: Group buffer, Summary buffer, Read buffer dll

| kekunci | guna                                                       |
|---------+------------------------------------------------------------|
| y       | hydra di-buffer tertentu cth. Group atau Summary Buffer    |
| G-G     | Cari email keyword                                         |
| //      | limit by subject at "Summary Buffer"                       |
| /a      | Limit by author                                            |
| /w      | cancel the current filter                                  |
| A-A     | Fetch connected server                                     |
| l       | Group: List subscribed groups                              |
| L       | Group: All local cache groups                              |
| u       | Group: Subscribe/unsubscribe group                         |
| g       | Refresh group list                                         |
| / N     | Summary: Refesh buffer ie. check new mail                  |
| C-u M-g | Summary: Show all mails - read/unread                      |
| C-u RET | Group: Show all mails -read/unread                         |
| o       | Group: List all subscribed groups with read and unread msg |
| x       | Save email to folder ~/Mail/keep/                          |

Bila di *summary buffer*, utk capaikan read messages boleh pakai ~gnus-summary-insert-old-articles~

| kekuci | fungsi                 |
|--------+------------------------|
| ^      | Fetch the parent       |
| A T    | Fetch the whole thread |
| / o    | Fetch more article     |
|        |                        |

** W3M
Web Browser untuk Emacs selain dari =eww=. Harus pasang =w3m= dengan =apt-get install
w3m=. Sekiranya bermasalah perlu pasangkan dependencies. Ini dipakai untuk buka html
email.

#+BEGIN_EXAMPLE
  cvs
  autoconf
  libgc-dev
  libncurses5-dev
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :ensure w3m
    :init
    (setq w3m-coding-system             'utf-8
          w3m-file-coding-system        'utf-8
          w3m-file-name-coding-system   'utf-8
          w3m-input-coding-system       'utf-8
          w3m-output-coding-system      'utf-8
          w3m-terminal-coding-system    'utf-8)
    :bind ("C-c w m" . w3m-browse-url))

#+END_SRC
** mu4e
Email cara =mu4e= diambil dari [[https://www.reddit.com/r/emacs/comments/8q84dl/tip_how_to_easily_manage_your_emails_with_mu4e/][sini]]. Boleh juga lihat di [[https://www.youtube.com/watch?time_continue=179&v=newRHXKm4H4][YouTube]].
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package mu4e
    :load-path "~/Dropbox/lisp/mu/mu4e"
    :custom
    (mu4e-attachment-dir "~/Downloads")
    (mu4e-compose-signature-auto-include nil)
    (mu4e-drafts-folder "/gmail/Drafts")
    (mu4e-get-mail-command "mbsync -a ~/.emacs.d/.mbsyncrc")
    (mu4e-maildir "~/Maildir")
    (mu4e-refile-folder "/gmail/Archive")
    (mu4e-sent-folder "/gmail/Sent Mail")
    (mu4e-maildir-shortcuts
     '(("/gmail/INBOX" . ?i)
       ("/gmail/All Mail" . ?a)
       ("/gmail/Deleted Items" . ?d)
       ("/gmail/Drafts" . ?D)
       ("/gmail/Important" . ?i)
       ("/gmail/Sent Mail" . ?s)
       ("/gmail/Starred" . ?S)))
    (mu4e-trash-folder "/gmail/Trash")
    (mu4e-update-interval 300)
    (mu4e-use-fancy-chars t)
    (mu4e-view-show-addresses t)
    (mu4e-view-show-images t)

    :config
    ;; don't save message to Sent Messages, GMail/IMAP will take care of this
    (setq mu4e-sent-messages-behavior 'delete)

    ;; kill compose buffer instead of just hiding it
    (setq message-kill-buffer-on-exit t)

    ;; disable trailing whitespace when in mu4e
    (add-hook 'mu4e-headers-mode-hook (lambda () (setq-local show-trailing-whitespace nil)))
    (add-hook 'mu4e-view-mode-hook (lambda () (setq-local show-trailing-whitespace nil)))

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    ;; render HTML email
    (require 'mu4e-contrib)
    (setq mu4e-html2text-command 'mu4e-shr2text)
    ;;guna pandoc (pasang dulu apt install pandoc) untuk html2text seperti di atas
    ;; (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
    ;; guna browser bila ada table
    (add-to-list 'mu4e-view-actions '("view in browser" . mu4e-action-view-in-browser))

    (add-hook 'mu4e-view-mode-hook #'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

    ;; auto complete utk To, CC, BBC
    (setq mail-user-agent 'mu4e-user-agent)

    ;; use specified signature
    ;; (defvaralias 'mu4e-compose-signature 'message-signature)
    ;; (setq mu4e-compose-signature (get-string-from-file "~/Dropbox/CV/signature.txt")) ;get-string-from-file gives error

    ;; utk IVY auto-complete
    (setq mu4e-completing-read-function 'ivy-completing-read
          mu4e-confirm-quit nil)

    (setq mu4e-headers-show-threads nil) ; Use "P" to toggle threading
    )
#+END_SRC

Guna org-mode untuk tulis email

#+BEGIN_SRC emacs-lisp
  (use-package org-mu4e
    :load-path "~/Dropbox/lisp/mu/mu4e"
    :custom
    (org-mu4e-convert-to-html t)
    :config
    ;; when composing an email, switch on the special mu4e/orgmode mode
    (define-key mu4e-compose-mode-map (kbd "C-c o") 'org~mu4e-mime-switch-headers-or-body)
    )
#+END_SRC

** mu4e notification
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :after mu4e
    :hook ((after-init . mu4e-alert-enable-mode-line-display)
           (after-init . mu4e-alert-enable-notifications))
    :config (mu4e-alert-set-default-style 'libnotify))
#+END_SRC

** Gnus
OBS! dimatikan sebab pakai mu4e
Aturcara untuk Gnus. Untuk akaun =Gmail= perlu tukar aturcara di web client:

1. Aktifkan [[https://support.google.com/mail/answer/7126229?visit_id=1-636364795330765405-1977413898&rd=2#cantsignin][IMAP]]
2. Aktifkan [[https://support.google.com/mail/answer/7126229?visit_id=1-636364795330765405-1977413898&rd=2#cantsignin][less secure apps]]

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package gnus
    :bind (:map ybk/mail-map
                ("e" . gnus)
                ("x" . keep-mail)
                ("w" . compose-mail)
                ("v" . mml-attach-file) ;C-c C-a
                ("s" . message-send-and-exit) ;C-c C-c
                ;; :map gnus-group-mode-map
                ("a" . ybk/gnus-list-all)
                ("o" . gnus-summary-insert-old-articles)
                ("c" . xsteve-show-nnmail-split-history) ;show latest received mails
                ;; :map gnus-summary-mode-map
                ;; ("x" . keep-mail)
                )
    :init
    ;; make mail-map
    (bind-keys :prefix "C-c y"
               :prefix-map ybk/mail-map)
    (bind-key "q" #'keluar 'ybk/mail-map)
    ;; message mode instead of mail mode
    (setq mail-user-agent 'message-user-agent)
    :config
    (require 'nnir) ;for email search

    ;; Hoved e-post konto som leses og sendes fra
    (setq gnus-select-method
          '(nnimap "gmail"
                   (nnimap-address "imap.gmail.com")
                   (nnimap-server-port 993)
                   (nnimap-stream ssl)
                   (nnir-search-engine imap)
                   ;; the next option gives error "cannot find file or folder gmail"
                   (nnmail-expiry-target "nnimap+gmail:[Gmail]/Søppelpost") ;click E to expire mail
                   ;;(nnmail-expiry-target "gmail:[Gmail]/Søppelpost") ;click E to expire mail
                   (nnmail-expiry-wait 90))) ;keep 3 months for expired mails
    ;; Annet Konto bare for å lese e-poster
    (add-to-list 'gnus-secondary-select-methods
                 '(nnimap "reise"
                          (nnimap-address "imap.gmail.com")
                          (nnimap-server-port 993)
                          (nnimap-stream ssl)
                          (nnir-search-engine imap)
                          ;; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
                          ;; press 'E' to expire email
                          ;;(nnmail-expiry-target "nnimap+gmail:[Gmail]/Søppelpost")
                          (nnmail-expiry-target "reise:[Gmail]/Søppelpost")
                          (nnmail-expiry-wait 90)))
    ;; Annet Konto bare for å lese e-poster
    (add-to-list 'gnus-secondary-select-methods
                 '(nnimap "ubk"
                          (nnimap-address "imap.gmail.com")
                          (nnimap-server-port 993)
                          (nnimap-stream ssl)
                          (nnir-search-engine imap)
                          ;; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
                          ;; press 'E' to expire email
                          ;;(nnmail-expiry-target "nnimap+gmail:[Gmail]/Søppelpost")
                          (nnmail-expiry-target "ubk:[Gmail]/Søppelpost")
                          (nnmail-expiry-wait 90)))


    ;; Sort emails
    (setq gnus-thread-sort-functions
          '(gnus-thread-sort-by-most-recent-date
            (not gnus-thread-sort-by-number)))

    ;; Use Gmail syntax for mail search
    ;; Let Gnus know Gmail search syntax
    (add-to-list 'nnir-imap-search-arguments '("gmail" . "X-GM-RAW"))
    ;; `gnus-group-make-nnir-group' use Gmail search syntax *by default*.
    ;; You can press `G G` instead `C-u G G` instead.
    (setq nnir-imap-default-search-key "gmail")

    ;; List all read and unread mails in subscribed Group
    (defun ybk/gnus-list-all ()
      "List all subscribed groups with or without un-read messages"
      (interactive)
      (gnus-group-list-all-groups 5))

    ;; open attachment
    (eval-after-load 'mailcap
      '(progn
         (cond
          ;; on OSX, maybe change mailcap-mime-data?
          ((eq system-type 'darwin))
          ;; on Windows, maybe change mailcap-mime-data?
          ((eq system-type 'windows-nt))
          (t
           ;; Linux, read ~/.mailcap
           (mailcap-parse-mailcaps)))))

    ;; use text part when possible instead of HTML
    (setq mm-discouraged-alternatives '("text/html" "text/richtext"))
    ;; when html not possible display in text then use w3m for html mail
    ;; install w3m is necessary

    (setq mm-text-html-renderer 'w3m) ;'eww
    ;; to read email offline. But only emails that has been mark
    ;; with ! or M-x gnus-summary-tick-article-forward
    ;; to remove from cache M-x gnus-summary-put-mark-as-read
    ;; The disk cache is located at "~/News/cache/"
    (setq gnus-use-cache t)

    ;; Threads mails treated properly
    (setq gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject)

    ;; Also, I prefer to see only the top level message.  If a message has
    ;; several replies or is part of a thread, only show the first message.
    ;; `gnus-thread-ignore-subject' will ignore the subject and
    ;; look at 'In-Reply-To:' and 'References:' headers.
    (setq gnus-thread-hide-subtree t)
    (setq gnus-thread-ignore-subject t)

    ;; Highlight
    (add-hook 'gnus-summary-mode-hook 'hl-line-mode)
    (add-hook 'gnus-group-mode-hook 'hl-line-mode)

    ;; Kill buffer after sending
    (setq message-kill-buffer-on-exit t)

    ;; Auto-fill when compose Mail
    (add-hook 'message-mode-hook 'turn-on-auto-fill)

    ;; Increase score for followups to a sent article
    (add-hook 'message-sent-hook 'gnus-score-followup-article)
    (add-hook 'message-sent-hook 'gnus-score-followup-thread)

    ;; ;; show 500 articles
    ;; (setq large-newsgroup-initial 500)

    ;; Don't ask how many to show and show all including read mail
    (setq gnus-large-newsgroup 500)

    ;; Specify directories
    (defvar ybk/mail-dir "~/Mail/") ;definere hvor epost skal være
    (defvar ybk/mail-keep (concat ybk/mail-dir "keep/")) ;for å lage eposter
    ;; lage direktori om ikke allerede finnes
    (unless (file-exists-p ybk/mail-dir)
      (make-directory ybk/mail-dir t))
    ;; lage mail-save direktori om ikke allerede finnes
    (unless (file-exists-p ybk/mail-keep)
      (make-directory ybk/mail-keep))

    (setq gnus-cache-directory (concat ybk/mail-dir "cache/"))
    (setq gnus-kill-files-directory (concat ybk/mail-dir "scores/"))
    (setq gnus-article-save-directory (concat ybk/mail-dir "saved/"))

    ;; Archieve sent mail folder created yearly instead
    ;; of monthly (default)
    (setq gnus-message-archive-group '((format-time-string "sent.%Y")))

    ;; Relocate mails
    ;; https://searchcode.com/file/104592246/dot-gnus.el
    (defun keep-mail (&optional arg)
      (interactive "P")
      (let ((directory ybk/mail-keep))
        (message "Saving all MIME parts to %s..." directory)
        (gnus-summary-save-parts ".*" directory arg)
        (message "Saving all MIME parts to %s...done" directory)))

    ;; (bind-key "X m" 'my-gnus-summary-save-parts gnus-summary-mode-map)

    ;; Show latest received mails
    ;; http://www.xsteve.at/prg/gnus/
    (defun xsteve-show-nnmail-split-history ()
      (interactive)
      (let ((hi (sort (mapcar 'caar nnmail-split-history) 'string<))
            (elem)
            (count)
            (total))
        (while hi
          (if (string= elem (car hi))
              (setq count (+ count 1))
            (setq elem (car hi))
            (when total
              (setcar total (concat (car total) ": " (number-to-string count))))
            (setq count 1)
            (add-to-list 'total elem))
          (setq hi (cdr hi)))
        (if total
            (setcar total (concat (car total) ": " (number-to-string count)))
          (setq total '("No new Mail")))
        (message (format"%s%s" xsteve-check-mail-time (nreverse total)))))

    (defun xsteve-get-new-news-set-time ()
      (setq xsteve-check-mail-time (format-time-string "[%H:%M] ")))

    (unless (boundp 'xsteve-check-mail-time)
      (xsteve-get-new-news-set-time))


    (add-hook 'gnus-get-new-news-hook 'xsteve-get-new-news-set-time)

    ;; Hydra
    (eval-after-load 'gnus-group
      '(progn
         (defhydra hydra-gnus-group (:color green
                                            :hint nil)
           "
            ^Group (gp)^
            ^---^-------------^---^------------^---^----------
            _a_: Remote gp     _c_: Read All    _f_: Search server
            _l_: Local gp      _m_: Compose     _s_: Servers
            _L_: All local gp  _x_: Mark        _g_: Refresh

           "
           ("a" gnus-group-list-active) ;A A
           ("l" gnus-group-list-groups) ;l
           ("L" gnus-group-list-all-groups) ;L
           ("c" gnus-topic-catchup-articles) ;c
           ("f" gnus-group-make-nnir-group) ;G G
           ("g" gnus-group-get-new-news) ;g
           ("s" gnus-group-enter-server-mode)
           ("m" gnus-group-new-mail) ;m OR C-x m
           ("x" gnus-topic-mark-topic) ; #
           ("q" nil "quit":color blue ))

         ;; "Do?"
         ;; ("a" gnus-group-list-active "REMOTE groups A A")
         ;; ("l" gnus-group-list-all-groups "LOCAL groups L")
         ;; ("c" gnus-topic-catchup-articles "Read all c")
         ;; ("f" gnus-group-make-nnir-group "Search server G G")
         ;; ("g" gnus-group-get-new-news "Refresh g")
         ;; ("s" gnus-group-enter-server-mode "Servers")
         ;; ("m" gnus-group-new-mail "Compose m OR C-x m")
         ;; ("x" gnus-topic-mark-topic "mark #")
         ;; ("q" nil "cancel"))
         ;; y is not used by default
         (define-key gnus-group-mode-map "y" 'hydra-gnus-group/body)))

    ;; gnus-summary-mode
    (eval-after-load 'gnus-sum
      '(progn
         (defhydra hydra-gnus-summary (:color blue)
           "Do?"
           ("s" gnus-summary-show-thread "Show thread")
           ("h" gnus-summary-hide-thread "Hide thread")
           ("n" gnus-summary-insert-new-articles "Refresh / N")
           ("o" gnus-summary-insert-old-articles "Show read")
           ("f" gnus-summary-mail-forward "Forward C-c C-f")
           ("!" gnus-summary-tick-article-forward "Mail -> disk !")
           ("p" gnus-summary-put-mark-as-read "Mail <- disk")
           ("c" gnus-summary-catchup-and-exit "Read all c")
           ("e" gnus-summary-resend-message-edit "Resend S D e")
           ("R" gnus-summary-reply-with-original "Reply with original R")
           ("r" gnus-summary-reply "Reply r")
           ("W" gnus-summary-wide-reply-with-original "Reply all with original S W")
           ("w" gnus-summary-wide-reply "Reply all S w")
           ("#" gnus-topic-mark-topic "mark #")
           ("q" nil "cancel"))
         ;; y is not used by default
         (define-key gnus-summary-mode-map "y" 'hydra-gnus-summary/body)))

    ;; gnus-article-mode
    (eval-after-load 'gnus-art
      '(progn
         (defhydra hydra-gnus-article (:color blue)
           "Do?"
           ("f" gnus-summary-mail-forward "Forward")
           ("R" gnus-article-reply-with-original "Reply with original R")
           ("r" gnus-article-reply "Reply r")
           ("W" gnus-article-wide-reply-with-original "Reply all with original S W")
           ("o" gnus-mime-save-part "Save attachment at point o")
           ("w" gnus-article-wide-reply "Reply all S w")
           ("q" nil "cancel"))
         ;; y is not used by default
         (define-key gnus-article-mode-map "y" 'hydra-gnus-article/body)))

    )
#+END_SRC
*** Hydra email
Kekunci email gunakan hydra untuk Gnus.
#+BEGIN_SRC emacs-lisp :tangle no
  (eval-after-load 'message
    '(progn
       (defhydra ybk-hydra-message (:hint nil)
         "
               ^E-mailing^
               ^--^----------^--^----------
               _e_: email     _c_: check   _v_: vedlegg  _k_: contact     _s_: send
               _a_: show all  _w_: compose _x_: keep     _o_: insert old  _q_: KELUAR
              "
         ("e" gnus)
         ("k" counsel-bbdb-complete-mail)
         ("a" ybk/gnus-list-all)

         ("c" xsteve-show-nnmail-split-history) ;show latest received mails
         ("w" compose-mail)

         ("x" keep-mail)
         ("v" mml-attach-file) ;C-c C-a

         ("o" gnus-summary-insert-old-articles)
         ("s" message-send-and-exit) ;C-c C-c

         ("q" (message "KELUAR") :exit t)
         )

       (global-set-key (kbd "<f8>") 'ybk-hydra-message/body)))
#+END_SRC

*** Summary view
Bagaimana cara untuk ditujukkan di summary utk Gnus
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Summary
  ;; line Format
  ;; (setq gnus-summary-line-format "%O%U%R%z%d %B%(%[%4L: %-22,22f%]%) %s\n")
  ;; (setq gnus-summary-mode-line-format "Gnus: %p [%A / Sc:%4z] %Z")
  (use-package rs-gnus-summary
    :load-path "~/Dropbox/lisp/"
    :config
    (rs-gnus-summary-line-initialize)

    ;; ;; size function
    ;; (defalias 'gnus-user-format-function-size
    ;;   'rs-gnus-summary-line-message-size)
    ;; content-type function
    (defalias 'gnus-user-format-function-ct
      'rs-gnus-summary-line-content-type)
    ;; Balloon face
    (setq gnus-balloon-face-0 'rs-gnus-balloon-0)
    (setq gnus-balloon-face-1 'rs-gnus-balloon-1)

    ;; (rs-gnus-summary-tree-lines-rs) ;choose the line ie. mt, rs, 01 and test
    )

#+END_SRC

*** Notify
Diambil dari [[https://www.emacswiki.org/emacs/GnusNotify][EmacsWiki]]. Notification di modeline. Utk guna, pakai =G-p= di group buffer
dan masukkan =(modeline-notify t)= di list. Boleh klik di modeline utk buka email baru

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package gnus-notify
    :load-path "~/Dropbox/lisp/elisp/")
#+END_SRC

Notify+ untuk notification di desktop. Tapi ada error ~gnus-group-get-new-news~

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package gnus-notify+
    :load-path "~/Dropbox/lisp/elisp/"
    :config
    (add-hook 'gnus-summary-exit-hook 'gnus-notify+)
    (add-hook 'gnus-group-catchup-group-hook 'gnus-notify+)
    (add-hook 'mail-notify-pre-hook 'gnus-notify+))
#+END_SRC

Notification boleh guna [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Daemons.html][Gnus Daemons]] tapi belum dipelajari caranya. Ini cara utk 5
minit scan di aplikasi

#+BEGIN_SRC emacs-lisp :tangle no
  (gnus-demon-add-handler 'gnus-demon-scan-mail 5 t)
#+END_SRC

** SMTP
*** Utk Gnus
Untuk menghantar email. Rujukan di [[https://www.emacswiki.org/emacs/SendingMail][Wiki]].
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package smtpmail
    :ensure t
    :config
    ;; Sendes fra hoved epost. Kan leses her:
    ;; https://www.emacswiki.org/emacs/SendingMail
    ;;use smtp to send email not mail client
    (setq send-mail-function 'smtpmail-send-it)
    (setq message-send-mail-function 'smtpmail-send-it)
    ;; om port 587 ikke funker, endres til port 27, men specifisere port 587 i authinfo.gpg fil
    (setq smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service  25
          gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
    )
#+END_SRC
*** Ukt mu4e
Aturcara utk pakai dengan =mu4e=. Guna TLS untuk pakai Gmail

#+BEGIN_EXAMPLE
  sudo apt-get install gnutls-bin
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package starttls
    :ensure t
    :config
    (setq starttls-use-gnutls t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smtpmail
    :init
    (setq message-send-mail-function 'smtpmail-send-it
          starttls-use-gnutls t
          smtpmail-starttls-credentials
          '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials    (expand-file-name "~/Dropbox/authentic/mbsync/.authinfo.gpg")
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          smtpmail-debug-info t)

    ;; (setq send-mail-function            'smtpmail-send-it
    ;;       message-send-mail-function    'smtpmail-send-it
    ;;       smtpmail-auth-credentials     (expand-file-name "~/Dropbox/authentic/mbsync/.authinfo.gpg")
    ;;       smtpmail-stream-type          'tls
    ;;       smtpmail-smtp-server          "smtp.gmail.com"
    ;;       smtpmail-smtp-service         25)
    )
#+END_SRC

** Address database
Email address database. Contoh aturcara di [[https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-bbdb.el][sini]].
*** BBDB

#+BEGIN_SRC emacs-lisp
  (use-package bbdb
    :ensure t
    :config
    ;; file path
    (setq bbdb-file "~/Dropbox/address/.bbdb")
    )
#+END_SRC

*** Counsel-bbdb
 Rujuk di [[https://github.com/redguardtoo/counsel-bbdb][GitHub]].
#+BEGIN_SRC emacs-lisp
  (use-package counsel-bbdb
    :ensure t
    :config
    ;;Custom insert mail address
    (setq counsel-bbdb-customized-insert
          (lambda (r append-comma)
            (let* ((family-name (nth 1 r))
                   (given-name (nth 2 r))
                   (display-name (nth 3 r))
                   (mail (nth 4 r))))
            (insert (format "%s:%s:%s <%s>"
                            given-name
                            family-name
                            display-name
                            mail
                            (if append-comma ", " " ")))))
    )
#+END_SRC
*** gmail2bbdb
Sila rujuk ke [[https://github.com/redguardtoo/gmail2bbdb][Github]]

#+BEGIN_SRC emacs-lisp
  (use-package gmail2bbdb
    :ensure t
    :config
    ;; tetapkan path
    (setq gmail2bbdb-bbdb-file "~/Dropbox/address/.bbdb")
    )
#+END_SRC


* Neotree
|---------+---------|
| Kekunci | Fungsi  |
|---------+---------|
| F4      | Neotree |
|---------+---------|

Untuk navigasi di directory. Rujukkan di [[https://github.com/jaypei/emacs-neotree][Neotree]]. Pakai melalui =F4= launch menu.

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :defer 1
    :bind (("<f4>" . neotree-toggle))
    :init
    (progn
      (setq-default neo-smart-open t) ;  every time when the neotree window is
                                          ;  opened, it will try to find current
                                          ;  file and jump to node.
      (setq-default neo-dont-be-alone t) ; Don't allow neotree to be the only open
                                          ; window
      )
    :config
    (progn
      (setq neo-theme 'nerd) ; 'classic, 'nerd, 'ascii, 'arrow

      (setq neo-vc-integration '(face char))

      ;; Patch to fix vc integration
      (defun neo-vc-for-node (node)
        (let* ((backend (vc-backend node))
               (vc-state (when backend (vc-state node backend))))
          ;; (message "%s %s %s" node backend vc-state)
          (cons (cdr (assoc vc-state neo-vc-state-char-alist))
                (cl-case vc-state
                  (up-to-date       neo-vc-up-to-date-face)
                  (edited           neo-vc-edited-face)
                  (needs-update     neo-vc-needs-update-face)
                  (needs-merge      neo-vc-needs-merge-face)
                  (unlocked-changes neo-vc-unlocked-changes-face)
                  (added            neo-vc-added-face)
                  (removed          neo-vc-removed-face)
                  (conflict         neo-vc-conflict-face)
                  (missing          neo-vc-missing-face)
                  (ignored          neo-vc-ignored-face)
                  (unregistered     neo-vc-unregistered-face)
                  (user             neo-vc-user-face)
                  (t                neo-vc-default-face)))))

      (defun ybk/neotree-go-up-dir ()
        (interactive)
        (goto-char (point-min))
        (forward-line 2)
        (neotree-change-root))

      ;; http://emacs.stackexchange.com/a/12156/115
      (defun ybk/find-file-next-in-dir (&optional prev)
        "Open the next file in the directory.
      When PREV is non-nil, open the previous file in the directory."
        (interactive "P")
        (let ((neo-init-state (neo-global--window-exists-p)))
          (if (null neo-init-state)
              (neotree-show))
          (neo-global--select-window)
          (if (if prev
                  (neotree-previous-line)
                (neotree-next-line))
              (progn
                (neo-buffer--execute nil
                                     (quote neo-open-file)
                                     (lambda (full-path &optional arg)
                                       (message "Reached dir: %s/" full-path)
                                       (if prev
                                           (neotree-next-line)
                                         (neotree-previous-line)))))
            (progn
              (if prev
                  (message "You are already on the first file in the directory.")
                (message "You are already on the last file in the directory."))))
          (if (null neo-init-state)
              (neotree-hide))))

      (defun ybk/find-file-prev-in-dir ()
        "Open the next file in the directory."
        (interactive)
        (ybk/find-file-next-in-dir :prev))

      (bind-keys
       :map neotree-mode-map
       ("^"          . ybk/neotree-go-up-dir)
       ("C-c +"      . ybk/find-file-next-in-dir)
       ("C-c -"      . ybk/find-file-prev-in-dir)
       ("<C-return>" . neotree-change-root)
       ("C"          . neotree-change-root)
       ("c"          . neotree-create-node)
       ("+"          . neotree-create-node)
       ("d"          . neotree-delete-node)
       ("r"          . neotree-rename-node)
       ("h"          . neotree-hidden-file-toggle)
       ("f"          . neotree-refresh))))
#+END_SRC
* Tunjuk beza (ediff)
** Ediff
Untuk melihat perbezaan antara dua fail menggunakan =ediff=. Aturcara ini diambil dari =[[https://oremacs.com/2015/01/17/setting-up-ediff/][Oremacs]]=

#+BEGIN_SRC emacs-lisp
  ;; Tidak gunakan separate frame utk control panel
  (csetq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Asingkan window melintang
  (csetq ediff-split-window-function 'split-window-horizontally)

  ;; Abaikan whitespace
  (csetq ediff-diff-options "-w")

  ;; Bagi key bindings
  (defun ora-ediff-hook ()
    (ediff-setup-keymap)
    (define-key ediff-mode-map "j" 'ediff-next-difference)
    (define-key ediff-mode-map "k" 'ediff-previous-difference))

  (add-hook 'ediff-mode-hook 'ora-ediff-hook)

  ;; Pasang semula window configuration bila keluar (q)
  ;; (winner-mode) ;aktifkan winner-mode kalau tidak dipasang secara global
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
#+END_SRC

** Backup-walker
Untuk menunjukkan =diff= file semasa dan file sebelumnya sekiranya fail ada di
/backup/. Boleh guna =blame= atau =backup-walker=

#+BEGIN_SRC emacs-lisp
  (use-package backup-walker
    :ensure t
    :bind ("C-c w s" . backup-walker-start))
#+END_SRC
* Version control

| Kekunci | Fungsi           |
|---------+------------------|
| f12-g   | hydra-magit/body |
| C-x g s | Magit-status     |
| C-x g c | Magit-clone      |
| C-x g p | Magit-pull       |


| Git options | Fungsi                              |
|-------------+-------------------------------------|
| fetch --all | fetch semua                         |
| branch -v   | Tunjuk last commit utk semua branch |
| branch -vv  | Tunjuk tracking branches            |
| branch -u   | Tetapkan upstream                   |

** Git
Untuk pakai git command line:
- Utk periksa last commit. Boleh pakai salah satu
#+BEGIN_EXAMPLE
  git log -1 --stat
  git show
#+END_EXAMPLE
** Magit
Utk guna Github. Utk kali pertama perlu =git config= di
terminal. Sekiranya masalah utk pasang dari *Melpa* coba =M-x
package-refresh-contents=

#+BEGIN_EXAMPLE
  git config --global user.name "bla bla bla"
  git config --global user.email "youremail@uremail.com"
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands magit-get-top-dir
    ;;:pin melpa-stable
    :bind (("C-x g s" . magit-status)
           ("C-x g c" . magit-clone)
           ("C-x g p" . magit-pull)
           ("C-x g l" . magit-log-buffer-file)
           ("C-x g b" . magit-blame)
           ("C-x g m" . hydra/magit-body))
    :init
    (progn
      ;; we no longer need vc-git
      (delete 'Git vc-handled-backends)
      ;; make magit status go full-screen but remember previous window
      ;; settings
      ;; from: http://whattheemacsd.com/setup-magit.el-01.html
      (defadvice magit-status (around magit-fullscreen activate)
        (window-configuration-to-register :magit-fullscreen)
        ad-do-it
        (delete-other-windows))

      ;; Close popup when commiting - this stops the commit window
      ;; hanging around
      ;; From: http://git.io/rPBE0Q
      (defadvice git-commit-commit (after delete-window activate)
        (delete-window))

      (defadvice git-commit-abort (after delete-window activate)
        (delete-window))

      ;; these two force a new line to be inserted into a commit window,
      ;; which stops the invalid style showing up.
      ;; From: http://git.io/rPBE0Q
      (defun magit-commit-mode-init ()
        (when (looking-at "\n")
          (open-line 1)))

      (add-hook 'git-commit-mode-hook 'magit-commit-mode-init)

      ;;  ;;== Hydra magit ===
      ;;  (defhydra hydra-magit (:color teal
      ;;     :column 5)
      ;; "Magit"
      ;; ("s" magit-status "status")
      ;; ("f" magit-fetch "fetch")
      ;; ("d" magit-diff "diff")
      ;; ("c" magit-clone "clone")
      ;; ("p" magit-pull "pull")
      ;; ("m" magit-merge "merge")
      ;; ("o" magit-checkout "checkout")
      ;; ("b" magit-branch-popup "branch manager")
      ;; ("u" magit-branch-and-checkout "branch and checkout")
      ;; ("l" magit-log "log")
      ;; ("!" magit-git-command "command")
      ;; ("$" magit-process "process")
      ;; ("q" nil "quit" :color red))

      (defhydra hydra-magit (:hint nil)

        "
   ^Kunci magit/GIT^
   ^^^^^^^^----------------
   _s_: status     _f_: fetch      _o_: checkout    _b_: branch manager         _a_: blame
   _d_: diff       _c_: clone      _l_: log buffer  _u_: branch and checkout    _!_: command
   _p_: pull       _m_: merge      _L_: log         _k_: branch delete          _q_: keluar

        "
        ("s" magit-status)
        ("f" magit-fetch)
        ("d" magit-diff)
        ("c" magit-clone)
        ("p" magit-pull )
        ("m" magit-merge)
        ("o" magit-checkout)
        ("b" magit-branch-popup)
        ("u" magit-branch-and-checkout)
        ("L" magit-log)
        ("l" magit-log-buffer-file)
        ("!" magit-git-command)
        ("k" magit-branch-delete)
        ("a" magit-blame-popup)
        ("q" (message "Selesai") :exit t)
        )

      ;;(key-chord-define-global "jg" #'hydra-magit/body)
      (key-seq-define-global "jg" #'hydra-magit/body)
      (bind-key "g" #'hydra-magit/body 'ybk/prog-map)
      )

    :config
    ;; restore previously hidden windows
    (defadvice magit-quit-window (around magit-restore-screen activate)
      (let ((current-mode major-mode))
        ad-do-it
        ;; we only want to jump to register when the last seen buffer
        ;; was a magit-status buffer.
        (when (eq 'magit-status-mode current-mode)
          (jump-to-register :magit-fullscreen))))

    (defun magit-maybe-commit (&optional show-options)
      "Runs magit-commit unless prefix is passed"
      (interactive "P")
      (if show-options
          (magit-key-mode-popup-committing)
        (magit-commit)))

    ;;  ;; major mode for editing `git rebase -i` files
    ;;  (use-package rebase-mode
    ;; :defer 2)

    (define-key magit-mode-map "c" 'magit-maybe-commit)

    ;; magit settings
    (setq
     ;; use ivy to look for branches
     magit-completing-read-function 'ivy-completing-read
     ;; don't put "origin-" in front of new branch names by default
     magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
     ;; open magit status in same window as current buffer
     magit-status-buffer-switch-function 'switch-to-buffer
     ;; highlight word/letter changes in hunk diffs
     magit-diff-refine-hunk t
     ;; ask me if I want to include a revision when rewriting
     magit-rewrite-inclusive 'ask
     ;; ask me to save buffers
     magit-save-some-buffers t
     ;; pop the process buffer if we're taking a while to complete
     magit-process-popup-time 30
     ;; ask me if I want a tracking upstream
     magit-set-upstream-on-push 'askifnotset
     ))
#+END_SRC

#+RESULTS:
** Diff highlights
Menanda secara langsung pertukaran di dokument. Rujuk [[https://github.com/nonsequitur/git-gutter-plus][Github]].
"+" menandakan tambahan dan "¤" menandakan pertukaran

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter+
    :ensure t
    :diminish git-gutter+-mode
    :init
    (global-git-gutter+-mode)
    :bind (("s-g" . git-gutter+-mode)
           :map git-gutter+-mode
           ("C-x c" . git-gutter+-commit)
           ("C-x C" . git-gutter+-stage-and-commit)) ;on/off current-buffer
    :config
    (setq git-gutter+-modified-sign "¤"))
#+END_SRC

** Cara pakai repo baru
Cara utk memuatpasang repo baru ke =Github= ialah:
+ Buat Repo baru di [[https://github.com][Github]] samada [[https://github.com/yusbk][Personal]] atau [[https://github.com/ybkamaleri][Work]]
+ =M-x magit-init= utk branch repo baru
+ Sahkan repo baru di =Github=
+ Pilih fails utk dimasukkan ke =stage= dgn menekan kekunci =s=
+ =Commit= dengan menekan kekunci =c= dan tulis maklumat utk =commit=
+ =C-c C-c= utk =commit=
+ =M-x magit-remote-add= utk menetapkan =remote add origin= seperti menggunakkan
  komando di =git=
+ Berikan =remote name= cth. aimPlot
+ Berikan =remote URL= cth. https://github.com/yusbk/InitEmacs.git atau pakai kekunci
  =SSH= sekiranya sudah dipasang. Utk alamat url yg betul boleh dikopi dari Github
+ =M-x f= utk tarikturun (=fetch/pull=) sebarang fail yg terdapat di repo
  cth. README.md sebelum =push=. Fail yg sama nama di =master= harus dibuang
+ =M-x p= utk muatpasang atau =push= *master* ke *origin* di repo baru.

** Tips
Beberapa tips utk membantu memudahkan penggunaan =Magit=

+ "Branch manager" =magit-show-refs-popup= kekunci ialah =y=.
+ Buang commit di 'remote' boleh pakai force push =P -fp= utk push-remote atau =P
  -fu= utk upstream.
+ Utk ambil repo baru pakai =M-x magit-clone=
  https://github.com/<pengguna>/<repo.git>
* Weather
Cuaca semasa dari [[https://www.met.no/][Meteorologisk institutt]]. Aturcara boleh di lihat di [[https://github.com/ruediger/weather-metno-el][GitHub]]. Untuk
lihat cuaca tempat lain boleh pakai =M-x weather-metno-forecast-location= atau =F10-b=

#+BEGIN_SRC emacs-lisp
  (use-package weather-metno
    :ensure t
    :config
    (setq weather-metno-location-name "Oslo, Norge"
          weather-metno-location-latitude 59
          weather-metno-location-longitude 10)

    ;; ;; endre størrelse til iconer
    ;; (setq weather-metno-use-imagemagick t)
    ;; (setq weather-metno-get-image-props '(:width 10 :height 10 :ascent center))
    (setq weather-metno-get-image-props '(:ascent center))
    )
#+END_SRC
* Google-translate
Untuk pakai fungsi =Google Translate= di GNU Emacs. Sila lihat sumber di[[https://github.com/atykhonov/google-translate][sini]]. Sekiranya
bahasa untuk terjemahan tidak seperti yang sedia ada, boleh cari bahasa dengan
menggunakan permulaan =C-u= kemudian fungsi biasa =C-c t=. Pemakaian =C-u= akan mematikan
aturcara yang ditetapkan dan kembali ke asalnya (/default/).

#+BEGIN_SRC emacs-lisp
  (use-package google-translate
    :ensure t
    :bind (("C-c t" . google-translate-at-point)
           :map ybk/org-map
           ("t" . hydra-google-trans/body))
    :init
    ;;Hydra
    (defhydra hydra-google-trans (:color blue
                                         :columns 6)
      "Google-translate"
      ("t" google-translate-smooth-translate "pilih terjemahan")
      ("n" google-translate-at-point "terjemah NO-BI")
      ("b" google-translate-at-point-reverse "terjemah BI-NO")
      ("o" google-translate-query-translate-reverse "perkataan NO-BI")
      ("i" google-translate-query-translate "perkataan BI-NO")
      ("q" nil "keluar")))
#+END_SRC

** Default-UI
Sekiranya bahasa tidak sedia ditetapkan di 'Smooth UI' boleh pilih dari pilihan
pelbagai bahasa. Jika bahasa untuk terjemahan selain dari NO ke BI, boleh matikan
~source-language~ dan ~target-language~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-translate-default-ui
    :ensure google-translate
    ;; :bind (("C-c t p" . google-translate-at-point)
    ;;        ("C-c t o" . google-translate-at-point-reverse)
    ;;        ("C-c t h" . google-translate-query-translate)
    ;;        )
    :init
    ;;sekiranya ingin menetapkan bahasa
    (setq google-translate-default-target-language "no") ;terjemah ke
    (setq google-translate-default-source-language "en") ;terjemah dari
    )
#+END_SRC

** Smooth-UI
Untuk kombinasi pelbagi bahasa. Tukar bahasa untuk terjemah pakai =C-n= atau =C-p=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-translate-smooth-ui
    :ensure google-translate
    ;; :bind ("C-c t t" . google-translate-smooth-translate)
    :init
    ;; terjemahan utk dipakai
    (setq google-translate-translation-directions-alist
          '(("en" . "ms")
            ("ms" . "en")
            ("no" . "ms")
            ("ms" . "no")))

    ;; ;; input disabled with source lang is "en" and ybk-blog when lang is "malay" or "norsk"
    ;; (setq google-translate-preferable-input-methods-alist '((nil . ("en"))
    ;;                                                         (ybk-blog . ("ms""no"))))
    )

#+END_SRC

* Code cleanup
Berbagai fungsi untuk bersihkan code
** Electric operator
Electric operator akan menjarakkan ~y=1*3+2~ ke ~y = 1 * 3 + 2~
#+BEGIN_SRC emacs-lisp
  (use-package electric-operator
    :ensure t
    :config
    ;; edit rules for ESS mode
    (electric-operator-add-rules-for-mode 'ess-mode
                                          (cons ":=" " := ")
                                          ;; (cons "%" "%")
                                          (cons "%in%" " %in% ")
                                          (cons "%>%" " %>% "))

    (setq electric-operator-R-named-argument-style 'spaced) ;if unspaced will be f(foo=1)
    (add-hook 'ess-mode-hook #'electric-operator-mode)
    (add-hook 'python-mode-hook #'electric-operator-mode))
#+END_SRC
** Whitespace-cleanup
Akan memakai "whitespace-cleanup" sebelum buffer disimpan (save) smartly sumber
https://github.com/jabranham/emacs/blob/master/emacs.org
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :config
    (ws-butler-global-mode)
    :diminish (ws-butler-mode . ""))
#+END_SRC
** smart-newline
Guna =RET= untuk newline bila buat kode
#+BEGIN_SRC emacs-lisp
  (use-package smart-newline
    :ensure t
    :config
    ;; Aktifkan global
    (smart-newline-mode 1)

    ;; ;; Aktifkan hanya di mode tertentu
    ;; (add-hook 'ess-mode-hook
    ;;           (lambda ()
    ;;             (smart-newline-mode 1)))
    )

#+END_SRC
* StackExchange
Stack Exchange mode for Emacs from [[https://github.com/vermiculus/sx.el][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package sx
    :ensure t
    :init
    (defhydra hydra-stackExchange (:color blue)
      "Stack Exchange"
      ("x" sx-tab-all-questions "questions")
      ("i" sx-inbox "inbox")
      ("o" sx-open-link "link")
      ("u" sx-tab-unanswered-my-tags "unanswered")
      ("a" sx-ask "ask")
      ("s" sx-search "search")
      ("n" sx-tab-newest "newest")
      ("q" nil "cancel"))
    )
#+END_SRC

* Miscellaneous
** Lorem
Lorem ipsum
#+BEGIN_SRC emacs-lisp
  (defun lorem ()
    "Insert a lorem ipsum."
    (interactive)
    (insert "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
            "eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim"
            "ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut "
            "aliquip ex ea commodo consequat. Duis aute irure dolor in "
            "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
            "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in "
            "culpa qui officia deserunt mollit anim id est laborum."))
#+END_SRC

** Rmarkdown chunk
Ini ialah chunk untuk dipakai bila buat *Kvartalsrapport*
*** premeable
Untuk pakai bila buat Rmarkdown
#+BEGIN_SRC emacs-lisp
  (defun rap-premeable ()
    "Insert rapport premeable"
    (interactive)
    (insert "--- \n"
            "title: \n"
            " output: \n"
            " pdf_document: default \n"
            " date: '`r format(Sys.Date(), \"%d %b %Y\")`' \n"
            "--- \n"
            ))
#+END_SRC
*** chunck
Rmarkdown chunck
#+BEGIN_SRC emacs-lisp
  (defun rap-chunk ()
    "Rapport chunck"
    (interactive)
    (insert "```{r setup , echo=FALSE, warning=FALSE, include=FALSE, message=FALSE} \n\n"

            "```"))
#+END_SRC

* Coba
Untuk coba pakej sebelum dipakai. Install di tmp
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t
    :commands (try))
#+END_SRC
* Music
Untuk dengar lagu-lagu diambil dari [[https://www.gnu.org/software/emms/index.html][EMMS]]

#+BEGIN_SRC emacs-lisp
  (use-package emms-setup
    :load-path "~/Dropbox/lisp/emms/lisp/"
    :config
    (emms-standard)
    (emms-default-players)

    ;;Musics folder
    (setq emms-source-file-default-directory "~/Music/")

    ;;Interactive playlist as default
    (setq emms-playlist-default-major-mode 'emms-playlist-mode)
    )
#+END_SRC

* Just in case
Beberapa situasi yang pernah dialami dan beberikan masalah

** XF86 keys
Sekiranya kekunci dari F2 ke F12 tidak berfungsi dan hanya menunjukkan XF86New, XF86Open,
XF86Close dan sebagainya ini menandakan yang button ~LOCK~ diaktifkan.
* My personal hydra keymaps
** General keymap [jm]
Hydra untuk fungsi awam
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-ybk-general (:hint nil)
    "
     ^General keymap [F6] or jm^
     ^-------------------------------
     _y_: ybk-init  _g_: highlight        _s_: stackOverflow  _w_: swap-windows       _e_: musics (emms)   _x_: save buffers & exit
     _h_: heading   _l_: warna highlight  _r_: rss            _n_: file explore [F4]  _u_: weather (metno) _c_: key-chord-mode
     _t_: theme     _m_: menu bar         _o_: scratch        _k_: delete file/buffer _U_: weather update  _q_: KELUAR
    "

    ("y" ybk/emacs-file)
    ("h" worf-goto)
    ("t" cycle-my-theme)

    ("g" hl-line-mode)
    ("l" hydra-hl-line/body :exit t)
    ("m" toggle-menu-bar-mode-from-frame)

    ("s" hydra-stackExchange/body :exit t)
    ("r" bjm/elfeed-load-db-and-open)
    ("o" ybk/get-scratch)

    ("w" crux-swap-windows)
    ("n" neotree-toggle)
    ("k" crux-delete-file-and-buffer)

    ("e" emms)
    ("u" weather-metno-forecast)
    ("U" weather-metno-update)

    ("x" save-buffers-kill-emacs)
    ("c" key-chord-mode)
    ("q" (message "KELUAR") :exit t))

  (key-chord-define-global "jm" #'hydra-ybk-general/body)
  (global-set-key (kbd "<f6>") 'hydra-ybk-general/body)
#+END_SRC
** Move keymap [jj]
Hydra move keymap seperti =F2=. Singkatan =j= sebagai *Jalan*

#+BEGIN_SRC emacs-lisp
  (defhydra ybk-map-move (:hint nil)
    "
    ^Move keymap [F2] or jj
    ^Misc^                                   ^Bookmarks^          ^Register^                      ^_q_: KELUAR^
    ^----------------------------------------^---------^----------^--------^-----------------------------------------------
    _+_: resize window     _h_: doc heading  _m_: bookmark set  _SPC_: reg set       _r_: mark set    _a_: mark show
    _w_: select window     _o_: imenu        _t_: bookmark-goto   _j_: reg jump      _n_: mark next   _A_: mark show all
    _b_: move buffer       _g_: goto         _J_: bookmark jump   _l_: bookmark list _p_: mark prev   _x_: mark remove all
    _f_: trans. frame C-t  _s_: search
    "
    ("+" resize-window)
    ("w" winum-select-window-by-number)
    ("b" hydra-buffer/body :exit t)
    ("f" transpose-frame)

    ("h" worf-goto)
    ("o" counsel-imenu)
    ("g" hydra-avy-goto/body :exit t)

    ("m" bookmark-set)
    ("t" ivy-bookmark-goto)
    ("J" bookmark-jump)

    ("SPC" point-to-register)
    ("j" jump-to-register)
    ("l" bookmark-bmenu-list)

    ("r" bm-toggle)
    ("n" bm-next)
    ("p" bm-previous)

    ("a" bm-show)
    ("A" bm-show-all)
    ("x" bm-remove-all-all-buffers)

    ("s" swiper)
    ("q" (message "KELUAR") :exit t)
    )

  ;; pakai urutan huruf
  (key-seq-define-global "jj" 'ybk-map-move/body)

  ;; ;; tanpa ikut urutan huruf
  ;; (key-chord-define-global "jj" #'ybk-map-move/body)
#+END_SRC
** Org keymap [jw]
Hydra keymap untuk =org=. Singkatan =w= sebagai *Word*
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra ybk-keymap-org (:hint nil)
    "
    ^Org-keymap [F10] or jw^
    ^--------------------------
    _y_: my agenda      _f_: kamus             _c_: insert cite           _x_: export pdf        _j_: tunjuk/tapok kod   _h_: heading
    _r_: refile agenda  _k_: tukar bahasa      _l_: insert internal link  _z_: save as pdf       _i_: tunjuk/tapok imej  _s_: insert src-block
    _w_: today          _t_: google-translate  _v_: org option (sparse)   _n_: meeting note   _<up>_: previous heading
    _d_: TODO           _p_: gambar/pic        _b_: bibtex                _m_: meeting done _<down>_: next heading

    "
    ("y" ybk/min-agenda)
    ("r" ybk/refile)
    ("w" ybk/waktu-todo)
    ("d" ybk/todo)

    ("f" hydra-ybk-kamus/body :exit t)
    ("k" ybk/change-languages)
    ("t" hydra-google-trans/body :exit t)
    ("p" hydra-photo/body :exit t)

    ("c" org-ref-ivy-insert-cite-link)
    ("l" ybk/worf-insert-internal-link)
    ("v" org-sparse-tree) ;list things like TODO, SCHEDULED etc
    ("b" hydra-ybk-bibtex/body :exit t)

    ("x" org-export-pdf-open)
    ("z" org-save-as-pdf)
    ("n" meeting-notes)
    ("m" meeting-done)

    ("j" org-toggle-link-display)
    ("i" org-toggle-inline-images)
    ("s" ybk/org-insert-src-block)
    ("<down>" org-next-visible-heading) ;navigate headings down
    ("<up>" org-previous-visible-heading) ;navigate headings up

    ("h" worf-goto)

    ("q" nil "KELUAR"))

  ;; ikut urutan huruf
  ;;(key-seq-define-global "jw" 'ybk-keymap-org/body)
  (key-seq-define org-mode-map "jw" 'ybk-keymap-org/body)

  ;; ;; tanpa ikut urutan huruf
  ;; (key-chord-define-global "zd" #'ybk-keymap-org/body)
#+END_SRC
** Prog keymap [jc]
Hydra keymap untuk program seperti penggunaan =[F12]= cuma lebih ringkas. =c= sebagai *Code*.
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-ybk-prog (:hint nil)
    "
    ^Programming keymap: [F12] or jc^

    ^Project^          ^expr^            ^misc^                   ^kode^                ^extra^
    ^---------------------------------------------------------------------------------------------------
    _P_: Projectile    _a_: start exp    _k_: kill other buffers  _g_: Magit            _r_: knitr (js)
    _p_: find project  _e_: end exp      _y_: Yasnippet           _d_: Ediff            _R_: debug R (jk)
    _o_: Origami       _u_: unwrap exp   _-_: del unuse yas.      _f_: diff-walker      _S_: smartparens ON/OFF
    _s_: scratch       _x_: kill exp     _w_: send2browser        _c_: cleanup/tabbify  _q_: KELUAR
    "

    ("P" hydra-projectile/body :exit t)
    ("p" counsel-switch-project)
    ("y" company-yasnippet)
    ("-" r-autoyas-exit-snippet-delete-remaining)

    ("a" sp-beginning-of-sexp)
    ("e" sp-end-of-sexp)
    ("u" sp-unwrap-sexp)
    ("x" sp-kill-sexp)

    ("g" hydra-magit/body :exit t)
    ("w" browse-url-of-buffer)
    ("o" hydra-origami/body :exit t)
    ("c" crux-cleanup-buffer-or-region)

    ("k" crux-kill-other-buffers)
    ("s" crux-create-scratch-buffer)
    ("d" ediff)
    ("f" backup-walker-start)

    ("S" smartparens-mode)
    ("r" hydra-ybk-poly/body :exit t)
    ("R" hydra-ybk-r-debug/body :exit t)

    ("q" (message "KELUAR") :exit t)
    )

  ;; ikut urutan huruf
  (key-seq-define-global "jc" 'hydra-ybk-prog/body)
#+END_SRC
